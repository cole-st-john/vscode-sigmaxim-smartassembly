{
    "ACTIVATE_EXPLODE_STATE": {
        "prefix": "ACTIVATE_EXPLODE_STATE",
        "body": [
            "ACTIVATE_EXPLODE_STATE ${1:input_mdl_reference} ${2:input_name_of_explode_state}"
        ],
        "description": "Activates a specific explode state in an assembly."
    },
    "ACTIVATE_INSERT_MODE": {
        "prefix": "ACTIVATE_INSERT_MODE",
        "body": [
            "ACTIVATE_INSERT_MODE ${1|BEFORE,AFTER|} ${2:input_feature_reference_for_relative_position}"
        ],
        "description": "Activate insert mode before or after a specific feature."
    },
    "ACTIVATE_LAYER_STATE": {
        "prefix": "ACTIVATE_LAYER_STATE",
        "body": [
            "ACTIVATE_LAYER_STATE ${1:input_mdl_reference}  ${2:input_name_of_layer_state}"
        ],
        "description": "Activates a layer state in a solid model. This command requires Creo Parametric 2.0 or above."
    },
    "ACTIVATE_SERVER": {
        "prefix": "ACTIVATE_SERVER",
        "body": [
            "ACTIVATE_SERVER ${1:input_location_of_pdmlink_server}"
        ],
        "description": "Activates a registered PDMLink server."
    },
    "ACTIVATE_SIMPREP": {
        "prefix": "ACTIVATE_SIMPREP",
        "body": [
            "ACTIVATE_SIMPREP ${1| ,FORCE|} ${2:input_mdl_reference} ${3:input_name_of_simprep}"
        ],
        "description": "Activates a simplified representation of a model. This works only for assemblies, but not for parts."
    },
    "ACTIVATE_STYLE": {
        "prefix": "ACTIVATE_STYLE",
        "body": [
            "ACTIVATE_STYLE ${1:input_mdl_reference} ${2:input_name_of_style}"
        ],
        "description": "ACTIVATE_STYLE"
    },
    "ACTIVATE_WORKSPACE": {
        "prefix": "ACTIVATE_WORKSPACE",
        "body": [
            "ACTIVATE_WORKSPACE ${1:input_workspace_name_of_pdmlink_server}"
        ],
        "description": "Activate a workspace for the active PDMLink server."
    },
    "ACTIVATE_XSEC": {
        "prefix": "ACTIVATE_XSEC",
        "body": [
            "ACTIVATE_XSEC ${1|input_reference_xsec_feature,input_name_of_xsec|}"
        ],
        "description": "Activates a cross section of the current model by its name or by reference."
    },
    "ADD_ANNOTATION_ELEMENT": {
        "prefix": "ADD_ANNOTATION_ELEMENT",
        "body": [
            "ADD_ANNOTATION_ELEMENT ${1|input_reference_annotation_feature} ${2:input_reference_to_an_annotation_to_add}"
        ],
        "description": "Adds a new annotation element to an annotation feature."
    },
    "ADD_ANNOTATION_ELEMENT_REF": {
        "prefix": "ADD_ANNOTATION_ELEMENT_REF",
        "body": [
            "ADD_ANNOTATION_ELEMENT_REF ${1|ANNOTATION_ELEMENT_REF_TYPE ,STRENGTHEN ,DESCRIPTION |} ${1/(ANNOTATION_ELEMENT_REF_TYPE)|(STRENGTHEN)|(DESCRIPTION)/${1:+STANDARD SURFACE CHAIN}${2:+BOOL}${3:+\"DESCRIPTION\"}/}  ${3:input_reference_to_annotation_element} ${4:input_reference_to_add_as_ae_ref}"
        ],
        "description": "Adds a standard, surface or chain reference to an annotation element."
    },
    "ADD_ANNOTATION_ELEMENT_REFS": {
        "prefix": "ADD_ANNOTATION_ELEMENT_REFS",
        "body": [
            "ADD_ANNOTATION_ELEMENT_REFS ${1|ANNOTATION_ELEMENT_REF_TYPE ,STRENGTHEN ,DESCRIPTION |} ${1/(ANNOTATION_ELEMENT_REF_TYPE)|(STRENGTHEN)|(DESCRIPTION)/${1:+STANDARD SURFACE CHAIN}${2:+BOOL}${3:+\"DESCRIPTION\"}/}  ${3:input_reference_to_annotation_element} ${4:input_array_refs_to_add_as_ae_ref}"
        ],
        "description": "Adds standard, surface or chain references to an annotation element."
    },
    "ADD_ANNOTATION_ELEMENTS": {
        "prefix": "ADD_ANNOTATION_ELEMENTS",
        "body": [
            "ADD_ANNOTATION_ELEMENTS ${1:feat_annotations_IN} ${2:array_elem_annotations_IN}"
        ],
        "description": "Adds an array of annotation elements to an annotation feature."
    },
    "ADD_ANNOTATION_REFS": {
        "prefix": "ADD_ANNOTATION_REFS",
        "body": [
            "ADD_ANNOTATION_REFS$1"
        ],
        "description": "ADD_ANNOTATION_REFS"
    },
    "ADD_ARRAY_ELEM": {
        "prefix": "ADD_ARRAY_ELEM",
        "body": [
            "ADD_ARRAY_ELEM$1"
        ],
        "description": "Appends a new element to the end of an of type parameter, reference or array. That means an array can be an elements of another array."
    },
    "ADD_COMB_VIEW_ANNOTATIONS": {
        "prefix": "ADD_COMB_VIEW_ANNOTATIONS",
        "body": [
            "ADD_COMB_VIEW_ANNOTATIONS$1"
        ],
        "description": "Adds annotations to a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "ADD_DRW_MDL": {
        "prefix": "ADD_DRW_MDL",
        "body": [
            "ADD_DRW_MDL $1"
        ],
        "description": "Adds a model to a drawing."
    },
    "ADD_DRW_NOTE_LEADER": {
        "prefix": "ADD_DRW_NOTE_LEADER",
        "body": [
            "ADD_DRW_NOTE_LEADER$1"
        ],
        "description": "Adds one leader or an array of leaders to a drawing note."
    },
    "ADD_DRW_SYMBOL_LEADER": {
        "prefix": "ADD_DRW_SYMBOL_LEADER",
        "body": [
            "ADD_DRW_SYMBOL_LEADER$1"
        ],
        "description": "Adds one leader or an array of leaders to a drawing symbol."
    },
    "ADD_DRW_TABLE_COL": {
        "prefix": "ADD_DRW_TABLE_COL",
        "body": [
            "ADD_DRW_TABLE_COL$1"
        ],
        "description": "Adds a column to an existing drawing table."
    },
    "ADD_DRW_TABLE_ROW": {
        "prefix": "ADD_DRW_TABLE_ROW",
        "body": [
            "ADD_DRW_TABLE_ROW$1"
        ],
        "description": "Adds a row to an existing drawing table."
    },
    "ADD_MAP_ELEM": {
        "prefix": "ADD_MAP_ELEM",
        "body": [
            "ADD_MAP_ELEM$1"
        ],
        "description": "Adds a new element to a map."
    },
    "ADD_NC_HEAD": {
        "prefix": "ADD_NC_HEAD",
        "body": [
            "ADD_NC_HEAD$1"
        ],
        "description": "Adds a NC head to an existing workcell."
    },
    "ADD_RELATIONS": {
        "prefix": "ADD_RELATIONS",
        "body": [
            "ADD_RELATIONS$1"
        ],
        "description": "Adds an array of relations to a Creo Elements/Pro model, component or a feature."
    },
    "ADD_SEARCH_PATH": {
        "prefix": "ADD_SEARCH_PATH",
        "body": [
            "ADD_SEARCH_PATH $1"
        ],
        "description": "Temporary adds a path to the search paths. This command will not modify the Creo Elements/Pro file. After restarting Creo Elements/Pro this setting is lost."
    },
    "ADD_SELBUFFER": {
        "prefix": "ADD_SELBUFFER",
        "body": [
            "ADD_SELBUFFER $1"
        ],
        "description": "Adds a reference or an array of reference to the selection buffer."
    },
    "ASSEMBLE_EX": {
        "prefix": "ASSEMBLE_EX",
        "body": [
            "ASSEMBLE_EX $1"
        ],
        "description": "Assembles a library component by specifying the constraints via an array. This commend has the same functionality as an block, but it allows to store the constraints in an array and therefor is more flexible."
    },
    "ASSEMBLE_SKELETON": {
        "prefix": "ASSEMBLE_SKELETON",
        "body": [
            "ASSEMBLE_SKELETON $1"
        ],
        "description": "Assembles the first skeleton in an assembly."
    },
    "ASSIGN_VALUE": {
        "prefix": "ASSIGN_VALUE",
        "body": [
            "ASSIGN_VALUE $1"
        ],
        "description": "Assigns a value or content of a parameter to another parameter."
    },
    "AUTHENTICATE": {
        "prefix": "AUTHENTICATE",
        "body": [
            "AUTHENTICATE $1"
        ],
        "description": "Authenticates a user via the password database."
    },
    "BACKUP_MDL": {
        "prefix": "BACKUP_MDL",
        "body": [
            "BACKUP_MDL $1"
        ],
        "description": "Saves a copy the model to a specific folder."
    },
    "BOOLEAN_BODY_OPERATION": {
        "prefix": "BOOLEAN_BODY_OPERATION",
        "body": [
            "BOOLEAN_BODY_OPERATION $1"
        ],
        "description": "BOOLEAN_BODY_OPERATION"
    },
    "BREAK_MDL_DEPENDENCIES": {
        "prefix": "BREAK_MDL_DEPENDENCIES",
        "body": [
            "BREAK_MDL_DEPENDENCIES $1"
        ],
        "description": "Break dependencies of a model. This helps to remove references to ghost objects. This function requires Creo Parametric 2.0 or above."
    },
    "BUILD_FILE_NAME": {
        "prefix": "BUILD_FILE_NAME",
        "body": [
            "BUILD_FILE_NAME $1"
        ],
        "description": "Builds the file name from path, name and extension information. This command determines automatically if slashes or backslashes need to be added."
    },
    "CALC_CLEARANCE": {
        "prefix": "CALC_CLEARANCE",
        "body": [
            "CALC_CLEARANCE $1"
        ],
        "description": "Calculates the clearance between two parts similar to Analysis > Model > Pairs Clearance."
    },
    "CALC_CURVE_EXTREMES": {
        "prefix": "CALC_CURVE_EXTREMES",
        "body": [
            "CALC_CURVE_EXTREMES $1"
        ],
        "description": "Calculates the extreme points of the curves in one direction."
    },
    "CALC_CURVE_POINT": {
        "prefix": "CALC_CURVE_POINT",
        "body": [
            "CALC_CURVE_POINT $1"
        ],
        "description": "Calculates the point on the curves with has a specific distance in one direction."
    },
    "CALC_CURVE_POINTS": {
        "prefix": "CALC_CURVE_POINTS",
        "body": [
            "CALC_CURVE_POINTS $1"
        ],
        "description": "Calculates the points on the curves with have a specific distance in one direction."
    },
    "CALC_FEATURE_DIFF": {
        "prefix": "CALC_FEATURE_DIFF",
        "body": [
            "CALC_FEATURE_DIFF $1"
        ],
        "description": "Compares two models and returns features of the first model which are only available in this model or which are different from the corresponding feature in the second model. By default the comparison of feature is only done by their geometry. Comparison against their dimensions can be included."
    },
    "CALC_FEATURE_OUTLINE": {
        "prefix": "CALC_FEATURE_OUTLINE",
        "body": [
            "CALC_FEATURE_OUTLINE $1"
        ],
        "description": "Compares two models and returns features of the first model which are only available in this model or which are different from the corresponding feature in the second model. By default the comparison of feature is only done by their geometry. Comparison against their dimensions can be included."
    },
    "CALC_FORMULA": {
        "prefix": "CALC_FORMULA",
        "body": [
            "CALC_FORMULA $1"
        ],
        "description": "Calculates a formula by a string expression. Variable used in the formula must be available in SmartAssembly. Otherwise the calculation fails."
    },
    "CALC_FRACTION": {
        "prefix": "CALC_FRACTION",
        "body": [
            "CALC_FRACTION $1"
        ],
        "description": "Calculates fraction values and strings."
    },
    "CALC_GLOBAL_INTERFERENCE": {
        "prefix": "CALC_GLOBAL_INTERFERENCE",
        "body": [
            "CALC_GLOBAL_INTERFERENCE $1"
        ],
        "description": "Calculates the global interference of an assembly similar to ."
    },
    "CALC_ORIENTATION": {
        "prefix": "CALC_ORIENTATION",
        "body": [
            "CALC_ORIENTATION $1"
        ],
        "description": "Determines the orientation of a curve, a composite curve or an edge related to a direction vector."
    },
    "CALC_OUTLINE": {
        "prefix": "CALC_OUTLINE",
        "body": [
            "CALC_OUTLINE $1"
        ],
        "description": "Calculates the outline of a model, including its sub components regarding the specified coordinate system."
    },
    "CALC_OUTLINE_PARAM": {
        "prefix": "CALC_OUTLINE_PARAM",
        "body": [
            "CALC_OUTLINE_PARAM $1"
        ],
        "description": "Calculates center and size of a model with respect to a coordinate system and stores it in a parameter."
    },
    "CALC_PARAM_POS": {
        "prefix": "CALC_PARAM_POS",
        "body": [
            "CALC_PARAM_POS $1"
        ],
        "description": "Calculates a position on a geometrical reference based on a parametrization between 0 and 1. For edges and curves only one parameter is used. For surfaces two are required."
    },
    "CALC_POINT_ON_LINE": {
        "prefix": "CALC_POINT_ON_LINE",
        "body": [
            "CALC_POINT_ON_LINE $1"
        ],
        "description": "Calculates if a point is located on a line or a segment and its projection point on it."
    },
    "CALC_RAY_INTERSECTION": {
        "prefix": "CALC_RAY_INTERSECTION",
        "body": [
            "CALC_RAY_INTERSECTION $1"
        ],
        "description": "Calculates the intersected model of a ray. Only visible models are considered. For each model the information about ray intrusion and extrusion is calculated. The output is sorted by the intruding order of the different models."
    },
    "CALC_SURFACE_SIDE": {
        "prefix": "CALC_SURFACE_SIDE",
        "body": [
            "CALC_SURFACE_SIDE $1"
        ],
        "description": "Determines if a reference is located on the positive or negative side of a planar surface. The surface direction is the norm vector of the theoretical projection point."
    },
    "CALC_TRANSFORM_POINT": {
        "prefix": "CALC_TRANSFORM_POINT",
        "body": [
            "CALC_TRANSFORM_POINT $1"
        ],
        "description": "Calculates the transformation of a point."
    },
    "CALC_TRANSFORM_VECTOR": {
        "prefix": "CALC_TRANSFORM_VECTOR",
        "body": [
            "CALC_TRANSFORM_VECTOR $1"
        ],
        "description": "Calculates the transformation of a vector."
    },
    "CALC_TRANSFORMATION": {
        "prefix": "CALC_TRANSFORMATION",
        "body": [
            "CALC_TRANSFORMATION $1"
        ],
        "description": "Calculates the transformation between two models or coordinate systems."
    },
    "CALL": {
        "prefix": "CALL",
        "body": [
            "CALL $1"
        ],
        "description": "Executes another script file by specifying the file name. The script file execution starts in the assembly description block."
    },
    "CANCEL_INSERT_MODE": {
        "prefix": "CANCEL_INSERT_MODE",
        "body": [
            "CANCEL_INSERT_MODE $1"
        ],
        "description": "Cancels insert mode and resumes the suppressed features."
    },
    "CAPTION": {
        "prefix": "CAPTION",
        "body": [
            "CAPTION $1"
        ],
        "description": "Customizes the caption line of the user dialog."
    },
    "CHECK_COMMON_FEAT_PARAM": {
        "prefix": "CHECK_COMMON_FEAT_PARAM",
        "body": [
            "CHECK_COMMON_FEAT_PARAM $1"
        ],
        "description": "Checks if a parameter exists in an array of feature references. The parameter content can optionally be included in the comparison."
    },
    "CHECK_COMMON_MDL_PARAM": {
        "prefix": "CHECK_COMMON_MDL_PARAM",
        "body": [
            "CHECK_COMMON_MDL_PARAM $1"
        ],
        "description": "Checks if a parameter exists in an array of model references. The parameter content can optionally be included in the comparison."
    },
    "CHECK_EXTRUDE_OUTLINE": {
        "prefix": "CHECK_EXTRUDE_OUTLINE",
        "body": [
            "CHECK_EXTRUDE_OUTLINE $1"
        ],
        "description": "Inspects if the sketched contour of an extrude feature exceeds the geometry. This is typically used to test if an extruded cut is completely or partly outside the solid geometry."
    },
    "CHECKBOX_PARAM": {
        "prefix": "CHECKBOX_PARAM",
        "body": [
            "CHECKBOX_PARAM $1"
        ],
        "description": "Checkbox parameter in graphical user interface. A checkbox parameter provides an option to the user which can be selected or un-selected."
    },
    "CHECKIN_OBJECT": {
        "prefix": "CHECKIN_OBJECT",
        "body": [
            "CHECKIN_OBJECT $1"
        ],
        "description": "To check-in an object to PDMLink."
    },
    "CHECKIN_OBJECTS": {
        "prefix": "CHECKIN_OBJECTS",
        "body": [
            "CHECKIN_OBJECTS $1"
        ],
        "description": "To check-in an object to PDMLink."
    },
    "CHECKIN_WORKSPACE": {
        "prefix": "CHECKIN_WORKSPACE",
        "body": [
            "CHECKIN_WORKSPACE $1"
        ],
        "description": "To check-in the complete workspace in PDMLink. This allows to check-in also non Creo objects."
    },
    "CHECKOUT_OBJECT": {
        "prefix": "CHECKOUT_OBJECT",
        "body": [
            "CHECKOUT_OBJECT $1"
        ],
        "description": "To check an object from Intralink or check out / download it from PDMLink."
    },
    "CHECKOUT_OBJECTS": {
        "prefix": "CHECKOUT_OBJECTS",
        "body": [
            "CHECKOUT_OBJECTS $1"
        ],
        "description": "To check-out multiple objects from Intralink or check out / download them from PDMLink."
    },
    "CHOOSE_FILE": {
        "prefix": "CHOOSE_FILE",
        "body": [
            "CHOOSE_FILE $1"
        ],
        "description": "Executes file open dialog and lets the user select a file."
    },
    "CHOOSE_FILES": {
        "prefix": "CHOOSE_FILES",
        "body": [
            "CHOOSE_FILES $1"
        ],
        "description": "Executes file open dialog and lets the user select multiple files. The files are stored in the array in the order the user selected them."
    },
    "CHOOSE_PATH": {
        "prefix": "CHOOSE_PATH",
        "body": [
            "CHOOSE_PATH $1"
        ],
        "description": "Executes path open dialog and lets the user select a path."
    },
    "CLAER_GUI_CANCELLED": {
        "prefix": "CLAER_GUI_CANCELLED",
        "body": [
            "CLAER_GUI_CANCELLED $1"
        ],
        "description": "CLAER_GUI_CANCELLED"
    },
    "CLEAN_BOM_BALLOONS": {
        "prefix": "CLEAN_BOM_BALLOONS",
        "body": [
            "CLEAN_BOM_BALLOONS $1"
        ],
        "description": "Cleans up the position of BOM balloons for a drawing view. The command is available since Creo 2.0 M050 and above."
    },
    "CLEANUP_DRW_VIEW_DIMS": {
        "prefix": "CLEANUP_DRW_VIEW_DIMS",
        "body": [
            "CLEANUP_DRW_VIEW_DIMS $1"
        ],
        "description": "Cleans up dimensions of a specified drawing view. The function is supported for Creo 2.0 and above."
    },
    "CLEAR_ARRAY": {
        "prefix": "CLEAR_ARRAY",
        "body": [
            "CLEAR_ARRAY $1"
        ],
        "description": "Erases all elements from an ."
    },
    "CLEAR_CATCH_ERROR": {
        "prefix": "CLEAR_CATCH_ERROR",
        "body": [
            "CLEAR_CATCH_ERROR $1"
        ],
        "description": "Clears a flagged runtime error."
    },
    "CLEAR_GUI_CANCELLED": {
        "prefix": "CLEAR_GUI_CANCELLED",
        "body": [
            "CLEAR_GUI_CANCELLED $1"
        ],
        "description": "Clears a flagged cancellation of the graphical user interface"
    },
    "CLEAR_MAP": {
        "prefix": "CLEAR_MAP",
        "body": [
            "CLEAR_MAP $1"
        ],
        "description": "Erases all elements from a map."
    },
    "CLEAR_MESSAGE_AREA": {
        "prefix": "CLEAR_MESSAGE_AREA",
        "body": [
            "CLEAR_MESSAGE_AREA $1"
        ],
        "description": "CLEAR_MESSAGE_AREA"
    },
    "CLEAR_SELBUFFER": {
        "prefix": "CLEAR_SELBUFFER",
        "body": [
            "CLEAR_SELBUFFER $1"
        ],
        "description": "Removes all references from the selection buffer."
    },
    "CLEAR_WORKSPACE": {
        "prefix": "CLEAR_WORKSPACE",
        "body": [
            "CLEAR_WORKSPACE $1"
        ],
        "description": "Erases all models from the client side and from the server side active workspace."
    },
    "COMPARE_MDLS": {
        "prefix": "COMPARE_MDLS",
        "body": [
            "COMPARE_MDLS $1"
        ],
        "description": "Compares two models."
    },
    "COMPARE_REF_ORDER": {
        "prefix": "COMPARE_REF_ORDER",
        "body": [
            "COMPARE_REF_ORDER $1"
        ],
        "description": "Compares the order of two references in the model tree."
    },
    "CONCAT_TRANSFORMATION": {
        "prefix": "CONCAT_TRANSFORMATION",
        "body": [
            "CONCAT_TRANSFORMATION $1"
        ],
        "description": "Concatenates two transformations."
    },
    "CONFIG_ELEM": {
        "prefix": "CONFIG_ELEM",
        "body": [
            "CONFIG_ELEM $1"
        ],
        "description": "Starts graphical user interface and table processing. After the dialog box closes, the program continues with the next line."
    },
    "CONFIG_HTML": {
        "prefix": "CONFIG_HTML",
        "body": [
            "CONFIG_HTML $1"
        ],
        "description": "Starts the default browser with a prepared web page as an user interface implemented with JavaScript. SmartAssembly implements an internal HTTP server for this command."
    },
    "CONVERT_BODY_TO_SMT": {
        "prefix": "CONVERT_BODY_TO_SMT",
        "body": [
            "CONVERT_BODY_TO_SMT $1"
        ],
        "description": "CONVERT_BODY_TO_SMT"
    },
    "CONVERT_DRW_VIEW_DIM_TO_ORDINATE": {
        "prefix": "CONVERT_DRW_VIEW_DIM_TO_ORDINATE",
        "body": [
            "CONVERT_DRW_VIEW_DIM_TO_ORDINATE $1"
        ],
        "description": "Convert a drawing view dimension to a ordinate dimension."
    },
    "CONVERT_HOLE_DATA": {
        "prefix": "CONVERT_HOLE_DATA",
        "body": [
            "CONVERT_HOLE_DATA $1"
        ],
        "description": "Converts the data from an existing hole to another hole type. This command requires Pro/ENGINEER Wildfire 4 or above."
    },
    "CONVERT_LEGACY_ANNOTATION": {
        "prefix": "CONVERT_LEGACY_ANNOTATION",
        "body": [
            "CONVERT_LEGACY_ANNOTATION $1"
        ],
        "description": "Converts a legacy annotation. These annotations have been created prior to Creo 4.0. This function requires Creo Parametric 4.0."
    },
    "CONVERT_MATRIX_TO_TRANSFORMATION": {
        "prefix": "CONVERT_MATRIX_TO_TRANSFORMATION",
        "body": [
            "CONVERT_MATRIX_TO_TRANSFORMATION $1"
        ],
        "description": "Converts a matrix to a transformation by calculating its Euler Angles."
    },
    "CONVERT_TO_SMT": {
        "prefix": "CONVERT_TO_SMT",
        "body": [
            "CONVERT_TO_SMT $1"
        ],
        "description": "Converts a solid part to a sheetmetal part by specifying its driving surface and thickness."
    },
    "CONVERT_TRANSFORMATION_TO_MATRIX": {
        "prefix": "CONVERT_TRANSFORMATION_TO_MATRIX",
        "body": [
            "CONVERT_TRANSFORMATION_TO_MATRIX $1"
        ],
        "description": "Converts a transformation to a matrix."
    },
    "COPY_COMPONENT": {
        "prefix": "COPY_COMPONENT",
        "body": [
            "COPY_COMPONENT $1"
        ],
        "description": "Executes the copy functionality of a former created component."
    },
    "COPY_FILE": {
        "prefix": "COPY_FILE",
        "body": [
            "COPY_FILE $1"
        ],
        "description": "Copies a file from one location to another in the file system."
    },
    "COPY_FILE_FROM_WS": {
        "prefix": "COPY_FILE_FROM_WS",
        "body": [
            "COPY_FILE_FROM_WS $1"
        ],
        "description": "Copies a file from the current workspace to local hard disk for Intralink 8.0 (and above) / PDMLink."
    },
    "COPY_FILE_TO_WS": {
        "prefix": "COPY_FILE_TO_WS",
        "body": [
            "COPY_FILE_TO_WS $1"
        ],
        "description": "Copies a file from the local hard disk to the current workspace for Intralink 8.0 (and above) / PDMLink."
    },
    "COPY_LAYERS_FROM_MDL": {
        "prefix": "COPY_LAYERS_FROM_MDL",
        "body": [
            "COPY_LAYERS_FROM_MDL $1"
        ],
        "description": "Copies layers form another model. This command also works for rule based layers."
    },
    "COPY_MDL": {
        "prefix": "COPY_MDL",
        "body": [
            "COPY_MDL $1"
        ],
        "description": "Creates a copy of an existing Creo Elements/Pro model."
    },
    "COPY_REF": {
        "prefix": "COPY_REF",
        "body": [
            "COPY_REF $1"
        ],
        "description": "Copies content from one existing reference to a new reference name."
    },
    "CRASH": {
        "prefix": "CRASH",
        "body": [
            "CRASH $1"
        ],
        "description": "Crashes the current SmartAssembly session and Creo Elements/Pro. Note this command makes only sense for stability tests of the SmartDesignServer and should not be used for productive code."
    },
    "CREATE_ANNOTATION": {
        "prefix": "CREATE_ANNOTATION",
        "body": [
            "CREATE_ANNOTATION $1"
        ],
        "description": "Creates an empty annotation feature."
    },
    "CREATE_ANNOTATION_PLANE": {
        "prefix": "CREATE_ANNOTATION_PLANE",
        "body": [
            "CREATE_ANNOTATION_PLANE $1"
        ],
        "description": "Creates an annotation plane based on model orientation or a plane reference."
    },
    "CREATE_BODY": {
        "prefix": "CREATE_BODY",
        "body": [
            "CREATE_BODY $1"
        ],
        "description": "CREATE_BODY"
    },
    "CREATE_BOM_BALLOONS": {
        "prefix": "CREATE_BOM_BALLOONS",
        "body": [
            "CREATE_BOM_BALLOONS $1"
        ],
        "description": "Creates BOM balloons for a repeat region. The command is available since Creo 2.0 M050 and above."
    },
    "CREATE_COMB_VIEW": {
        "prefix": "CREATE_COMB_VIEW",
        "body": [
            "CREATE_COMB_VIEW $1"
        ],
        "description": "Creates a new combined view. This command requires Creo Parametric 1.0 or above."
    },
    "CREATE_COPY_GEOMETRY": {
        "prefix": "CREATE_COPY_GEOMETRY",
        "body": [
            "CREATE_COPY_GEOMETRY $1"
        ],
        "description": "Creates a copy geometry feature. This command requires Creo Elements/Pro Wildfire 4 or above and the AAX module."
    },
    "CREATE_DIM_ANNOTATION": {
        "prefix": "CREATE_DIM_ANNOTATION",
        "body": [
            "CREATE_DIM_ANNOTATION $1"
        ],
        "description": "Creates an annotation dimension."
    },
    "CREATE_DIRECTORY": {
        "prefix": "CREATE_DIRECTORY",
        "body": [
            "CREATE_DIRECTORY $1"
        ],
        "description": "Creates a directory in the file system."
    },
    "CREATE_DRW": {
        "prefix": "CREATE_DRW",
        "body": [
            "CREATE_DRW $1"
        ],
        "description": "Creates a new drawing from a drawing template"
    },
    "CREATE_DRW_NOTE": {
        "prefix": "CREATE_DRW_NOTE",
        "body": [
            "CREATE_DRW_NOTE $1"
        ],
        "description": "Creates a drawing note."
    },
    "CREATE_DRW_NOTE_EX": {
        "prefix": "CREATE_DRW_NOTE_EX",
        "body": [
            "CREATE_DRW_NOTE_EX $1"
        ],
        "description": "Creates a note on a drawing."
    },
    "CREATE_DRW_TABLE": {
        "prefix": "CREATE_DRW_TABLE",
        "body": [
            "CREATE_DRW_TABLE $1"
        ],
        "description": "Creates a new drawing table based on a table template."
    },
    "CREATE_DRW_VIEW_DETAIL": {
        "prefix": "CREATE_DRW_VIEW_DETAIL",
        "body": [
            "CREATE_DRW_VIEW_DETAIL $1"
        ],
        "description": "Creates a detailed drawing view regarding an existing one with a specified outline curve. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "CREATE_DRW_VIEW_DETAIL_CIRCLE": {
        "prefix": "CREATE_DRW_VIEW_DETAIL_CIRCLE",
        "body": [
            "CREATE_DRW_VIEW_DETAIL_CIRCLE $1"
        ],
        "description": "Creates a detailed drawing view regarding an existing one with a circular outline. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "CREATE_DRW_VIEW_DIM": {
        "prefix": "CREATE_DRW_VIEW_DIM",
        "body": [
            "CREATE_DRW_VIEW_DIM $1"
        ],
        "description": "Creates a drawing dimension in a drawing view according to specified model references and placement position."
    },
    "CREATE_DRW_VIEW_DIM_ORDINATE_BASELINE": {
        "prefix": "CREATE_DRW_VIEW_DIM_ORDINATE_BASELINE",
        "body": [
            "CREATE_DRW_VIEW_DIM_ORDINATE_BASELINE $1"
        ],
        "description": "Creates a drawing ordinate dimension baseline."
    },
    "CREATE_DRW_VIEW_GENERAL": {
        "prefix": "CREATE_DRW_VIEW_GENERAL",
        "body": [
            "CREATE_DRW_VIEW_GENERAL $1"
        ],
        "description": "Creates a general drawing view. The orientation is specified by the a model view."
    },
    "CREATE_DRW_VIEW_NOTE": {
        "prefix": "CREATE_DRW_VIEW_NOTE",
        "body": [
            "CREATE_DRW_VIEW_NOTE $1"
        ],
        "description": "Creates a drawing note for a specified view. An leader point could be specified for this."
    },
    "CREATE_DRW_VIEW_PROJECTION": {
        "prefix": "CREATE_DRW_VIEW_PROJECTION",
        "body": [
            "CREATE_DRW_VIEW_PROJECTION $1"
        ],
        "description": "Creates a projected drawing view regarding an existing one."
    },
    "CREATE_DRW_VIEW_SECTION": {
        "prefix": "CREATE_DRW_VIEW_SECTION",
        "body": [
            "CREATE_DRW_VIEW_SECTION $1"
        ],
        "description": "Creates a cross section in a drawing view base on a solid model section. The command requires Wildfire 5.0 and above. Before Creo 2.0 M230 / Creo 3.0 M090 the cross section is shown with area model edge visibility. Afterwards it shows as total model edge visibility."
    },
    "CREATE_EXPLODE_STATE": {
        "prefix": "CREATE_EXPLODE_STATE",
        "body": [
            "CREATE_EXPLODE_STATE $1"
        ],
        "description": "Creates an explode state in an assembly. This command requires Creo Parametric 2.0 or above."
    },
    "CREATE_FEAT_PARAM": {
        "prefix": "CREATE_FEAT_PARAM",
        "body": [
            "CREATE_FEAT_PARAM $1"
        ],
        "description": "Creates a Creo Elements/Pro feature or component parameter. In case of a double parameter, the unit can be specified."
    },
    "CREATE_FIELD_POINT": {
        "prefix": "CREATE_FIELD_POINT",
        "body": [
            "CREATE_FIELD_POINT $1"
        ],
        "description": "Creates a field point."
    },
    "CREATE_GENERAL_CSYS": {
        "prefix": "CREATE_GENERAL_CSYS",
        "body": [
            "CREATE_GENERAL_CSYS $1"
        ],
        "description": "CREATE_GENERAL_CSYS"
    },
    "CREATE_GENERAL_PATTERN": {
        "prefix": "CREATE_GENERAL_PATTERN",
        "body": [
            "CREATE_GENERAL_PATTERN $1"
        ],
        "description": "CREATE_GENERAL_PATTERN"
    },
    "CREATE_GENERAL_POINT": {
        "prefix": "CREATE_GENERAL_POINT",
        "body": [
            "CREATE_GENERAL_POINT $1"
        ],
        "description": "Creates a general point datum feature which can contain different points."
    },
    "CREATE_GTOL": {
        "prefix": "CREATE_GTOL",
        "body": [
            "CREATE_GTOL $1"
        ],
        "description": "Creates a geometric tolerance in solids or drawings. This command requires Pro/ENGINEER Wildfire 5 or above."
    },
    "CREATE_GTOL_CREO4": {
        "prefix": "CREATE_GTOL_CREO4",
        "body": [
            "CREATE_GTOL_CREO4 $1"
        ],
        "description": "Creates a geometric tolerance in solids or drawings with the new functionality in Creo 4.0 and above. This command requires Creo 4.0 or above."
    },
    "CREATE_HOLE": {
        "prefix": "CREATE_HOLE",
        "body": [
            "CREATE_HOLE $1"
        ],
        "description": "Creates a hole feature. This command requires Pro/ENGINEER Wildfire 4 or above."
    },
    "CREATE_IDENTIFIER": {
        "prefix": "CREATE_IDENTIFIER",
        "body": [
            "CREATE_IDENTIFIER $1"
        ],
        "description": "Creates a new component engine identifier and stores the result in a variable."
    },
    "CREATE_INHERITANCE": {
        "prefix": "CREATE_INHERITANCE",
        "body": [
            "CREATE_INHERITANCE $1"
        ],
        "description": "Creates an inheritance feature based on references to target and source part."
    },
    "CREATE_JOINT": {
        "prefix": "CREATE_JOINT",
        "body": [
            "CREATE_JOINT $1"
        ],
        "description": "Creates a joint condition for an offset coordinate system which is driven by 3 length and 3 angle dimensions and refers to a parent coordinate system. The dimensions of this coordinate system are always updated to match another coordinate system."
    },
    "CREATE_LAYER": {
        "prefix": "CREATE_LAYER",
        "body": [
            "CREATE_LAYER $1"
        ],
        "description": "Creates a new layer in a model."
    },
    "CREATE_LAYER_STATE": {
        "prefix": "CREATE_LAYER_STATE",
        "body": [
            "CREATE_LAYER_STATE $1"
        ],
        "description": "Creates a layer state in a solid model. This command requires Creo Parametric 2.0 or above."
    },
    "CREATE_MDL_PARAM": {
        "prefix": "CREATE_MDL_PARAM",
        "body": [
            "CREATE_MDL_PARAM $1"
        ],
        "description": "Creates a model parameter. In case of a double parameter, the unit can be specified."
    },
    "CREATE_NOTE": {
        "prefix": "CREATE_NOTE",
        "body": [
            "CREATE_NOTE $1"
        ],
        "description": "Creates a text note with leader to a model or feature. As attachment item a point reference is required."
    },
    "CREATE_NOTE_EX": {
        "prefix": "CREATE_NOTE_EX",
        "body": [
            "CREATE_NOTE_EX $1"
        ],
        "description": "Creates a note in a solid model."
    },
    "CREATE_ORIENTATION": {
        "prefix": "CREATE_ORIENTATION",
        "body": [
            "CREATE_ORIENTATION $1"
        ],
        "description": "Creates orientation of parts and assemblies and saves it as a view."
    },
    "CREATE_ORIENTATION_MATRIX": {
        "prefix": "CREATE_ORIENTATION_MATRIX",
        "body": [
            "CREATE_ORIENTATION_MATRIX $1"
        ],
        "description": "Creates orientation by matrix and saves it as a view."
    },
    "CREATE_POINTS": {
        "prefix": "CREATE_POINTS",
        "body": [
            "CREATE_POINTS $1"
        ],
        "description": "Creates a datum point offset coordinate system feature with several points inside."
    },
    "CREATE_POINTS_EX": {
        "prefix": "CREATE_POINTS_EX",
        "body": [
            "CREATE_POINTS_EX $1"
        ],
        "description": "Creates a datum point offset coordinate system feature with several points inside."
    },
    "CREATE_PUBLISHED_GEOMETRY": {
        "prefix": "CREATE_PUBLISHED_GEOMETRY",
        "body": [
            "CREATE_PUBLISHED_GEOMETRY $1"
        ],
        "description": "Creates a published geometry feature. This command requires Creo Elements/Pro Wildfire 4 or above and the AAX module."
    },
    "CREATE_REF_PATTERN": {
        "prefix": "CREATE_REF_PATTERN",
        "body": [
            "CREATE_REF_PATTERN $1"
        ],
        "description": "Creates reference patterns of features and components."
    },
    "CREATE_SHRINKWRAP": {
        "prefix": "CREATE_SHRINKWRAP",
        "body": [
            "CREATE_SHRINKWRAP $1"
        ],
        "description": "Creates a shrink wrap feature. This command requires Creo Elements/Pro Wildfire 4 or above and the AAX module."
    },
    "CREATE_SIMPREP": {
        "prefix": "CREATE_SIMPREP",
        "body": [
            "CREATE_SIMPREP $1"
        ],
        "description": "Creates a new simplified representation of a model. This works for parts and assemblies."
    },
    "CREATE_SMT_FLAT_PATTERN": {
        "prefix": "CREATE_SMT_FLAT_PATTERN",
        "body": [
            "CREATE_SMT_FLAT_PATTERN $1"
        ],
        "description": "CREATE_SMT_FLAT_PATTERN"
    },
    "CREATE_SURFFINISH": {
        "prefix": "CREATE_SURFFINISH",
        "body": [
            "CREATE_SURFFINISH $1"
        ],
        "description": "Creates a surface finish in a solid model."
    },
    "CREATE_UDF_EX": {
        "prefix": "CREATE_UDF_EX",
        "body": [
            "CREATE_UDF_EX $1"
        ],
        "description": "CREATE_UDF_EX"
    },
    "CREATE_UNIQUE_STRING": {
        "prefix": "CREATE_UNIQUE_STRING",
        "body": [
            "CREATE_UNIQUE_STRING $1"
        ],
        "description": "Creates a globally unique string with 32 characters from the operating system. "
    },
    "CREATE_UNIT_SYSTEM": {
        "prefix": "CREATE_UNIT_SYSTEM",
        "body": [
            "CREATE_UNIT_SYSTEM $1"
        ],
        "description": "Creates a new unit system in a model"
    },
    "CREATE_WORKSPACE": {
        "prefix": "CREATE_WORKSPACE",
        "body": [
            "CREATE_WORKSPACE $1"
        ],
        "description": "Creates a workspace for the active PDMLink server."
    },
    "CREATE_XSEC": {
        "prefix": "CREATE_XSEC",
        "body": [
            "CREATE_XSEC $1"
        ],
        "description": "Creates a planar cross section based on a reference to a datum plane."
    },
    "CREATE_XSEC_EX": {
        "prefix": "CREATE_XSEC_EX",
        "body": [
            "CREATE_XSEC_EX $1"
        ],
        "description": "Creates a planar cross section based on a reference to a datum plane, coordinate system or coordinate system axis and define the intersected models. This command is only available for Creo 2.0 and above."
    },
    "DDM_CHECKOUT_OBJECT": {
        "prefix": "DDM_CHECKOUT_OBJECT",
        "body": [
            "DDM_CHECKOUT_OBJECT $1"
        ],
        "description": "Checks out an object from the PDM system DDM."
    },
    "DEACTIVATE_SERVER": {
        "prefix": "DEACTIVATE_SERVER",
        "body": [
            "DEACTIVATE_SERVER $1"
        ],
        "description": "Deactivates the current PDMLink server connection."
    },
    "DEACTIVATE_XSEC": {
        "prefix": "DEACTIVATE_XSEC",
        "body": [
            "DEACTIVATE_XSEC $1"
        ],
        "description": "Deactivates the cross sections of the current model."
    },
    "DECLARE_ARRAY": {
        "prefix": "DECLARE_ARRAY",
        "body": [
            "DECLARE_ARRAY $1"
        ],
        "description": "Declares an variable for storing variables."
    },
    "DECLARE_MAP": {
        "prefix": "DECLARE_MAP",
        "body": [
            "DECLARE_MAP $1"
        ],
        "description": "Declares a variable for storing variables by a key name."
    },
    "DECLARE_MDL_NOTEBOOK": {
        "prefix": "DECLARE_MDL_NOTEBOOK",
        "body": [
            "DECLARE_MDL_NOTEBOOK $1"
        ],
        "description": "Declares a solid model to a notebook."
    },
    "DECLARE_REFERENCE": {
        "prefix": "DECLARE_REFERENCE",
        "body": [
            "DECLARE_REFERENCE $1"
        ],
        "description": "Declaration of a new reference variable. A standard value could be specified."
    },
    "DECLARE_STOPWATCH": {
        "prefix": "DECLARE_STOPWATCH",
        "body": [
            "DECLARE_STOPWATCH $1"
        ],
        "description": "Declares a stopwatch variable for measuring elapsed time."
    },
    "DECLARE_STRUCT": {
        "prefix": "DECLARE_STRUCT",
        "body": [
            "DECLARE_STRUCT $1"
        ],
        "description": "Declaration of a new structure variable."
    },
    "DECLARE_VARIABLE": {
        "prefix": "DECLARE_VARIABLE",
        "body": [
            "DECLARE_VARIABLE $1"
        ],
        "description": "Declaration of a new variable. A standard value could be specified."
    },
    "DELETE_ANNOTATION_ELEMENTS": {
        "prefix": "DELETE_ANNOTATION_ELEMENTS",
        "body": [
            "DELETE_ANNOTATION_ELEMENTS $1"
        ],
        "description": "Delete all elements from an annotation feature."
    },
    "DELETE_ARRAY_ELEM": {
        "prefix": "DELETE_ARRAY_ELEM",
        "body": [
            "DELETE_ARRAY_ELEM $1"
        ],
        "description": "Deletes an element from the array specified by the index number."
    },
    "DELETE_BODY": {
        "prefix": "DELETE_BODY",
        "body": [
            "DELETE_BODY $1"
        ],
        "description": "DELETE_BODY"
    },
    "DELETE_COMB_VIEW": {
        "prefix": "DELETE_COMB_VIEW",
        "body": [
            "DELETE_COMB_VIEW $1"
        ],
        "description": "Deletes an existing combined view of a model. This command requires Creo Parametric 1.0 or above."
    },
    "DELETE_COMPONENT": {
        "prefix": "DELETE_COMPONENT",
        "body": [
            "DELETE_COMPONENT $1"
        ],
        "description": "Executes the delete functionality of a former created component."
    },
    "DELETE_DIM_ANNOTATION": {
        "prefix": "DELETE_DIM_ANNOTATION",
        "body": [
            "DELETE_DIM_ANNOTATION $1"
        ],
        "description": "Deletes an existing annotation dimension."
    },
    "DELETE_DRW_MDL": {
        "prefix": "DELETE_DRW_MDL",
        "body": [
            "DELETE_DRW_MDL $1"
        ],
        "description": "Deletes a model from a drawing."
    },
    "DELETE_DRW_MDL_SIMPREP": {
        "prefix": "DELETE_DRW_MDL_SIMPREP",
        "body": [
            "DELETE_DRW_MDL_SIMPREP $1"
        ],
        "description": "Deletes a simplified representation from a drawing. This commend work identical to in the drawing mode."
    },
    "DELETE_DRW_NOTE": {
        "prefix": "DELETE_DRW_NOTE",
        "body": [
            "DELETE_DRW_NOTE $1"
        ],
        "description": "Deletes a drawing note."
    },
    "DELETE_DRW_SYMBOL": {
        "prefix": "DELETE_DRW_SYMBOL",
        "body": [
            "DELETE_DRW_SYMBOL $1"
        ],
        "description": "Deletes a drawing symbol."
    },
    "DELETE_DRW_VIEW": {
        "prefix": "DELETE_DRW_VIEW",
        "body": [
            "DELETE_DRW_VIEW $1"
        ],
        "description": "Delete a view from a drawing."
    },
    "DELETE_DRW_VIEW_DIM": {
        "prefix": "DELETE_DRW_VIEW_DIM",
        "body": [
            "DELETE_DRW_VIEW_DIM $1"
        ],
        "description": "Deletes a drawing dimension which was created or shown on the drawing."
    },
    "DELETE_EXTERNAL_DATA": {
        "prefix": "DELETE_EXTERNAL_DATA",
        "body": [
            "DELETE_EXTERNAL_DATA $1"
        ],
        "description": "Deletes external data by keyword from a model."
    },
    "DELETE_FAMINSTANCE": {
        "prefix": "DELETE_FAMINSTANCE",
        "body": [
            "DELETE_FAMINSTANCE $1"
        ],
        "description": "Deletes an existing instances from a family table."
    },
    "DELETE_FAMITEM": {
        "prefix": "DELETE_FAMITEM",
        "body": [
            "DELETE_FAMITEM $1"
        ],
        "description": "Deletes family table item from a family table of the specified generic."
    },
    "DELETE_FAMTABLE": {
        "prefix": "DELETE_FAMTABLE",
        "body": [
            "DELETE_FAMTABLE $1"
        ],
        "description": "Deletes a complete family table of a generic model."
    },
    "DELETE_FEAT_PARAM": {
        "prefix": "DELETE_FEAT_PARAM",
        "body": [
            "DELETE_FEAT_PARAM $1"
        ],
        "description": "Deletes an existing Creo Elements/Pro feature or component parameter."
    },
    "DELETE_FILE": {
        "prefix": "DELETE_FILE",
        "body": [
            "DELETE_FILE $1"
        ],
        "description": "Deletes a file from the file system."
    },
    "DELETE_GTOL": {
        "prefix": "DELETE_GTOL",
        "body": [
            "DELETE_GTOL $1"
        ],
        "description": "Deletes a geometric tolerance from a solids or a drawing. This command requires Pro/ENGINEER Wildfire 5 or above."
    },
    "DELETE_MAP_ELEM": {
        "prefix": "DELETE_MAP_ELEM",
        "body": [
            "DELETE_MAP_ELEM $1"
        ],
        "description": "Deletes an element from the specified by its name."
    },
    "DELETE_MATERIAL": {
        "prefix": "DELETE_MATERIAL",
        "body": [
            "DELETE_MATERIAL $1"
        ],
        "description": "Deletes the currently assigned or the specified materials from a model."
    },
    "DELETE_MDL_PARAM": {
        "prefix": "DELETE_MDL_PARAM",
        "body": [
            "DELETE_MDL_PARAM $1"
        ],
        "description": "Deletes an existing model parameter."
    },
    "DELETE_NOTE": {
        "prefix": "DELETE_NOTE",
        "body": [
            "DELETE_NOTE $1"
        ],
        "description": "Deletes a note."
    },
    "DELETE_ORIENTATION": {
        "prefix": "DELETE_ORIENTATION",
        "body": [
            "DELETE_ORIENTATION $1"
        ],
        "description": "Deletes one or many orientations from a solid model. This command is available since Creo 3.0 M140 / Creo 4.0 M020 and above."
    },
    "DELETE_PRO_PROGRAM_INPUT": {
        "prefix": "DELETE_PRO_PROGRAM_INPUT",
        "body": [
            "DELETE_PRO_PROGRAM_INPUT $1"
        ],
        "description": "Delete the complete input section information of Pro/PROGRAM from a model."
    },
    "DELETE_REF_PARAM": {
        "prefix": "DELETE_REF_PARAM",
        "body": [
            "DELETE_REF_PARAM $1"
        ],
        "description": "Deletes an existing reference parameter. This can be used to delete parameters from annotation elements, surfaces, quilts, edges, curves and composite curves."
    },
    "DELETE_SYMBOL": {
        "prefix": "DELETE_SYMBOL",
        "body": [
            "DELETE_SYMBOL $1"
        ],
        "description": "Deletes a symbol."
    },
    "DELETE_WORKSPACE": {
        "prefix": "DELETE_WORKSPACE",
        "body": [
            "DELETE_WORKSPACE $1"
        ],
        "description": "Delete a workspace for the active PDMLink server."
    },
    "DELETE_XSEC": {
        "prefix": "DELETE_XSEC",
        "body": [
            "DELETE_XSEC $1"
        ],
        "description": "Deletes cross sections from a solid model. This command is only available for Creo 2.0 and above."
    },
    "DESIGNATE_ATTRIBUTE": {
        "prefix": "DESIGNATE_ATTRIBUTE",
        "body": [
            "DESIGNATE_ATTRIBUTE $1"
        ],
        "description": "Designates a dimension, geometric tolerance surface or surface finish symbol."
    },
    "DESIGNATE_FEAT_PARAM": {
        "prefix": "DESIGNATE_FEAT_PARAM",
        "body": [
            "DESIGNATE_FEAT_PARAM $1"
        ],
        "description": "Designates feature or component feature parameters."
    },
    "DESIGNATE_MDL_PARAM": {
        "prefix": "DESIGNATE_MDL_PARAM",
        "body": [
            "DESIGNATE_MDL_PARAM $1"
        ],
        "description": "Designates model parameters."
    },
    "DISP_LIST_ADD_LINE": {
        "prefix": "DISP_LIST_ADD_LINE",
        "body": [
            "DISP_LIST_ADD_LINE $1"
        ],
        "description": "Adds a new line to the display list for a specific model. Display lists are not stored to the model. When the model is opened in another window the display list will not show up."
    },
    "DISP_LIST_CLEAR": {
        "prefix": "DISP_LIST_CLEAR",
        "body": [
            "DISP_LIST_CLEAR $1"
        ],
        "description": "Clears the display list."
    },
    "DISP_LIST_UPDATE": {
        "prefix": "DISP_LIST_UPDATE",
        "body": [
            "DISP_LIST_UPDATE $1"
        ],
        "description": "Updates the display list of a model."
    },
    "DISPLAY_ANNOTATIONS": {
        "prefix": "DISPLAY_ANNOTATIONS",
        "body": [
            "DISPLAY_ANNOTATIONS $1"
        ],
        "description": "Toggles the display of annotations on or off."
    },
    "DISPLAY_COMB_VIEWS": {
        "prefix": "DISPLAY_COMB_VIEWS",
        "body": [
            "DISPLAY_COMB_VIEWS $1"
        ],
        "description": "Toggles the display of combined views on or off."
    },
    "DISPLAY_DATUM": {
        "prefix": "DISPLAY_DATUM",
        "body": [
            "DISPLAY_DATUM $1"
        ],
        "description": "Toggles the display of datum planes, coordinate systems, axes, points and their tags on or off."
    },
    "DISPLAY_XSEC": {
        "prefix": "DISPLAY_XSEC",
        "body": [
            "DISPLAY_XSEC $1"
        ],
        "description": "Sets the visibility status of a cross section of the current model."
    },
    "DRAG_COMP_POS": {
        "prefix": "DRAG_COMP_POS",
        "body": [
            "DRAG_COMP_POS $1"
        ],
        "description": "Allows to place a component dynamically. Click to left mouse button to drop it."
    },
    "ENABLE_CONT_REF_CHECKING_MODE": {
        "prefix": "ENABLE_CONT_REF_CHECKING_MODE",
        "body": [
            "ENABLE_CONT_REF_CHECKING_MODE $1"
        ],
        "description": "Determines if a continuous checking for the validity of all references should take place after each traversed line of the program file. Especially if many models are in session, this could have effect on the performance. The default setting is determined by the configuration option ."
    },
    "ENABLE_DATA_CAPTURE_MODE": {
        "prefix": "ENABLE_DATA_CAPTURE_MODE",
        "body": [
            "ENABLE_DATA_CAPTURE_MODE $1"
        ],
        "description": "Determines if Creo Elements/Pro parameters for modification should be created or not. By default these parameters are created. In case of disabling this mode, modification and access to existing components is disabled. In return processing time is faster."
    },
    "ENABLE_ERROR_LOG": {
        "prefix": "ENABLE_ERROR_LOG",
        "body": [
            "ENABLE_ERROR_LOG $1"
        ],
        "description": "ENABLE_ERROR_LOG"
    },
    "ENABLE_LOG_MESSAGE": {
        "prefix": "ENABLE_LOG_MESSAGE",
        "body": [
            "ENABLE_LOG_MESSAGE $1"
        ],
        "description": "Enables or disables the message logging mode."
    },
    "ENABLE_PRINT_MESSAGE": {
        "prefix": "ENABLE_PRINT_MESSAGE",
        "body": [
            "ENABLE_PRINT_MESSAGE $1"
        ],
        "description": "Enables or disables the output of the command."
    },
    "ENABLE_RESOLVE_MODE": {
        "prefix": "ENABLE_RESOLVE_MODE",
        "body": [
            "ENABLE_RESOLVE_MODE $1"
        ],
        "description": "Determines if Creo should show up the resolved mode (panic window) in case of regeneration problems. This command overwrites the option for the execution of the tab file."
    },
    "ENABLE_RESTORE_SIMPREPS": {
        "prefix": "ENABLE_RESTORE_SIMPREPS",
        "body": [
            "ENABLE_RESTORE_SIMPREPS $1"
        ],
        "description": "Determines if after each processed code line the simplified representations of the solid models in session should be restored. This is useful especially when switching to drawing with simplified representations. The default setting is determined by the configuration option RESTORE_SIMPREPS."
    },
    "ENABLE_SAVE_DRAWINGS": {
        "prefix": "ENABLE_SAVE_DRAWINGS",
        "body": [
            "ENABLE_SAVE_DRAWINGS $1"
        ],
        "description": "Determines if drawings should be saved after the execution of a tab file. This command overwrites the option for the execution of the tab file."
    },
    "ERASE_ALL_POST": {
        "prefix": "ERASE_ALL_POST",
        "body": [
            "ERASE_ALL_POST $1"
        ],
        "description": "Erases all the models after the tab file was processed."
    },
    "ERASE_DRW_ANNOTATION": {
        "prefix": "ERASE_DRW_ANNOTATION",
        "body": [
            "ERASE_DRW_ANNOTATION $1"
        ],
        "description": "Erases a drawing annotation."
    },
    "ERASE_DRW_DIM_WITNESS_LINE": {
        "prefix": "ERASE_DRW_DIM_WITNESS_LINE",
        "body": [
            "ERASE_DRW_DIM_WITNESS_LINE $1"
        ],
        "description": "Erases the witness line of a drawing dimension on the specified end. This function requires Creo 2.0 M160 / Creo 3.0 M040 or above."
    },
    "ERASE_DRW_NOTE": {
        "prefix": "ERASE_DRW_NOTE",
        "body": [
            "ERASE_DRW_NOTE $1"
        ],
        "description": "Erases a drawing note."
    },
    "ERASE_FAMINSTANCES": {
        "prefix": "ERASE_FAMINSTANCES",
        "body": [
            "ERASE_FAMINSTANCES $1"
        ],
        "description": "Erases all family instances from a generic model in Creo Elements/Pro."
    },
    "ERASE_MDL": {
        "prefix": "ERASE_MDL",
        "body": [
            "ERASE_MDL $1"
        ],
        "description": "Erases a model from Creo Elements/Pro."
    },
    "ERASE_NOT_DISPLAYED": {
        "prefix": "ERASE_NOT_DISPLAYED",
        "body": [
            "ERASE_NOT_DISPLAYED $1"
        ],
        "description": "Erases models which are not displayed from Creo Parametric by using a mapkey. Same functionality as the Creo Parametric menu sequence: ."
    },
    "ERASE_NOT_DISPLAYED_EX": {
        "prefix": "ERASE_NOT_DISPLAYED_EX",
        "body": [
            "ERASE_NOT_DISPLAYED_EX $1"
        ],
        "description": "Erases models which are not displayed from Creo Parametric by a Creo/TOOLKIT command. This has slightly other side effects than which works by using a mapkey."
    },
    "EXCEL_ACTIVATE_DOCUMENT": {
        "prefix": "EXCEL_ACTIVATE_DOCUMENT",
        "body": [
            "EXCEL_ACTIVATE_DOCUMENT $1"
        ],
        "description": "Activates a specific document in excel. The document must already be loaded. This functionality is used to switch between different documents for reading and writing."
    },
    "EXCEL_ACTIVATE_SHEET": {
        "prefix": "EXCEL_ACTIVATE_SHEET",
        "body": [
            "EXCEL_ACTIVATE_SHEET $1"
        ],
        "description": "Activates a specific data sheet of the active document in Excel."
    },
    "EXCEL_CLEAR_BUFFER": {
        "prefix": "EXCEL_CLEAR_BUFFER",
        "body": [
            "EXCEL_CLEAR_BUFFER $1"
        ],
        "description": "Clears the data of the Excel read/write buffer."
    },
    "EXCEL_CLEAR_CONTENT": {
        "prefix": "EXCEL_CLEAR_CONTENT",
        "body": [
            "EXCEL_CLEAR_CONTENT $1"
        ],
        "description": "Clears the content of one Excel cell or of a range of cells"
    },
    "EXCEL_CLOSE_DOCUMENT": {
        "prefix": "EXCEL_CLOSE_DOCUMENT",
        "body": [
            "EXCEL_CLOSE_DOCUMENT $1"
        ],
        "description": "Closes the active document in Excel."
    },
    "EXCEL_CONNECT": {
        "prefix": "EXCEL_CONNECT",
        "body": [
            "EXCEL_CONNECT $1"
        ],
        "description": "Establishes a connection to Microsoft Excel. In case Excel is not already running, it will be launched. Otherwise a connection to the already running Excel program is established."
    },
    "EXCEL_CREATE_SHEET": {
        "prefix": "EXCEL_CREATE_SHEET",
        "body": [
            "EXCEL_CREATE_SHEET $1"
        ],
        "description": "Creates a new sheet in the active document in Excel. In case the sheet already exists, it activates the existing sheet."
    },
    "EXCEL_DISCONNECT": {
        "prefix": "EXCEL_DISCONNECT",
        "body": [
            "EXCEL_DISCONNECT $1"
        ],
        "description": "Terminates a connection to Microsoft Excel."
    },
    "EXCEL_DISPLAY_ALERTS": {
        "prefix": "EXCEL_DISPLAY_ALERTS",
        "body": [
            "EXCEL_DISPLAY_ALERTS $1"
        ],
        "description": "Enables or disables Excel alerts. By default the alters are disabled."
    },
    "EXCEL_ENABLE_MACROS": {
        "prefix": "EXCEL_ENABLE_MACROS",
        "body": [
            "EXCEL_ENABLE_MACROS $1"
        ],
        "description": "Enables or disables Excel alerts. By default the alters are disabled."
    },
    "EXCEL_GET_ACTIVE_RANGE": {
        "prefix": "EXCEL_GET_ACTIVE_RANGE",
        "body": [
            "EXCEL_GET_ACTIVE_RANGE $1"
        ],
        "description": "Determines the active range of a document. This is the smallest block which contains all cells with a value in the active sheet."
    },
    "EXCEL_GET_ACTIVE_SHEET": {
        "prefix": "EXCEL_GET_ACTIVE_SHEET",
        "body": [
            "EXCEL_GET_ACTIVE_SHEET $1"
        ],
        "description": "Determines the index of the active sheet of the active document in Excel."
    },
    "EXCEL_GET_CELL_BY_NAME": {
        "prefix": "EXCEL_GET_CELL_BY_NAME",
        "body": [
            "EXCEL_GET_CELL_BY_NAME $1"
        ],
        "description": "Retrieves the row and column index based on the cell name."
    },
    "EXCEL_GET_DOCUMENT_NAME": {
        "prefix": "EXCEL_GET_DOCUMENT_NAME",
        "body": [
            "EXCEL_GET_DOCUMENT_NAME $1"
        ],
        "description": "Retrieves the name of the active excel document."
    },
    "EXCEL_GET_DOCUMENT_READONLY": {
        "prefix": "EXCEL_GET_DOCUMENT_READONLY",
        "body": [
            "EXCEL_GET_DOCUMENT_READONLY $1"
        ],
        "description": "Retrieves the information if the document is opened read-only."
    },
    "EXCEL_GET_FILE_EXTENSION": {
        "prefix": "EXCEL_GET_FILE_EXTENSION",
        "body": [
            "EXCEL_GET_FILE_EXTENSION $1"
        ],
        "description": "Evaluates if the currently connected Microsoft Excel is using as file extension."
    },
    "EXCEL_GET_SELECTION": {
        "prefix": "EXCEL_GET_SELECTION",
        "body": [
            "EXCEL_GET_SELECTION $1"
        ],
        "description": "Assigns the content of a currently selected Excel cells to an array. For each selected cell a consisting on row and column index and the content of the cell is appended."
    },
    "EXCEL_GET_SHEET_NAME": {
        "prefix": "EXCEL_GET_SHEET_NAME",
        "body": [
            "EXCEL_GET_SHEET_NAME $1"
        ],
        "description": "Retrieves the name of the specified sheet of the active excel document."
    },
    "EXCEL_GET_SHEET_NAMES": {
        "prefix": "EXCEL_GET_SHEET_NAMES",
        "body": [
            "EXCEL_GET_SHEET_NAMES $1"
        ],
        "description": "Retrieves the name of all sheets of the excel document."
    },
    "EXCEL_GET_STRING": {
        "prefix": "EXCEL_GET_STRING",
        "body": [
            "EXCEL_GET_STRING $1"
        ],
        "description": "Retrieves a string of the specified row and column in Excel and stores to a . "
    },
    "EXCEL_GET_STRING_BUFFER": {
        "prefix": "EXCEL_GET_STRING_BUFFER",
        "body": [
            "EXCEL_GET_STRING_BUFFER $1"
        ],
        "description": "Retrieves a string from the Excel read/write buffer. This command allows to read data from Excel with high performance."
    },
    "EXCEL_GET_STRINGS": {
        "prefix": "EXCEL_GET_STRINGS",
        "body": [
            "EXCEL_GET_STRINGS $1"
        ],
        "description": "Retrieves the strings from multiple excel cells and stores in to an describing row, column and value. Use this function to retrieve the cell text as it shows up in Excel."
    },
    "EXCEL_GET_VALUE": {
        "prefix": "EXCEL_GET_VALUE",
        "body": [
            "EXCEL_GET_VALUE $1"
        ],
        "description": "Retrieves a value of the specified row and column in Excel and stores to a ."
    },
    "EXCEL_GET_VALUE_BUFFER": {
        "prefix": "EXCEL_GET_VALUE_BUFFER",
        "body": [
            "EXCEL_GET_VALUE_BUFFER $1"
        ],
        "description": "Retrieves a value from the Excel read/write buffer. This command allows to read data from Excel with high performance."
    },
    "EXCEL_GET_VALUES": {
        "prefix": "EXCEL_GET_VALUES",
        "body": [
            "EXCEL_GET_VALUES $1"
        ],
        "description": "Retrieves the content from multiple excel cells and stores in to an describing row, column and value."
    },
    "EXCEL_LOAD_DOCUMENT": {
        "prefix": "EXCEL_LOAD_DOCUMENT",
        "body": [
            "EXCEL_LOAD_DOCUMENT $1"
        ],
        "description": "Retrieves a new Excel document specified by the name. The document could be located either in library or in working directory."
    },
    "EXCEL_NEW_DOCUMENT": {
        "prefix": "EXCEL_NEW_DOCUMENT",
        "body": [
            "EXCEL_NEW_DOCUMENT $1"
        ],
        "description": "Creates a new Excel document."
    },
    "EXCEL_RUN_MACRO": {
        "prefix": "EXCEL_RUN_MACRO",
        "body": [
            "EXCEL_RUN_MACRO $1"
        ],
        "description": "Executes a Macro in the current Excel document."
    },
    "EXCEL_SAVE_DOCUMENT": {
        "prefix": "EXCEL_SAVE_DOCUMENT",
        "body": [
            "EXCEL_SAVE_DOCUMENT $1"
        ],
        "description": "Saves a Excel document specified by the name. The document could be located either in library or in working directory."
    },
    "EXCEL_SET_VALUE": {
        "prefix": "EXCEL_SET_VALUE",
        "body": [
            "EXCEL_SET_VALUE $1"
        ],
        "description": "Retrieves a values and assigns it to an Excel cell."
    },
    "EXCEL_SET_VALUE_BUFFER": {
        "prefix": "EXCEL_SET_VALUE_BUFFER",
        "body": [
            "EXCEL_SET_VALUE_BUFFER $1"
        ],
        "description": "Writes a value to the Excel read/write buffer. This command allows to write data from Excel with high performance."
    },
    "EXCEL_SET_VALUES": {
        "prefix": "EXCEL_SET_VALUES",
        "body": [
            "EXCEL_SET_VALUES $1"
        ],
        "description": "Assigns the content of a complete describing row, column and value."
    },
    "EXCEL_START": {
        "prefix": "EXCEL_START",
        "body": [
            "EXCEL_START $1"
        ],
        "description": "Starts a new connection to Microsoft Excel."
    },
    "EXCEL_UPDATE_BUFFER": {
        "prefix": "EXCEL_UPDATE_BUFFER",
        "body": [
            "EXCEL_UPDATE_BUFFER $1"
        ],
        "description": "Synchronizes the Excel read/write buffer with the active sheet. This command is used to allow buffered read/write access to Excel data with higher performance."
    },
    "EXCLUDE_FROM_SIMPREP": {
        "prefix": "EXCLUDE_FROM_SIMPREP",
        "body": [
            "EXCLUDE_FROM_SIMPREP $1"
        ],
        "description": "Exclude component from simplified representation. This works only for assemblies, but not for parts."
    },
    "EXEC_MDLCHECK": {
        "prefix": "EXEC_MDLCHECK",
        "body": [
            "EXEC_MDLCHECK $1"
        ],
        "description": "Performs a ModelCHECK analysis similar to ."
    },
    "EXPLODE_DRW_VIEW": {
        "prefix": "EXPLODE_DRW_VIEW",
        "body": [
            "EXPLODE_DRW_VIEW $1"
        ],
        "description": "Activates or deactivates the default explosion state in a drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "EXPLODE_MDL": {
        "prefix": "EXPLODE_MDL",
        "body": [
            "EXPLODE_MDL $1"
        ],
        "description": "Explodes or Un-explodes an assembly."
    },
    "EXPORT_DRW_PDF": {
        "prefix": "EXPORT_DRW_PDF",
        "body": [
            "EXPORT_DRW_PDF $1"
        ],
        "description": "Exports a drawing sheet to a PDF file. This command is available for Wildfire 3 and above."
    },
    "EXPORT_FEMMESH": {
        "prefix": "EXPORT_FEMMESH",
        "body": [
            "EXPORT_FEMMESH $1"
        ],
        "description": "Exports a finite element mesh. This command requires a material with density to be assigned on the model. Additionally since Wildfire 4 you need to make sure Creo Elements/Pro MECHANICA is installed. The Creo Elements/Pro Pro/MESH licenses is required for this command."
    },
    "EXPORT_FILE": {
        "prefix": "EXPORT_FILE",
        "body": [
            "EXPORT_FILE $1"
        ],
        "description": "Exports Creo Elements/Pro model like "
    },
    "EXPORT_NC_TOOL_XML": {
        "prefix": "EXPORT_NC_TOOL_XML",
        "body": [
            "EXPORT_NC_TOOL_XML $1"
        ],
        "description": "Exports a NC tool definition to a XML file."
    },
    "EXPORT_PDF": {
        "prefix": "EXPORT_PDF",
        "body": [
            "EXPORT_PDF $1"
        ],
        "description": "Exports PDFs from parts, assemblies and drawings. This command is available for Wildfire 4 and above."
    },
    "EXPORT_PRO_PROGRAM": {
        "prefix": "EXPORT_PRO_PROGRAM",
        "body": [
            "EXPORT_PRO_PROGRAM $1"
        ],
        "description": "Exports the Pro/PROGRAM information of a model like ."
    },
    "EXPORT_TBLPATTERN_DATA": {
        "prefix": "EXPORT_TBLPATTERN_DATA",
        "body": [
            "EXPORT_TBLPATTERN_DATA $1"
        ],
        "description": "Exports table pattern data which was already retrieved in an array in the Creo Elements/Pro table file format."
    },
    "FILE_CLOSE": {
        "prefix": "FILE_CLOSE",
        "body": [
            "FILE_CLOSE $1"
        ],
        "description": "Closes a file which was opened."
    },
    "FILE_OPEN": {
        "prefix": "FILE_OPEN",
        "body": [
            "FILE_OPEN $1"
        ],
        "description": "Opens a file for reading or writing."
    },
    "FILE_OPEN_DIALOG": {
        "prefix": "FILE_OPEN_DIALOG",
        "body": [
            "FILE_OPEN_DIALOG $1"
        ],
        "description": "Executes the Creo Elements/Pro file open dialog and lets the user select a file. This allows also access to connected PDMLink or Intralink sessions as well as to files in session."
    },
    "FILE_READ": {
        "prefix": "FILE_READ",
        "body": [
            "FILE_READ $1"
        ],
        "description": "Reads the complete content of an open file."
    },
    "FILE_READ_LINE": {
        "prefix": "FILE_READ_LINE",
        "body": [
            "FILE_READ_LINE $1"
        ],
        "description": "Reads a line from an open file."
    },
    "FILE_REPLACE_LINE": {
        "prefix": "FILE_REPLACE_LINE",
        "body": [
            "FILE_REPLACE_LINE $1"
        ],
        "description": "Replaces a line of an existing file."
    },
    "FILE_SAVE_DIALOG": {
        "prefix": "FILE_SAVE_DIALOG",
        "body": [
            "FILE_SAVE_DIALOG $1"
        ],
        "description": "Opens the Creo Parametric file save dialog and lets the user specify a file name and location. This allows also access to connected PDMLink or Intralink sessions."
    },
    "FILE_SET_POS": {
        "prefix": "FILE_SET_POS",
        "body": [
            "FILE_SET_POS $1"
        ],
        "description": "Sets the file descriptor to a specific line."
    },
    "FILE_WRITE": {
        "prefix": "FILE_WRITE",
        "body": [
            "FILE_WRITE $1"
        ],
        "description": "Writes the content of a string variable to an open file."
    },
    "FILE_WRITE_LINE": {
        "prefix": "FILE_WRITE_LINE",
        "body": [
            "FILE_WRITE_LINE $1"
        ],
        "description": "Writes a line to an open file."
    },
    "FIND_ARRAY_ELEM": {
        "prefix": "FIND_ARRAY_ELEM",
        "body": [
            "FIND_ARRAY_ELEM $1"
        ],
        "description": "Searches for an element in an array and returns the array index or -1 in case it was not found."
    },
    "FTP_CONNECT": {
        "prefix": "FTP_CONNECT",
        "body": [
            "FTP_CONNECT $1"
        ],
        "description": "Connects to a FTP server."
    },
    "FTP_DISCONNECT": {
        "prefix": "FTP_DISCONNECT",
        "body": [
            "FTP_DISCONNECT $1"
        ],
        "description": "Disconnects from a FTP server."
    },
    "FTP_DOWNLOAD_FILE": {
        "prefix": "FTP_DOWNLOAD_FILE",
        "body": [
            "FTP_DOWNLOAD_FILE $1"
        ],
        "description": "To download a file from the connected FTP server."
    },
    "FTP_UPLOAD_FILE": {
        "prefix": "FTP_UPLOAD_FILE",
        "body": [
            "FTP_UPLOAD_FILE $1"
        ],
        "description": "To upload a file to the connected FTP server."
    },
    "GENERATE_RANDOM_INT": {
        "prefix": "GENERATE_RANDOM_INT",
        "body": [
            "GENERATE_RANDOM_INT $1"
        ],
        "description": "Generates a random integer between an upper and a lower limit based on the Mersenne Twister algorithm."
    },
    "GET_ACCURACY": {
        "prefix": "GET_ACCURACY",
        "body": [
            "GET_ACCURACY $1"
        ],
        "description": "Reads the accuracy of a model."
    },
    "GET_ACTIVE_BODY": {
        "prefix": "GET_ACTIVE_BODY",
        "body": [
            "GET_ACTIVE_BODY $1"
        ],
        "description": "GET_ACTIVE_BODY"
    },
    "GET_ACTIVE_COMB_VIEW": {
        "prefix": "GET_ACTIVE_COMB_VIEW",
        "body": [
            "GET_ACTIVE_COMB_VIEW ${1|THIS,input_mdl_reference|} ${2:output_name_of_active_comb_view}"
        ],
        "description": "Retrieves the name of the active combined view. This command requires Creo Parametric 1.0 or above."
    },
    "GET_ACTIVE_LAYER_STATE": {
        "prefix": "GET_ACTIVE_LAYER_STATE",
        "body": [
            "GET_ACTIVE_LAYER_STATE $1"
        ],
        "description": "Detects the active layer state. This command requires Creo Parametric 2.0 or above."
    },
    "GET_ACTIVE_NC_OPERATION": {
        "prefix": "GET_ACTIVE_NC_OPERATION",
        "body": [
            "GET_ACTIVE_NC_OPERATION $1"
        ],
        "description": "Gets the currently active NC operation from a NC assembly."
    },
    "GET_ACTIVE_SIMPREP": {
        "prefix": "GET_ACTIVE_SIMPREP",
        "body": [
            "GET_ACTIVE_SIMPREP $1"
        ],
        "description": "Retrieves information about the active simplified representation of a model."
    },
    "GET_ACTIVE_STYLE": {
        "prefix": "GET_ACTIVE_STYLE",
        "body": [
            "GET_ACTIVE_STYLE $1"
        ],
        "description": "GET_ACTIVE_STYLE"
    },
    "GET_ANNOTATION_ANGLE": {
        "prefix": "GET_ANNOTATION_ANGLE",
        "body": [
            "GET_ANNOTATION_ANGLE $1"
        ],
        "description": "Retrieves angle of an annotation."
    },
    "GET_ANNOTATION_ELEMENT": {
        "prefix": "GET_ANNOTATION_ELEMENT",
        "body": [
            "GET_ANNOTATION_ELEMENT $1"
        ],
        "description": "Retrieves the first element of an annotation feature."
    },
    "GET_ANNOTATION_ELEMENT_NAME": {
        "prefix": "GET_ANNOTATION_ELEMENT_NAME",
        "body": [
            "GET_ANNOTATION_ELEMENT_NAME $1"
        ],
        "description": "Gets the name of a specified annotation element which is contained by an annotation feature."
    },
    "GET_ANNOTATION_ELEMENTS": {
        "prefix": "GET_ANNOTATION_ELEMENTS",
        "body": [
            "GET_ANNOTATION_ELEMENTS $1"
        ],
        "description": "Retrieves all elements of an annotation feature."
    },
    "GET_ANNOTATION_LEADER_REF": {
        "prefix": "GET_ANNOTATION_LEADER_REF",
        "body": [
            "GET_ANNOTATION_LEADER_REF $1"
        ],
        "description": "Retrieves the attachment reference of an annotation leader."
    },
    "GET_ANNOTATION_LEADER_REFS": {
        "prefix": "GET_ANNOTATION_LEADER_REFS",
        "body": [
            "GET_ANNOTATION_LEADER_REFS $1"
        ],
        "description": "Retrieves the all attachment references of an annotation leader."
    },
    "GET_ANNOTATION_LEGACY_STATE": {
        "prefix": "GET_ANNOTATION_LEGACY_STATE",
        "body": [
            "GET_ANNOTATION_LEGACY_STATE $1"
        ],
        "description": "Retrieves the information about the legacy state of an annotation. These annotations have been created prior to Creo 4.0. This function requires Creo Parametric 4.0 M090, 5.0.5.0, 6.0.2.0 or above."
    },
    "GET_ANNOTATION_ORIENTATION": {
        "prefix": "GET_ANNOTATION_ORIENTATION",
        "body": [
            "GET_ANNOTATION_ORIENTATION $1"
        ],
        "description": "Retrieves orientation of an annotation."
    },
    "GET_ANNOTATION_POS": {
        "prefix": "GET_ANNOTATION_POS",
        "body": [
            "GET_ANNOTATION_POS $1"
        ],
        "description": "Retrieves position of an annotation."
    },
    "GET_ANNOTATION_TEXT_STYLE": {
        "prefix": "GET_ANNOTATION_TEXT_STYLE",
        "body": [
            "GET_ANNOTATION_TEXT_STYLE $1"
        ],
        "description": "Retrieves the text style of an annotation."
    },
    "GET_ARC_DATA": {
        "prefix": "GET_ARC_DATA",
        "body": [
            "GET_ARC_DATA $1"
        ],
        "description": "Retrieves the shape information of an arc edge or a curve."
    },
    "GET_ARRAY_ELEM": {
        "prefix": "GET_ARRAY_ELEM",
        "body": [
            "GET_ARRAY_ELEM $1"
        ],
        "description": "Retrieves a specific element of an ."
    },
    "GET_ARRAY_SIZE": {
        "prefix": "GET_ARRAY_SIZE",
        "body": [
            "GET_ARRAY_SIZE $1"
        ],
        "description": "Determines number of elements in an ."
    },
    "GET_ATTRIBUTE_DESIGNATION_STATUS": {
        "prefix": "GET_ATTRIBUTE_DESIGNATION_STATUS",
        "body": [
            "GET_ATTRIBUTE_DESIGNATION_STATUS $1"
        ],
        "description": "Inquiries if a dimension, geometrical tolerance or surface finish is designated."
    },
    "GET_AUDIT_TRAIL": {
        "prefix": "GET_AUDIT_TRAIL",
        "body": [
            "GET_AUDIT_TRAIL $1"
        ],
        "description": "Retrieves the history information for a model provided by ."
    },
    "GET_AUTHENTICATION": {
        "prefix": "GET_AUTHENTICATION",
        "body": [
            "GET_AUTHENTICATION $1"
        ],
        "description": "Retrieves login and password information from the password database See in the User Guide for more information."
    },
    "GET_AXIS_DATA": {
        "prefix": "GET_AXIS_DATA",
        "body": [
            "GET_AXIS_DATA $1"
        ],
        "description": "Retrieves origin and direction of an axis."
    },
    "GET_BACKGROUND_VIEW": {
        "prefix": "GET_BACKGROUND_VIEW",
        "body": [
            "GET_BACKGROUND_VIEW $1"
        ],
        "description": "Retrieves the background view of a drawing sheet."
    },
    "GET_BODY_DENSITY": {
        "prefix": "GET_BODY_DENSITY",
        "body": [
            "GET_BODY_DENSITY $1"
        ],
        "description": "GET_BODY_DENSITY"
    },
    "GET_BODY_FROM_REF": {
        "prefix": "GET_BODY_FROM_REF",
        "body": [
            "GET_BODY_FROM_REF $1"
        ],
        "description": "GET_BODY_FROM_REF"
    },
    "GET_BODY_MASS_PROPERTIES": {
        "prefix": "GET_BODY_MASS_PROPERTIES",
        "body": [
            "GET_BODY_MASS_PROPERTIES $1"
        ],
        "description": "GET_BODY_MASS_PROPERTIES"
    },
    "GET_BODY_MATERIAL": {
        "prefix": "GET_BODY_MATERIAL",
        "body": [
            "GET_BODY_MATERIAL $1"
        ],
        "description": "GET_BODY_MATERIAL"
    },
    "GET_BODY_MATERIAL_PROPERTIES": {
        "prefix": "GET_BODY_MATERIAL_PROPERTIES",
        "body": [
            "GET_BODY_MATERIAL_PROPERTIES $1"
        ],
        "description": "GET_BODY_MATERIAL_PROPERTIES"
    },
    "GET_BODY_MATERIAL_PROPERTY": {
        "prefix": "GET_BODY_MATERIAL_PROPERTY",
        "body": [
            "GET_BODY_MATERIAL_PROPERTY $1"
        ],
        "description": "GET_BODY_MATERIAL_PROPERTY"
    },
    "GET_BREAKABLE_MDL_DEPENDENCY_STATE": {
        "prefix": "GET_BREAKABLE_MDL_DEPENDENCY_STATE",
        "body": [
            "GET_BREAKABLE_MDL_DEPENDENCY_STATE $1"
        ],
        "description": "Retrieves the installation if a model has breakable dependencies. This helps to detect ghost objects. This function requires Creo Parametric 2.0 or above."
    },
    "GET_BROWSER_SIZE": {
        "prefix": "GET_BROWSER_SIZE",
        "body": [
            "GET_BROWSER_SIZE $1"
        ],
        "description": "Retrieves the size of the Creo embedded browser in percentage of coverage of the Creo window. The values in the range 0.0 to 100.0."
    },
    "GET_CLIPBOARD_TEXT": {
        "prefix": "GET_CLIPBOARD_TEXT",
        "body": [
            "GET_CLIPBOARD_TEXT $1"
        ],
        "description": "Retrieves text from the clipboard."
    },
    "GET_COL_ARRAY": {
        "prefix": "GET_COL_ARRAY",
        "body": [
            "GET_COL_ARRAY $1"
        ],
        "description": "Retrieves a specified column of an array with sub-arrays to get an array with plain elements. This is similar to receiving a column vector from a matrix."
    },
    "GET_COLOR": {
        "prefix": "GET_COLOR",
        "body": [
            "GET_COLOR $1"
        ],
        "description": "Gets rgb color of assembly, part, feature, curve or surface as of red, green and blue between 0 and 255."
    },
    "GET_COLOR_PROPS": {
        "prefix": "GET_COLOR_PROPS",
        "body": [
            "GET_COLOR_PROPS $1"
        ],
        "description": "Gets the color properties of assemblies, parts, features, curves or surfaces."
    },
    "GET_COLOR_PROPS_ASSIGNED": {
        "prefix": "GET_COLOR_PROPS_ASSIGNED",
        "body": [
            "GET_COLOR_PROPS_ASSIGNED $1"
        ],
        "description": "Determines if a color is assigned."
    },
    "GET_COMB_VIEW_ANNOTATION_VISIBILITY": {
        "prefix": "GET_COMB_VIEW_ANNOTATION_VISIBILITY",
        "body": [
            "GET_COMB_VIEW_ANNOTATION_VISIBILITY $1"
        ],
        "description": "Retrieves the visibility state of an annotation in a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "GET_COMB_VIEW_ANNOTATIONS": {
        "prefix": "GET_COMB_VIEW_ANNOTATIONS",
        "body": [
            "GET_COMB_VIEW_ANNOTATIONS $1"
        ],
        "description": "Retrieves the annotations of a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "GET_COMB_VIEW_PROPS": {
        "prefix": "GET_COMB_VIEW_PROPS",
        "body": [
            "GET_COMB_VIEW_PROPS ${1|THIS,input_mdl_reference|} ${2:input_comb_view_name} ${3:output_comb_view_props} "
        ],
        "description": "Retrieves the properties of a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "GET_COMB_VIEWS": {
        "prefix": "GET_COMB_VIEWS",
        "body": [
            "GET_COMB_VIEWS ${1|THIS,${2:input_mdl_reference|}|} ${3:output_array_of_comb_views} "
        ],
        "description": "Retrieves all combined views of a model. This command requires Creo Parametric 1.0 or above."
    },
    "GET_COMMON_NAME": {
        "prefix": "GET_COMMON_NAME",
        "body": [
            "GET_COMMON_NAME $1"
        ],
        "description": "Retrieves the content of the parameter of the model. This command requires Creo Elements/Pro Wildfire 4 or above."
    },
    "GET_COMP_BOM_LEVEL": {
        "prefix": "GET_COMP_BOM_LEVEL",
        "body": [
            "GET_COMP_BOM_LEVEL $1"
        ],
        "description": "Retrieves nesting level in the model tree of a component."
    },
    "GET_COMP_PLACED": {
        "prefix": "GET_COMP_PLACED",
        "body": [
            "GET_COMP_PLACED $1"
        ],
        "description": "Determines the placement state of a component. Unplaced component are usually created via ."
    },
    "GET_COMP_TYPE": {
        "prefix": "GET_COMP_TYPE",
        "body": [
            "GET_COMP_TYPE $1"
        ],
        "description": "Retrieves the type of a component."
    },
    "GET_COMPCURVE_CURVES": {
        "prefix": "GET_COMPCURVE_CURVES",
        "body": [
            "GET_COMPCURVE_CURVES $1"
        ],
        "description": "Retrieves an array of curves from one composite curve."
    },
    "GET_CONFIG_HTML_DATA": {
        "prefix": "GET_CONFIG_HTML_DATA",
        "body": [
            "GET_CONFIG_HTML_DATA $1"
        ],
        "description": "Retrieves the data submitted by the web page called from ."
    },
    "GET_CONFIG_OPTION": {
        "prefix": "GET_CONFIG_OPTION",
        "body": [
            "GET_CONFIG_OPTION $1"
        ],
        "description": "Retrieves the current setting of a Creo Elements/Pro configuration option and stores it to a variable as string value."
    },
    "GET_CONSEC_FEAT_PARAM_INDEX": {
        "prefix": "GET_CONSEC_FEAT_PARAM_INDEX",
        "body": [
            "GET_CONSEC_FEAT_PARAM_INDEX $1"
        ],
        "description": "Gets the next available index for a new consecutive parameter on feature or component feature level."
    },
    "GET_CONSEC_MDL_PARAM_INDEX": {
        "prefix": "GET_CONSEC_MDL_PARAM_INDEX",
        "body": [
            "GET_CONSEC_MDL_PARAM_INDEX $1"
        ],
        "description": "Gets the next available index for a new consecutive parameter on part or assembly level."
    },
    "GET_CONSTRAINT": {
        "prefix": "GET_CONSTRAINT",
        "body": [
            "GET_CONSTRAINT $1"
        ],
        "description": "Retrieve a constraint from a component."
    },
    "GET_CONSTRAINT_SET": {
        "prefix": "GET_CONSTRAINT_SET",
        "body": [
            "GET_CONSTRAINT_SET $1"
        ],
        "description": "Retrieve a constraint sets from a component."
    },
    "GET_CONSTRAINT_SETS": {
        "prefix": "GET_CONSTRAINT_SETS",
        "body": [
            "GET_CONSTRAINT_SETS $1"
        ],
        "description": "Retrieves all constraint sets from a component."
    },
    "GET_CONSTRAINTS": {
        "prefix": "GET_CONSTRAINTS",
        "body": [
            "GET_CONSTRAINTS $1"
        ],
        "description": "Retrieves all constrains from a component."
    },
    "GET_CONSTRUCTION_BODY_FLAG": {
        "prefix": "GET_CONSTRUCTION_BODY_FLAG",
        "body": [
            "GET_CONSTRUCTION_BODY_FLAG $1"
        ],
        "description": "GET_CONSTRUCTION_BODY_FLAG"
    },
    "GET_CSYS_VECTOR": {
        "prefix": "GET_CSYS_VECTOR",
        "body": [
            "GET_CSYS_VECTOR $1"
        ],
        "description": "Retrieves a direction vector from a coordinate system."
    },
    "GET_CURRENT_MDL": {
        "prefix": "GET_CURRENT_MDL",
        "body": [
            "GET_CURRENT_MDL $1"
        ],
        "description": "Retrieves the reference of the current model."
    },
    "GET_CURRENT_WORKSPACE": {
        "prefix": "GET_CURRENT_WORKSPACE",
        "body": [
            "GET_CURRENT_WORKSPACE $1"
        ],
        "description": "Determines the name of the current workspace from the connected Intralink or PDMLink session. In case no workspace is available, the results is an empty string."
    },
    "GET_CURVE_AT_POS": {
        "prefix": "GET_CURVE_AT_POS",
        "body": [
            "GET_CURVE_AT_POS $1"
        ],
        "description": "Determines the curve among an array of curves which contains the specified position."
    },
    "GET_CURVE_COMPCURVE": {
        "prefix": "GET_CURVE_COMPCURVE",
        "body": [
            "GET_CURVE_COMPCURVE $1"
        ],
        "description": "Searches the composite curve which contains the specified curve."
    },
    "GET_CURVE_LENGTH": {
        "prefix": "GET_CURVE_LENGTH",
        "body": [
            "GET_CURVE_LENGTH $1"
        ],
        "description": "Computes the length of a curve or a composite curve based on optional start and end references."
    },
    "GET_CURVE_PNT_RATIO": {
        "prefix": "GET_CURVE_PNT_RATIO",
        "body": [
            "GET_CURVE_PNT_RATIO $1"
        ],
        "description": "Computes the ratio of the selection position on a curve. This could be used for example to calculate the ratio for a point on curve UDF based on the selection of the user."
    },
    "GET_CURVE_TYPE": {
        "prefix": "GET_CURVE_TYPE",
        "body": [
            "GET_CURVE_TYPE $1"
        ],
        "description": "Gets type of a curve or composite curve"
    },
    "GET_CURVES_AT_POS": {
        "prefix": "GET_CURVES_AT_POS",
        "body": [
            "GET_CURVES_AT_POS $1"
        ],
        "description": "Determines the curves among an array of curves which contains the specified position."
    },
    "GET_DATUM_TAG_ATTACHMENT": {
        "prefix": "GET_DATUM_TAG_ATTACHMENT",
        "body": [
            "GET_DATUM_TAG_ATTACHMENT $1"
        ],
        "description": "Retrieves the reference to the attachment of the datum tag."
    },
    "GET_DATUM_TAG_LABEL": {
        "prefix": "GET_DATUM_TAG_LABEL",
        "body": [
            "GET_DATUM_TAG_LABEL $1"
        ],
        "description": "Retrieves the label of a datum tag. For the new Creo 4.0 datum tags this is the label for legacy datum tags it is the name of the related datum plane."
    },
    "GET_DENSITY": {
        "prefix": "GET_DENSITY",
        "body": [
            "GET_DENSITY $1"
        ],
        "description": "Retrieves the current density of a part. In case no density is specified 1 is used as default."
    },
    "GET_DESIGN_SERVER_INFO": {
        "prefix": "GET_DESIGN_SERVER_INFO",
        "body": [
            "GET_DESIGN_SERVER_INFO $1"
        ],
        "description": "Retrieves information about the job."
    },
    "GET_DESIGN_SERVER_VARIABLE": {
        "prefix": "GET_DESIGN_SERVER_VARIABLE",
        "body": [
            "GET_DESIGN_SERVER_VARIABLE $1"
        ],
        "description": "Retrieves a variable provided by the for the current job."
    },
    "GET_DIM_DECIMALS": {
        "prefix": "GET_DIM_DECIMALS",
        "body": [
            "GET_DIM_DECIMALS $1"
        ],
        "description": "Reads the number of decimal places of a dimension."
    },
    "GET_DIM_DISPLAY_ROUNDED": {
        "prefix": "GET_DIM_DISPLAY_ROUNDED",
        "body": [
            "GET_DIM_DISPLAY_ROUNDED $1"
        ],
        "description": "Retrieves the information if the dimension is displayed as a rounded value. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "GET_DIM_DISPLAY_ROUNDED_ACCESSIBLE": {
        "prefix": "GET_DIM_DISPLAY_ROUNDED_ACCESSIBLE",
        "body": [
            "GET_DIM_DISPLAY_ROUNDED_ACCESSIBLE $1"
        ],
        "description": "Retrieves the information if the of the dimension properties is accessible. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "GET_DIM_DISPLAY_TYPE": {
        "prefix": "GET_DIM_DISPLAY_TYPE",
        "body": [
            "GET_DIM_DISPLAY_TYPE $1"
        ],
        "description": "Retrieves the display type of a dimension."
    },
    "GET_DIM_FEATURE": {
        "prefix": "GET_DIM_FEATURE",
        "body": [
            "GET_DIM_FEATURE $1"
        ],
        "description": "Retrieves the feature which owns the dimension."
    },
    "GET_DIM_FRACTIONAL": {
        "prefix": "GET_DIM_FRACTIONAL",
        "body": [
            "GET_DIM_FRACTIONAL $1"
        ],
        "description": "Retrieves the information if a solid dimension is shown in fractional format."
    },
    "GET_DIM_MDL": {
        "prefix": "GET_DIM_MDL",
        "body": [
            "GET_DIM_MDL $1"
        ],
        "description": "Retrieves the model which owns the dimension."
    },
    "GET_DIM_OVERRIDE_VALUE": {
        "prefix": "GET_DIM_OVERRIDE_VALUE",
        "body": [
            "GET_DIM_OVERRIDE_VALUE $1"
        ],
        "description": "Reads the dimension override value from a created dimension."
    },
    "GET_DIM_SETUP_TYPE": {
        "prefix": "GET_DIM_SETUP_TYPE",
        "body": [
            "GET_DIM_SETUP_TYPE $1"
        ],
        "description": "Retrieves the setup type of a dimension."
    },
    "GET_DIM_SYMBOL": {
        "prefix": "GET_DIM_SYMBOL",
        "body": [
            "GET_DIM_SYMBOL $1"
        ],
        "description": "Reads the symbol from a specified dimension."
    },
    "GET_DIM_TEXT": {
        "prefix": "GET_DIM_TEXT",
        "body": [
            "GET_DIM_TEXT $1"
        ],
        "description": "Read the text from a specified dimension."
    },
    "GET_DIM_TOL": {
        "prefix": "GET_DIM_TOL",
        "body": [
            "GET_DIM_TOL $1"
        ],
        "description": "Reads the upper and lower limit from a tolerance of a dimension."
    },
    "GET_DIM_TOL_TABLE": {
        "prefix": "GET_DIM_TOL_TABLE",
        "body": [
            "GET_DIM_TOL_TABLE $1"
        ],
        "description": "Retrieves the tolerance table of a dimension."
    },
    "GET_DIM_TOL_TYPE": {
        "prefix": "GET_DIM_TOL_TYPE",
        "body": [
            "GET_DIM_TOL_TYPE $1"
        ],
        "description": "Retrieves the tolerance type of a dimension."
    },
    "GET_DIM_TYPE": {
        "prefix": "GET_DIM_TYPE",
        "body": [
            "GET_DIM_TYPE $1"
        ],
        "description": "Retrieves the type of a dimension."
    },
    "GET_DIM_VALUE": {
        "prefix": "GET_DIM_VALUE",
        "body": [
            "GET_DIM_VALUE $1"
        ],
        "description": "Read the value from a specified dimension."
    },
    "GET_DIM_VALUE_DISPLAY_TYPE": {
        "prefix": "GET_DIM_VALUE_DISPLAY_TYPE",
        "body": [
            "GET_DIM_VALUE_DISPLAY_TYPE $1"
        ],
        "description": "Reads the value display type for a created dimension."
    },
    "GET_DRW_ANNOTATION_POS": {
        "prefix": "GET_DRW_ANNOTATION_POS",
        "body": [
            "GET_DRW_ANNOTATION_POS $1"
        ],
        "description": "Retrieves the position of an annotation on a drawing."
    },
    "GET_DRW_ANNOTATION_TEXT_STYLE": {
        "prefix": "GET_DRW_ANNOTATION_TEXT_STYLE",
        "body": [
            "GET_DRW_ANNOTATION_TEXT_STYLE $1"
        ],
        "description": "Retrieves the text style of a drawing annotation."
    },
    "GET_DRW_ANNOTATION_VISIBILITY": {
        "prefix": "GET_DRW_ANNOTATION_VISIBILITY",
        "body": [
            "GET_DRW_ANNOTATION_VISIBILITY $1"
        ],
        "description": "Determines if a drawing annotation is visible."
    },
    "GET_DRW_CUR_SHEET": {
        "prefix": "GET_DRW_CUR_SHEET",
        "body": [
            "GET_DRW_CUR_SHEET $1"
        ],
        "description": "Retrieves the number of the current drawing sheet."
    },
    "GET_DRW_DIM_ATTACHED": {
        "prefix": "GET_DRW_DIM_ATTACHED",
        "body": [
            "GET_DRW_DIM_ATTACHED $1"
        ],
        "description": "Retrieves the information about the attachment status of a drawing dimension. Unattached dimensions are displayed in magenta color. This function requires the ."
    },
    "GET_DRW_DIM_POS": {
        "prefix": "GET_DRW_DIM_POS",
        "body": [
            "GET_DRW_DIM_POS $1"
        ],
        "description": "Retrieves the position of a drawing dimension."
    },
    "GET_DRW_DIM_TEXT_ANGLE": {
        "prefix": "GET_DRW_DIM_TEXT_ANGLE",
        "body": [
            "GET_DRW_DIM_TEXT_ANGLE $1"
        ],
        "description": "Retrieves the angle of the drawing dimension text."
    },
    "GET_DRW_DIM_TEXT_POS": {
        "prefix": "GET_DRW_DIM_TEXT_POS",
        "body": [
            "GET_DRW_DIM_TEXT_POS $1"
        ],
        "description": "Retrieves the position of a drawing dimension text."
    },
    "GET_DRW_FORMAT": {
        "prefix": "GET_DRW_FORMAT",
        "body": [
            "GET_DRW_FORMAT $1"
        ],
        "description": "Retrieves the name of drawing format."
    },
    "GET_DRW_FORMAT_TABLES": {
        "prefix": "GET_DRW_FORMAT_TABLES",
        "body": [
            "GET_DRW_FORMAT_TABLES $1"
        ],
        "description": "Retrieves all tables of the current drawing format."
    },
    "GET_DRW_ITEM_STATE": {
        "prefix": "GET_DRW_ITEM_STATE",
        "body": [
            "GET_DRW_ITEM_STATE $1"
        ],
        "description": "Determines the display state of a drawing item."
    },
    "GET_DRW_MDL": {
        "prefix": "GET_DRW_MDL",
        "body": [
            "GET_DRW_MDL $1"
        ],
        "description": "Retrieves the active model of a drawing."
    },
    "GET_DRW_MDLS": {
        "prefix": "GET_DRW_MDLS",
        "body": [
            "GET_DRW_MDLS $1"
        ],
        "description": "Retrieves an array of all models from a drawing."
    },
    "GET_DRW_NOTE_ANGLE": {
        "prefix": "GET_DRW_NOTE_ANGLE",
        "body": [
            "GET_DRW_NOTE_ANGLE $1"
        ],
        "description": "Retrieves the angle of a drawing note."
    },
    "GET_DRW_NOTE_OWNER": {
        "prefix": "GET_DRW_NOTE_OWNER",
        "body": [
            "GET_DRW_NOTE_OWNER $1"
        ],
        "description": "Retrieves information about the owner of a note. This can be a table, a cross section or the drawing."
    },
    "GET_DRW_NOTE_POS": {
        "prefix": "GET_DRW_NOTE_POS",
        "body": [
            "GET_DRW_NOTE_POS $1"
        ],
        "description": "Retrieves the position of a drawing note."
    },
    "GET_DRW_NOTE_TEXT": {
        "prefix": "GET_DRW_NOTE_TEXT",
        "body": [
            "GET_DRW_NOTE_TEXT $1"
        ],
        "description": "Retrieves the text from an existing drawing note."
    },
    "GET_DRW_NOTE_TEXT_ALIGNMENT": {
        "prefix": "GET_DRW_NOTE_TEXT_ALIGNMENT",
        "body": [
            "GET_DRW_NOTE_TEXT_ALIGNMENT $1"
        ],
        "description": "Retrieves the horizontal and vertical alignment from an existing drawing note."
    },
    "GET_DRW_NOTE_TEXT_FONT": {
        "prefix": "GET_DRW_NOTE_TEXT_FONT",
        "body": [
            "GET_DRW_NOTE_TEXT_FONT $1"
        ],
        "description": "Retrieves the text font from an existing drawing note."
    },
    "GET_DRW_NOTE_TEXT_HEIGHT": {
        "prefix": "GET_DRW_NOTE_TEXT_HEIGHT",
        "body": [
            "GET_DRW_NOTE_TEXT_HEIGHT $1"
        ],
        "description": "Retrieves the text height from an existing drawing note."
    },
    "GET_DRW_OPTIONS": {
        "prefix": "GET_DRW_OPTIONS",
        "body": [
            "GET_DRW_OPTIONS $1"
        ],
        "description": "Reads the current options of a drawing."
    },
    "GET_DRW_REF_VIEW": {
        "prefix": "GET_DRW_REF_VIEW",
        "body": [
            "GET_DRW_REF_VIEW $1"
        ],
        "description": "Retrieves the reference of a drawing view from an existing reference."
    },
    "GET_DRW_SCALE": {
        "prefix": "GET_DRW_SCALE",
        "body": [
            "GET_DRW_SCALE $1"
        ],
        "description": "Retrieves the scale of drawing view or of drawing."
    },
    "GET_DRW_SHEET_NAME": {
        "prefix": "GET_DRW_SHEET_NAME",
        "body": [
            "GET_DRW_SHEET_NAME $1"
        ],
        "description": "Retrieves the name of a sheet from a drawing."
    },
    "GET_DRW_SHEET_NUM": {
        "prefix": "GET_DRW_SHEET_NUM",
        "body": [
            "GET_DRW_SHEET_NUM $1"
        ],
        "description": "Retrieves the number of sheets in a drawing."
    },
    "GET_DRW_SIZE": {
        "prefix": "GET_DRW_SIZE",
        "body": [
            "GET_DRW_SIZE $1"
        ],
        "description": "Retrieves the size of a drawing by name, width and height."
    },
    "GET_DRW_SYMBOL_GROUP_EXCLUSIVE": {
        "prefix": "GET_DRW_SYMBOL_GROUP_EXCLUSIVE",
        "body": [
            "GET_DRW_SYMBOL_GROUP_EXCLUSIVE $1"
        ],
        "description": "Examines if a symbol group is exclusive or independent."
    },
    "GET_DRW_SYMBOL_GROUP_SHOWN": {
        "prefix": "GET_DRW_SYMBOL_GROUP_SHOWN",
        "body": [
            "GET_DRW_SYMBOL_GROUP_SHOWN $1"
        ],
        "description": "Examines if a symbol group is visible or not."
    },
    "GET_DRW_SYMBOL_NAME": {
        "prefix": "GET_DRW_SYMBOL_NAME",
        "body": [
            "GET_DRW_SYMBOL_NAME $1"
        ],
        "description": "Retrieves the name of a drawing symbol."
    },
    "GET_DRW_SYMBOL_POS": {
        "prefix": "GET_DRW_SYMBOL_POS",
        "body": [
            "GET_DRW_SYMBOL_POS $1"
        ],
        "description": "Retrieves the position of a drawing symbol."
    },
    "GET_DRW_SYMBOL_VAR_TEXT": {
        "prefix": "GET_DRW_SYMBOL_VAR_TEXT",
        "body": [
            "GET_DRW_SYMBOL_VAR_TEXT $1"
        ],
        "description": "GET_DRW_SYMBOL_VAR_TEXT"
    },
    "GET_DRW_TABLE": {
        "prefix": "GET_DRW_TABLE",
        "body": [
            "GET_DRW_TABLE $1"
        ],
        "description": "Searches for a drawing table according its position."
    },
    "GET_DRW_TABLE_CELL_REGION": {
        "prefix": "GET_DRW_TABLE_CELL_REGION",
        "body": [
            "GET_DRW_TABLE_CELL_REGION $1"
        ],
        "description": "Retrieves the region id for a specific drawing table cell. The command is available since Creo 3.0 M130 / Creo 4.0 M020 and above."
    },
    "GET_DRW_TABLE_COL_WIDTH": {
        "prefix": "GET_DRW_TABLE_COL_WIDTH",
        "body": [
            "GET_DRW_TABLE_COL_WIDTH $1"
        ],
        "description": "GET_DRW_TABLE_COL_WIDTH"
    },
    "GET_DRW_TABLE_FORMAT": {
        "prefix": "GET_DRW_TABLE_FORMAT",
        "body": [
            "GET_DRW_TABLE_FORMAT $1"
        ],
        "description": "Retrieves formatting information from a table cell on a drawing."
    },
    "GET_DRW_TABLE_FROM_ID": {
        "prefix": "GET_DRW_TABLE_FROM_ID",
        "body": [
            "GET_DRW_TABLE_FROM_ID $1"
        ],
        "description": "Retrieves the drawing table reference based on the drawing reference and the table id."
    },
    "GET_DRW_TABLE_GROWTH_DIR": {
        "prefix": "GET_DRW_TABLE_GROWTH_DIR",
        "body": [
            "GET_DRW_TABLE_GROWTH_DIR $1"
        ],
        "description": "Determines the growth direction of a drawing table."
    },
    "GET_DRW_TABLE_ID": {
        "prefix": "GET_DRW_TABLE_ID",
        "body": [
            "GET_DRW_TABLE_ID $1"
        ],
        "description": "Retrieves the ID from a drawing table reference."
    },
    "GET_DRW_TABLE_NOTE": {
        "prefix": "GET_DRW_TABLE_NOTE",
        "body": [
            "GET_DRW_TABLE_NOTE $1"
        ],
        "description": "Retrieves the note of a drawing table cell."
    },
    "GET_DRW_TABLE_OUTLINE": {
        "prefix": "GET_DRW_TABLE_OUTLINE",
        "body": [
            "GET_DRW_TABLE_OUTLINE $1"
        ],
        "description": "Retrieves the outline of a table."
    },
    "GET_DRW_TABLE_POS": {
        "prefix": "GET_DRW_TABLE_POS",
        "body": [
            "GET_DRW_TABLE_POS $1"
        ],
        "description": "Retrieves the position of the drawing table. The position is the upper left corner of the first segment."
    },
    "GET_DRW_TABLE_ROW_HEIGHT": {
        "prefix": "GET_DRW_TABLE_ROW_HEIGHT",
        "body": [
            "GET_DRW_TABLE_ROW_HEIGHT $1"
        ],
        "description": "GET_DRW_TABLE_ROW_HEIGHT"
    },
    "GET_DRW_TABLE_SHEET": {
        "prefix": "GET_DRW_TABLE_SHEET",
        "body": [
            "GET_DRW_TABLE_SHEET $1"
        ],
        "description": "Determines the sheet number of a drawing table. The first drawing sheet has the number 1. In case of several table segments the sheet number of the first one is determined."
    },
    "GET_DRW_TABLE_SIZE": {
        "prefix": "GET_DRW_TABLE_SIZE",
        "body": [
            "GET_DRW_TABLE_SIZE $1"
        ],
        "description": "Retrieves the number of rows and columns from a drawing table."
    },
    "GET_DRW_TABLE_TEXT": {
        "prefix": "GET_DRW_TABLE_TEXT",
        "body": [
            "GET_DRW_TABLE_TEXT $1"
        ],
        "description": "Retrieves text from a drawing table."
    },
    "GET_DRW_VIEW_AXIS": {
        "prefix": "GET_DRW_VIEW_AXIS",
        "body": [
            "GET_DRW_VIEW_AXIS $1"
        ],
        "description": "Retrieves the reference to a drawing view axis from an axis of the solid model. This is only possible if the drawing axis was already displayed via the in Creo Elements/Pro."
    },
    "GET_DRW_VIEW_DIM_METHOD": {
        "prefix": "GET_DRW_VIEW_DIM_METHOD",
        "body": [
            "GET_DRW_VIEW_DIM_METHOD $1"
        ],
        "description": "Provides information if the dimension is shown on the drawing or if it was created."
    },
    "GET_DRW_VIEW_DIM_REFS": {
        "prefix": "GET_DRW_VIEW_DIM_REFS",
        "body": [
            "GET_DRW_VIEW_DIM_REFS $1"
        ],
        "description": "Retrieves the references of a dimension which was created in the drawing."
    },
    "GET_DRW_VIEW_DISPLAY": {
        "prefix": "GET_DRW_VIEW_DISPLAY",
        "body": [
            "GET_DRW_VIEW_DISPLAY $1"
        ],
        "description": "Retrieves the display status of an existing drawing view."
    },
    "GET_DRW_VIEW_MATRIX": {
        "prefix": "GET_DRW_VIEW_MATRIX",
        "body": [
            "GET_DRW_VIEW_MATRIX $1"
        ],
        "description": "Retrieves the orientation of a drawing view and calculates a matrix for this."
    },
    "GET_DRW_VIEW_MDL": {
        "prefix": "GET_DRW_VIEW_MDL",
        "body": [
            "GET_DRW_VIEW_MDL $1"
        ],
        "description": "Retrieves reference to the model of the drawing view. This command is useful for ."
    },
    "GET_DRW_VIEW_NAME": {
        "prefix": "GET_DRW_VIEW_NAME",
        "body": [
            "GET_DRW_VIEW_NAME $1"
        ],
        "description": "Reads the name of a drawing view."
    },
    "GET_DRW_VIEW_NORM_SURFACES": {
        "prefix": "GET_DRW_VIEW_NORM_SURFACES",
        "body": [
            "GET_DRW_VIEW_NORM_SURFACES $1"
        ],
        "description": "Searches for planar solid surfaces in a drawing view which are directed towards the drawing area."
    },
    "GET_DRW_VIEW_ORIENTATION": {
        "prefix": "GET_DRW_VIEW_ORIENTATION",
        "body": [
            "GET_DRW_VIEW_ORIENTATION $1"
        ],
        "description": "Determines the name of the orientation of the solid model which fits to the drawing view. "
    },
    "GET_DRW_VIEW_OUTLINE": {
        "prefix": "GET_DRW_VIEW_OUTLINE",
        "body": [
            "GET_DRW_VIEW_OUTLINE $1"
        ],
        "description": "Calculates the outline of a drawing view."
    },
    "GET_DRW_VIEW_PNT_COORD": {
        "prefix": "GET_DRW_VIEW_PNT_COORD",
        "body": [
            "GET_DRW_VIEW_PNT_COORD $1"
        ],
        "description": "Calculates the coordinates of a point with respect to a drawing view."
    },
    "GET_DRW_VIEW_PNT_ORIENT": {
        "prefix": "GET_DRW_VIEW_PNT_ORIENT",
        "body": [
            "GET_DRW_VIEW_PNT_ORIENT $1"
        ],
        "description": "Determines the orientation of a point concerning a coordinate system in the drawing view. The result is calculated in model coordinates. This function can be used to determine on which side a point is located in the drawing view and if it is before or behind the drawing sheet."
    },
    "GET_DRW_VIEW_POS": {
        "prefix": "GET_DRW_VIEW_POS",
        "body": [
            "GET_DRW_VIEW_POS $1"
        ],
        "description": "Determines the position of a view on a drawing"
    },
    "GET_DRW_VIEW_REF_POS": {
        "prefix": "GET_DRW_VIEW_REF_POS",
        "body": [
            "GET_DRW_VIEW_REF_POS $1"
        ],
        "description": "Retrieves the position of a geometrical reference. If the reference was selected the pick position of the mouse is supplied. Otherwise the center position is calculated."
    },
    "GET_DRW_VIEW_SECTION_NAME": {
        "prefix": "GET_DRW_VIEW_SECTION_NAME",
        "body": [
            "GET_DRW_VIEW_SECTION_NAME $1"
        ],
        "description": "GET_DRW_VIEW_SECTION_NAME"
    },
    "GET_DRW_VIEW_SECTION_NUM": {
        "prefix": "GET_DRW_VIEW_SECTION_NUM",
        "body": [
            "GET_DRW_VIEW_SECTION_NUM $1"
        ],
        "description": "GET_DRW_VIEW_SECTION_NUM"
    },
    "GET_DRW_VIEW_SECTION_TYPE": {
        "prefix": "GET_DRW_VIEW_SECTION_TYPE",
        "body": [
            "GET_DRW_VIEW_SECTION_TYPE $1"
        ],
        "description": "GET_DRW_VIEW_SECTION_TYPE"
    },
    "GET_DRW_VIEW_SIMPREP": {
        "prefix": "GET_DRW_VIEW_SIMPREP",
        "body": [
            "GET_DRW_VIEW_SIMPREP $1"
        ],
        "description": "Retrieves the name of the simplified representation which is used in the drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "GET_DRW_VIEW_STATE": {
        "prefix": "GET_DRW_VIEW_STATE",
        "body": [
            "GET_DRW_VIEW_STATE $1"
        ],
        "description": "Determines the suppress status of a drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "GET_DRW_VIEW_TYPE": {
        "prefix": "GET_DRW_VIEW_TYPE",
        "body": [
            "GET_DRW_VIEW_TYPE $1"
        ],
        "description": "Retrieves the type of a drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "GET_EDGE_AT_POS": {
        "prefix": "GET_EDGE_AT_POS",
        "body": [
            "GET_EDGE_AT_POS $1"
        ],
        "description": "Determines the edge among an array of edges which contains the specified position."
    },
    "GET_EDGE_LENGTH": {
        "prefix": "GET_EDGE_LENGTH",
        "body": [
            "GET_EDGE_LENGTH $1"
        ],
        "description": "Computes the length of an edge based on optional start and end references."
    },
    "GET_EDGE_PNT_RATIO": {
        "prefix": "GET_EDGE_PNT_RATIO",
        "body": [
            "GET_EDGE_PNT_RATIO $1"
        ],
        "description": "Computes the ratio of the selection position on an edge. This could be used for example to calculate the ratio for a point on edge UDF based on the selection of the user."
    },
    "GET_EDGE_SURFACES": {
        "prefix": "GET_EDGE_SURFACES",
        "body": [
            "GET_EDGE_SURFACES $1"
        ],
        "description": "Retrieves the two neighbour surfaces of an edge."
    },
    "GET_EDGE_TYPE": {
        "prefix": "GET_EDGE_TYPE",
        "body": [
            "GET_EDGE_TYPE $1"
        ],
        "description": "Gets type of an edge."
    },
    "GET_EDGES_AT_POS": {
        "prefix": "GET_EDGES_AT_POS",
        "body": [
            "GET_EDGES_AT_POS $1"
        ],
        "description": "Determines the edges among an array of edges which contains the specified position."
    },
    "GET_ENUMERATED_FEAT_PARAM_VALUES": {
        "prefix": "GET_ENUMERATED_FEAT_PARAM_VALUES",
        "body": [
            "GET_ENUMERATED_FEAT_PARAM_VALUES $1"
        ],
        "description": "Retrieves all values for a restricted enumerated feature parameter."
    },
    "GET_ENUMERATED_MDL_PARAM_VALUES": {
        "prefix": "GET_ENUMERATED_MDL_PARAM_VALUES",
        "body": [
            "GET_ENUMERATED_MDL_PARAM_VALUES $1"
        ],
        "description": "Retrieves all values for a restricted enumerated model parameter."
    },
    "GET_ENUMERATED_REF_PARAM_VALUES": {
        "prefix": "GET_ENUMERATED_REF_PARAM_VALUES",
        "body": [
            "GET_ENUMERATED_REF_PARAM_VALUES $1"
        ],
        "description": "Retrieves all values for a restricted enumerated reference parameter."
    },
    "GET_ENVIRONMENT_VARIABLE": {
        "prefix": "GET_ENVIRONMENT_VARIABLE",
        "body": [
            "GET_ENVIRONMENT_VARIABLE $1"
        ],
        "description": "Retrieves the content of an environment variable."
    },
    "GET_EXTERNAL_DATA_CLASSES": {
        "prefix": "GET_EXTERNAL_DATA_CLASSES",
        "body": [
            "GET_EXTERNAL_DATA_CLASSES $1"
        ],
        "description": "Gets the names of all external data classes which are stored in a model."
    },
    "GET_EXTERNAL_DATA_SLOTS": {
        "prefix": "GET_EXTERNAL_DATA_SLOTS",
        "body": [
            "GET_EXTERNAL_DATA_SLOTS $1"
        ],
        "description": "Get the names of all slots of a specified external data class which are stored in a model."
    },
    "GET_FAMINSTANCE_LOCK_STATUS": {
        "prefix": "GET_FAMINSTANCE_LOCK_STATUS",
        "body": [
            "GET_FAMINSTANCE_LOCK_STATUS $1"
        ],
        "description": "GET_FAMINSTANCE_LOCK_STATUS"
    },
    "GET_FAMINSTANCE_NAMES": {
        "prefix": "GET_FAMINSTANCE_NAMES",
        "body": [
            "GET_FAMINSTANCE_NAMES $1"
        ],
        "description": "Retrieve an array of all family table instance names."
    },
    "GET_FAMITEM_NAME": {
        "prefix": "GET_FAMITEM_NAME",
        "body": [
            "GET_FAMITEM_NAME $1"
        ],
        "description": "Retrieves the name of a family table item."
    },
    "GET_FAMITEM_STATE": {
        "prefix": "GET_FAMITEM_STATE",
        "body": [
            "GET_FAMITEM_STATE $1"
        ],
        "description": "Retrieves the state of a family table item for a specific instance and stores it to a variable of type string parameter."
    },
    "GET_FAMITEM_SYMBOL": {
        "prefix": "GET_FAMITEM_SYMBOL",
        "body": [
            "GET_FAMITEM_SYMBOL $1"
        ],
        "description": "Retrieves the symbol of a family table item."
    },
    "GET_FAMITEM_TYPE": {
        "prefix": "GET_FAMITEM_TYPE",
        "body": [
            "GET_FAMITEM_TYPE $1"
        ],
        "description": "Retrieves the type of a family table item."
    },
    "GET_FAMITEM_VALUE": {
        "prefix": "GET_FAMITEM_VALUE",
        "body": [
            "GET_FAMITEM_VALUE $1"
        ],
        "description": "Retrieve the value of a family table item for a specific instance and stores it to a variable of type parameter."
    },
    "GET_FAMITEMS": {
        "prefix": "GET_FAMITEMS",
        "body": [
            "GET_FAMITEMS $1"
        ],
        "description": "Collects all family table items of a generic model."
    },
    "GET_FEAT_PARAM_DESCRIPTION": {
        "prefix": "GET_FEAT_PARAM_DESCRIPTION",
        "body": [
            "GET_FEAT_PARAM_DESCRIPTION $1"
        ],
        "description": "Collects all family table items of a generic model."
    },
    "GET_FEAT_PARAM_DESIGNATION_STATUS": {
        "prefix": "GET_FEAT_PARAM_DESIGNATION_STATUS",
        "body": [
            "GET_FEAT_PARAM_DESIGNATION_STATUS $1"
        ],
        "description": "Inquiries a Pro/ENGINEER feature or component parameter whether it is designated."
    },
    "GET_FEAT_PARAM_LOCK_STATUS": {
        "prefix": "GET_FEAT_PARAM_LOCK_STATUS",
        "body": [
            "GET_FEAT_PARAM_LOCK_STATUS $1"
        ],
        "description": "Reads the lock status of a Creo feature parameter."
    },
    "GET_FEATURE_DEPENDENCY": {
        "prefix": "GET_FEATURE_DEPENDENCY",
        "body": [
            "GET_FEATURE_DEPENDENCY $1"
        ],
        "description": "Retrieves the dependency setting of a copy geom feature."
    },
    "GET_FEATURE_DEPENDENCY_NAME": {
        "prefix": "GET_FEATURE_DEPENDENCY_NAME",
        "body": [
            "GET_FEATURE_DEPENDENCY_NAME $1"
        ],
        "description": "Retrieves the name of the associated source model to a copy geom feature."
    },
    "GET_FEATURE_DIMS": {
        "prefix": "GET_FEATURE_DIMS",
        "body": [
            "GET_FEATURE_DIMS $1"
        ],
        "description": "Retrieves the dimensions of a feature."
    },
    "GET_FEATURE_FORM_TYPE": {
        "prefix": "GET_FEATURE_FORM_TYPE",
        "body": [
            "GET_FEATURE_FORM_TYPE $1"
        ],
        "description": "GET_FEATURE_FORM_TYPE"
    },
    "GET_FEATURE_FROM_GEOM": {
        "prefix": "GET_FEATURE_FROM_GEOM",
        "body": [
            "GET_FEATURE_FROM_GEOM $1"
        ],
        "description": "Retrieves reference to a feature based on the specified reference to a geometrical element (for example an edge, an axis etc.)"
    },
    "GET_FEATURE_NAME": {
        "prefix": "GET_FEATURE_NAME",
        "body": [
            "GET_FEATURE_NAME $1"
        ],
        "description": "Gets name of a specified feature."
    },
    "GET_FEATURE_NUMBER": {
        "prefix": "GET_FEATURE_NUMBER",
        "body": [
            "GET_FEATURE_NUMBER $1"
        ],
        "description": "Retrieves the feature number as shown in the model tree."
    },
    "GET_FEATURE_STATE": {
        "prefix": "GET_FEATURE_STATE",
        "body": [
            "GET_FEATURE_STATE $1"
        ],
        "description": "Determines if a feature is suppressed or resumed."
    },
    "GET_FEATURE_STATE_EX": {
        "prefix": "GET_FEATURE_STATE_EX",
        "body": [
            "GET_FEATURE_STATE_EX $1"
        ],
        "description": "Determines the state of a feature."
    },
    "GET_FEATURE_SUBTYPE_NAME": {
        "prefix": "GET_FEATURE_SUBTYPE_NAME",
        "body": [
            "GET_FEATURE_SUBTYPE_NAME $1"
        ],
        "description": "Retrieves the subtype name of a feature as it shows up in the model tree in the row Feat Subtype."
    },
    "GET_FEATURE_TYPE": {
        "prefix": "GET_FEATURE_TYPE",
        "body": [
            "GET_FEATURE_TYPE $1"
        ],
        "description": "Retrieves type of a feature"
    },
    "GET_FEATURE_TYPE_NAME": {
        "prefix": "GET_FEATURE_TYPE_NAME",
        "body": [
            "GET_FEATURE_TYPE_NAME $1"
        ],
        "description": "Retrieves the type name of a feature as it shows up in the model tree in the row Feat Type."
    },
    "GET_FEATURE_UPDATE_NOTIFICATION": {
        "prefix": "GET_FEATURE_UPDATE_NOTIFICATION",
        "body": [
            "GET_FEATURE_UPDATE_NOTIFICATION $1"
        ],
        "description": "Retrieves the update notification status of a copy geometry feature. This command requires Creo 3.0 or above. In case the Creo license option ."
    },
    "GET_FILE_SIZE": {
        "prefix": "GET_FILE_SIZE",
        "body": [
            "GET_FILE_SIZE $1"
        ],
        "description": "Determines the size of a file."
    },
    "GET_FILE_TIMESTAMP": {
        "prefix": "GET_FILE_TIMESTAMP",
        "body": [
            "GET_FILE_TIMESTAMP $1"
        ],
        "description": "GET_FILE_TIMESTAMP"
    },
    "GET_FLEXIBLE": {
        "prefix": "GET_FLEXIBLE",
        "body": [
            "GET_FLEXIBLE $1"
        ],
        "description": "Determines if a component is flexible. The function requires Creo 1.0 or above."
    },
    "GET_FLEXIBLE_PREDEFINED": {
        "prefix": "GET_FLEXIBLE_PREDEFINED",
        "body": [
            "GET_FLEXIBLE_PREDEFINED $1"
        ],
        "description": "Determines if a model as predefined varied items for flexibility. This function requires Creo 1.0 or above."
    },
    "GET_GENERAL_MERGE_FEATURE": {
        "prefix": "GET_GENERAL_MERGE_FEATURE",
        "body": [
            "GET_GENERAL_MERGE_FEATURE $1"
        ],
        "description": "Accesses a specific feature of a general merge model."
    },
    "GET_GENERAL_MERGE_FEATURE_NUM": {
        "prefix": "GET_GENERAL_MERGE_FEATURE_NUM",
        "body": [
            "GET_GENERAL_MERGE_FEATURE_NUM $1"
        ],
        "description": "Retrieves the number of features in a general merge model."
    },
    "GET_GEOM_FROM_FEATURE": {
        "prefix": "GET_GEOM_FROM_FEATURE",
        "body": [
            "GET_GEOM_FROM_FEATURE $1"
        ],
        "description": "Retrieves a geometry reference from a feature reference of the specified type."
    },
    "GET_GEOMS_FROM_FEATURE": {
        "prefix": "GET_GEOMS_FROM_FEATURE",
        "body": [
            "GET_GEOMS_FROM_FEATURE $1"
        ],
        "description": "Retrieves all geometry references from a feature reference of the specified type. "
    },
    "GET_GROUP_FEATURE": {
        "prefix": "GET_GROUP_FEATURE",
        "body": [
            "GET_GROUP_FEATURE $1"
        ],
        "description": "Supplies reference to a specific feature of a group."
    },
    "GET_GROUP_FEATURE_NUM": {
        "prefix": "GET_GROUP_FEATURE_NUM",
        "body": [
            "GET_GROUP_FEATURE_NUM $1"
        ],
        "description": "Retrieves number of features in a group."
    },
    "GET_GROUP_HEAD": {
        "prefix": "GET_GROUP_HEAD",
        "body": [
            "GET_GROUP_HEAD $1"
        ],
        "description": "Retrieves the immediate or top-level head of a group member."
    },
    "GET_GTOL_TEXT": {
        "prefix": "GET_GTOL_TEXT",
        "body": [
            "GET_GTOL_TEXT $1"
        ],
        "description": "Reads the text of a geometric tolerance definition of solids or drawings. This command requires Pro/ENGINEER Wildfire 5 or above."
    },
    "GET_GTOL_VALUE": {
        "prefix": "GET_GTOL_VALUE",
        "body": [
            "GET_GTOL_VALUE $1"
        ],
        "description": "GET_GTOL_VALUE"
    },
    "GET_IDENTIFIER": {
        "prefix": "GET_IDENTIFIER",
        "body": [
            "GET_IDENTIFIER $1"
        ],
        "description": "Gets the current session identifier and stores the result to a variable."
    },
    "GET_IDENTIFIER_FROM_REF": {
        "prefix": "GET_IDENTIFIER_FROM_REF",
        "body": [
            "GET_IDENTIFIER_FROM_REF $1"
        ],
        "description": "Retrieves a component engine identifier and stores the result in a variable."
    },
    "GET_INSERT_MODE_POSITION": {
        "prefix": "GET_INSERT_MODE_POSITION",
        "body": [
            "GET_INSERT_MODE_POSITION $1"
        ],
        "description": "In case a model is in insert mode, this commands supplies a reference to the last active feature."
    },
    "GET_INTENT_MEMBERS": {
        "prefix": "GET_INTENT_MEMBERS",
        "body": [
            "GET_INTENT_MEMBERS $1"
        ],
        "description": "Retrieves the references of all members which belong to an intent edge or surface."
    },
    "GET_LAYER_ITEMS": {
        "prefix": "GET_LAYER_ITEMS",
        "body": [
            "GET_LAYER_ITEMS $1"
        ],
        "description": "Collects all items from a layer and stores them in an array."
    },
    "GET_LAYER_STATE_HIDDEN_REFS": {
        "prefix": "GET_LAYER_STATE_HIDDEN_REFS",
        "body": [
            "GET_LAYER_STATE_HIDDEN_REFS $1"
        ],
        "description": "Retrieves all references which are hidden by a distinct layer state. This command requires Creo Parametric 2.0 or above."
    },
    "GET_LAYER_STATE_LAYER_STATUS": {
        "prefix": "GET_LAYER_STATE_LAYER_STATUS",
        "body": [
            "GET_LAYER_STATE_LAYER_STATUS $1"
        ],
        "description": "Retrieves the layer visibility information in a layer state. This command requires Creo Parametric 2.0 or above."
    },
    "GET_LAYER_STATE_LAYERS": {
        "prefix": "GET_LAYER_STATE_LAYERS",
        "body": [
            "GET_LAYER_STATE_LAYERS $1"
        ],
        "description": "Retrieves the names of all layers in a layer state. This command requires Creo Parametric 2.0 or above."
    },
    "GET_LAYER_STATES": {
        "prefix": "GET_LAYER_STATES",
        "body": [
            "GET_LAYER_STATES $1"
        ],
        "description": "Retrieves the names of the layer states of a solid model. This command requires Creo Parametric 2.0 or above."
    },
    "GET_LAYER_STATUS": {
        "prefix": "GET_LAYER_STATUS",
        "body": [
            "GET_LAYER_STATUS $1"
        ],
        "description": "Retrieves the layer visibility information."
    },
    "GET_LAYER_STATUS_EX": {
        "prefix": "GET_LAYER_STATUS_EX",
        "body": [
            "GET_LAYER_STATUS_EX $1"
        ],
        "description": "Retrieves the layer visibility information. Extended version of to show more visibility states."
    },
    "GET_LINE_DATA": {
        "prefix": "GET_LINE_DATA",
        "body": [
            "GET_LINE_DATA $1"
        ],
        "description": "Retrieves the shape information from a linear edge or a curve."
    },
    "GET_MAP_ELEM": {
        "prefix": "GET_MAP_ELEM",
        "body": [
            "GET_MAP_ELEM $1"
        ],
        "description": "Retrieves an element of a ."
    },
    "GET_MAP_SIZE": {
        "prefix": "GET_MAP_SIZE",
        "body": [
            "GET_MAP_SIZE $1"
        ],
        "description": "Determines number of elements in a ."
    },
    "GET_MASS_PROPERTIES": {
        "prefix": "GET_MASS_PROPERTIES",
        "body": [
            "GET_MASS_PROPERTIES $1"
        ],
        "description": "Calculates the mass properties of a part or assembly similar to . In case the coordinate system is from another model, a temporary one will be created for the measurement."
    },
    "GET_MATERIAL": {
        "prefix": "GET_MATERIAL",
        "body": [
            "GET_MATERIAL $1"
        ],
        "description": "Reads the assigned material of a model. In case no material is assigned the result is an empty string."
    },
    "GET_MATERIAL_PROPERTIES": {
        "prefix": "GET_MATERIAL_PROPERTIES",
        "body": [
            "GET_MATERIAL_PROPERTIES $1"
        ],
        "description": "Reads the standard properties of the assigned material of a model."
    },
    "GET_MATERIAL_PROPERTY": {
        "prefix": "GET_MATERIAL_PROPERTY",
        "body": [
            "GET_MATERIAL_PROPERTY $1"
        ],
        "description": "Read a property of the assigned material of a model. This allows also to access custom material properties."
    },
    "GET_MATERIALS": {
        "prefix": "GET_MATERIALS",
        "body": [
            "GET_MATERIALS $1"
        ],
        "description": "Searches for the materials which are stored at a model."
    },
    "GET_MDL_ANNOTATION_PLANE": {
        "prefix": "GET_MDL_ANNOTATION_PLANE",
        "body": [
            "GET_MDL_ANNOTATION_PLANE $1"
        ],
        "description": "Retrieves the standard annotation plane of each model. Custom named annotation plane could not be processed."
    },
    "GET_MDL_DEPENDENCIES": {
        "prefix": "GET_MDL_DEPENDENCIES",
        "body": [
            "GET_MDL_DEPENDENCIES $1"
        ],
        "description": "Determines dependent models."
    },
    "GET_MDL_DIMS": {
        "prefix": "GET_MDL_DIMS",
        "body": [
            "GET_MDL_DIMS $1"
        ],
        "description": "Retrieves the dimensions of a model."
    },
    "GET_MDL_DTL_OPTION": {
        "prefix": "GET_MDL_DTL_OPTION",
        "body": [
            "GET_MDL_DTL_OPTION $1"
        ],
        "description": "Retrieve a specific detail option from a solid model."
    },
    "GET_MDL_DTL_OPTIONS": {
        "prefix": "GET_MDL_DTL_OPTIONS",
        "body": [
            "GET_MDL_DTL_OPTIONS $1"
        ],
        "description": "Retrieves the detail options from a solid model."
    },
    "GET_MDL_EXTENSION": {
        "prefix": "GET_MDL_EXTENSION",
        "body": [
            "GET_MDL_EXTENSION $1"
        ],
        "description": "Retrieves the file extension of a model."
    },
    "GET_MDL_FAILURE_FLAG": {
        "prefix": "GET_MDL_FAILURE_FLAG",
        "body": [
            "GET_MDL_FAILURE_FLAG $1"
        ],
        "description": "Inspects if the model contains any failed feature. In case the Pro/ENGINEER Wildfire 4 or below, the result is always false."
    },
    "GET_MDL_MODIFIED": {
        "prefix": "GET_MDL_MODIFIED",
        "body": [
            "GET_MDL_MODIFIED $1"
        ],
        "description": "Determines if the modification flag of a model is set. This modification flag decides if the model has to be saved."
    },
    "GET_MDL_NAME": {
        "prefix": "GET_MDL_NAME",
        "body": [
            "GET_MDL_NAME $1"
        ],
        "description": "Retrieves name of a specified model."
    },
    "GET_MDL_NOTEBOOK": {
        "prefix": "GET_MDL_NOTEBOOK",
        "body": [
            "GET_MDL_NOTEBOOK $1"
        ],
        "description": "Retrieves the declare notebook of a solid model."
    },
    "GET_MDL_NOTEBOOKS": {
        "prefix": "GET_MDL_NOTEBOOKS",
        "body": [
            "GET_MDL_NOTEBOOKS $1"
        ],
        "description": "Retrieves all declared notebooks of a solid model."
    },
    "GET_MDL_PARAM_DESCRIPTION": {
        "prefix": "GET_MDL_PARAM_DESCRIPTION",
        "body": [
            "GET_MDL_PARAM_DESCRIPTION $1"
        ],
        "description": "Retrieves all declared notebooks of a solid model."
    },
    "GET_MDL_PARAM_DESIGNATION_STATUS": {
        "prefix": "GET_MDL_PARAM_DESIGNATION_STATUS",
        "body": [
            "GET_MDL_PARAM_DESIGNATION_STATUS $1"
        ],
        "description": "Inquiries a Pro/ENGINEER parameter whether it is designated."
    },
    "GET_MDL_PARAM_LOCK_STATUS": {
        "prefix": "GET_MDL_PARAM_LOCK_STATUS",
        "body": [
            "GET_MDL_PARAM_LOCK_STATUS $1"
        ],
        "description": "Reads the lock status of a Creo model parameter."
    },
    "GET_MDL_PATH": {
        "prefix": "GET_MDL_PATH",
        "body": [
            "GET_MDL_PATH $1"
        ],
        "description": "Retrieves the path of a specified model."
    },
    "GET_MDL_REGEN_STATE": {
        "prefix": "GET_MDL_REGEN_STATE",
        "body": [
            "GET_MDL_REGEN_STATE $1"
        ],
        "description": "Retrieves the regeneration state of a solid model."
    },
    "GET_MDL_SESSION_ID": {
        "prefix": "GET_MDL_SESSION_ID",
        "body": [
            "GET_MDL_SESSION_ID $1"
        ],
        "description": "Retrieves the session id of a solid model. This can be used to address models in a relation or for drawing notes."
    },
    "GET_MDL_SUBTYPE": {
        "prefix": "GET_MDL_SUBTYPE",
        "body": [
            "GET_MDL_SUBTYPE $1"
        ],
        "description": "Retrieves the sub type of a model."
    },
    "GET_MDL_TEXTS": {
        "prefix": "GET_MDL_TEXTS",
        "body": [
            "GET_MDL_TEXTS $1"
        ],
        "description": "Searches solid models and drawings for text information with font definitions. In parts and assemblies the sketches from extrusions and curve features are searched for this text information. In drawings it is searched in table texts and notes."
    },
    "GET_MDL_TOL_CLASS": {
        "prefix": "GET_MDL_TOL_CLASS",
        "body": [
            "GET_MDL_TOL_CLASS $1"
        ],
        "description": "Reads the tolerance class of a model."
    },
    "GET_MDL_TOL_STANDARD": {
        "prefix": "GET_MDL_TOL_STANDARD",
        "body": [
            "GET_MDL_TOL_STANDARD $1"
        ],
        "description": "Reads the tolerance standard of a model. The command is supported for Creo 2.0 M100 and above."
    },
    "GET_MDL_TYPE": {
        "prefix": "GET_MDL_TYPE",
        "body": [
            "GET_MDL_TYPE $1"
        ],
        "description": "Retrieves the type of a model."
    },
    "GET_MDL_TYPE_EX": {
        "prefix": "GET_MDL_TYPE_EX",
        "body": [
            "GET_MDL_TYPE_EX $1"
        ],
        "description": "Retrieves the type of the model including imported models with Creo Unite Technology."
    },
    "GET_MDL_VERSION": {
        "prefix": "GET_MDL_VERSION",
        "body": [
            "GET_MDL_VERSION $1"
        ],
        "description": "Retrieves the internal version as an integer value. The version is a number which is incremented after every modification. It is not related to the file name number of Pro/ENGINEER models."
    },
    "GET_MFG_ASM": {
        "prefix": "GET_MFG_ASM",
        "body": [
            "GET_MFG_ASM $1"
        ],
        "description": "Retrieves the associated assembly to a manufacturing assembly. In case the model is not a manufacturing assembly, the command retrieves the same model."
    },
    "GET_MOUSE_POINT": {
        "prefix": "GET_MOUSE_POINT",
        "body": [
            "GET_MOUSE_POINT $1"
        ],
        "description": "Lets the user pick on the screen to return the pick position. The command can be used as well on solid models as on drawings. For solid models the depth is detected from the current view. The left mouse button is used to pick the position. The command can be canceled by the middle mouse button."
    },
    "GET_NAMED_ORIENTATIONS": {
        "prefix": "GET_NAMED_ORIENTATIONS",
        "body": [
            "GET_NAMED_ORIENTATIONS $1"
        ],
        "description": "Retrieves the names of existing orientations from a model."
    },
    "GET_NC_HEAD_TOOL_SETUPS": {
        "prefix": "GET_NC_HEAD_TOOL_SETUPS",
        "body": [
            "GET_NC_HEAD_TOOL_SETUPS $1"
        ],
        "description": "Gets the list of tool setups in a workcell head."
    },
    "GET_NC_OPERATION_CSYS": {
        "prefix": "GET_NC_OPERATION_CSYS",
        "body": [
            "GET_NC_OPERATION_CSYS $1"
        ],
        "description": "Gets the zero point coordinate system for the operation program."
    },
    "GET_NC_OPERATION_STEPS": {
        "prefix": "GET_NC_OPERATION_STEPS",
        "body": [
            "GET_NC_OPERATION_STEPS $1"
        ],
        "description": "Gets the steps of a NC operation."
    },
    "GET_NC_OPERATION_WORKCELL": {
        "prefix": "GET_NC_OPERATION_WORKCELL",
        "body": [
            "GET_NC_OPERATION_WORKCELL $1"
        ],
        "description": "Gets the workcell for which a given operation is defined."
    },
    "GET_NC_STEP_PARAM": {
        "prefix": "GET_NC_STEP_PARAM",
        "body": [
            "GET_NC_STEP_PARAM $1"
        ],
        "description": "Gets the value of a NC step parameter."
    },
    "GET_NC_STEP_TOOL_SETUP": {
        "prefix": "GET_NC_STEP_TOOL_SETUP",
        "body": [
            "GET_NC_STEP_TOOL_SETUP $1"
        ],
        "description": "Gets the tool setup assigned to a NC step feature."
    },
    "GET_NC_WORKCELL_PARAM": {
        "prefix": "GET_NC_WORKCELL_PARAM",
        "body": [
            "GET_NC_WORKCELL_PARAM $1"
        ],
        "description": "Gets the value of a NC workcell parameter."
    },
    "GET_NEXT_MDL_NAME": {
        "prefix": "GET_NEXT_MDL_NAME",
        "body": [
            "GET_NEXT_MDL_NAME $1"
        ],
        "description": "Determines the next available name for a model of a specific type. Since Pro/ENGINEER Wildfire M070 this command also uses the PDMLink auto numbering."
    },
    "GET_NOTE_TEXT": {
        "prefix": "GET_NOTE_TEXT",
        "body": [
            "GET_NOTE_TEXT $1"
        ],
        "description": "Retrieves the text from an existing note."
    },
    "GET_NUM_NC_HEADS": {
        "prefix": "GET_NUM_NC_HEADS",
        "body": [
            "GET_NUM_NC_HEADS $1"
        ],
        "description": "Gets the number of heads in a NC workcell."
    },
    "GET_ORIENTATION_MATRIX": {
        "prefix": "GET_ORIENTATION_MATRIX",
        "body": [
            "GET_ORIENTATION_MATRIX $1"
        ],
        "description": "Retrieves a named view or the current view of a model and stores the value as a matrix."
    },
    "GET_PARAM_TYPE": {
        "prefix": "GET_PARAM_TYPE",
        "body": [
            "GET_PARAM_TYPE $1"
        ],
        "description": "Detects type of an existing ."
    },
    "GET_PATTERN": {
        "prefix": "GET_PATTERN",
        "body": [
            "GET_PATTERN $1"
        ],
        "description": "Retrieves the reference to the pattern based on the reference to a pattern member."
    },
    "GET_PATTERN_MEMBER": {
        "prefix": "GET_PATTERN_MEMBER",
        "body": [
            "GET_PATTERN_MEMBER $1"
        ],
        "description": "Retrieves the reference to a specified pattern member of the group. The input reference can be any feature inside this pattern."
    },
    "GET_PATTERN_MEMBER_NUM": {
        "prefix": "GET_PATTERN_MEMBER_NUM",
        "body": [
            "GET_PATTERN_MEMBER_NUM $1"
        ],
        "description": "Retrieves the number of pattern members. The input reference can be any feature inside this pattern."
    },
    "GET_PATTERN_TYPE": {
        "prefix": "GET_PATTERN_TYPE",
        "body": [
            "GET_PATTERN_TYPE $1"
        ],
        "description": "Retrieves the pattern type of a pattern."
    },
    "GET_PDM_MODIFICATION_STATE": {
        "prefix": "GET_PDM_MODIFICATION_STATE",
        "body": [
            "GET_PDM_MODIFICATION_STATE $1"
        ],
        "description": "Determines if an object is modified locally or in the workspace. This could be used to determine if a model should be uploaded. The command requires Creo Parametric 2.0 or above."
    },
    "GET_PDM_STATE": {
        "prefix": "GET_PDM_STATE",
        "body": [
            "GET_PDM_STATE $1"
        ],
        "description": "Determines by a reference whether a model is downloaded, checked out or no PDM object for Intralink 8.0 (and above) / PDMLink."
    },
    "GET_PDM_STATE_BY_NAME": {
        "prefix": "GET_PDM_STATE_BY_NAME",
        "body": [
            "GET_PDM_STATE_BY_NAME $1"
        ],
        "description": "Determines by name whether a model is downloaded, checked out or no PDM object for Intralink 8.0 (and above) / PDMLink."
    },
    "GET_PDM_STATE_BY_NAME_EX": {
        "prefix": "GET_PDM_STATE_BY_NAME_EX",
        "body": [
            "GET_PDM_STATE_BY_NAME_EX $1"
        ],
        "description": "Determines extended PDM information by name."
    },
    "GET_PDM_STATE_EX": {
        "prefix": "GET_PDM_STATE_EX",
        "body": [
            "GET_PDM_STATE_EX $1"
        ],
        "description": "Determines extended PDM Information by a reference."
    },
    "GET_PDM_STORAGE": {
        "prefix": "GET_PDM_STORAGE",
        "body": [
            "GET_PDM_STORAGE $1"
        ],
        "description": "Determines if the storage place of a model given by name for Intralink 8.0 (and above) / PDMLink."
    },
    "GET_PIPELINE": {
        "prefix": "GET_PIPELINE",
        "body": [
            "GET_PIPELINE $1"
        ],
        "description": "Retrieves the pipeline feature of a model."
    },
    "GET_PNT_COORD": {
        "prefix": "GET_PNT_COORD",
        "body": [
            "GET_PNT_COORD $1"
        ],
        "description": "Determines coordinates of a point. "
    },
    "GET_PNT_INDEX": {
        "prefix": "GET_PNT_INDEX",
        "body": [
            "GET_PNT_INDEX $1"
        ],
        "description": "Determines the index of a point inside a point feature."
    },
    "GET_PREDEFINED_FLEXIBLE_ITEMS": {
        "prefix": "GET_PREDEFINED_FLEXIBLE_ITEMS",
        "body": [
            "GET_PREDEFINED_FLEXIBLE_ITEMS $1"
        ],
        "description": "Retrieves an array of predefined flexible items. References are used for features and strings for parameters and dimensions. This function requires Creo 1.0 or above."
    },
    "GET_PRO_PROGRAM_INPUT": {
        "prefix": "GET_PRO_PROGRAM_INPUT",
        "body": [
            "GET_PRO_PROGRAM_INPUT $1"
        ],
        "description": "Retrieves the input section information of Pro/PROGRAM from a model."
    },
    "GET_PROE_DATECODE": {
        "prefix": "GET_PROE_DATECODE",
        "body": [
            "GET_PROE_DATECODE $1"
        ],
        "description": "GET_PROE_DATECODE"
    },
    "GET_PROE_MODE": {
        "prefix": "GET_PROE_MODE",
        "body": [
            "GET_PROE_MODE $1"
        ],
        "description": "Retrieves the mode in which Pro/ENGINEER / Creo is currently running."
    },
    "GET_PROE_VERSION": {
        "prefix": "GET_PROE_VERSION",
        "body": [
            "GET_PROE_VERSION $1"
        ],
        "description": "Retrieves the version information from the current Pro/ENGINEER / Creo version as number and as string."
    },
    "GET_QUILT_SURFACES": {
        "prefix": "GET_QUILT_SURFACES",
        "body": [
            "GET_QUILT_SURFACES $1"
        ],
        "description": "Retrieves the references of all surfaces which belong to the quilt."
    },
    "GET_REF_ACP_IDS": {
        "prefix": "GET_REF_ACP_IDS",
        "body": [
            "GET_REF_ACP_IDS $1"
        ],
        "description": "Retrieves the ids of the assembly component path of a reference."
    },
    "GET_REF_ACP_OWNER": {
        "prefix": "GET_REF_ACP_OWNER",
        "body": [
            "GET_REF_ACP_OWNER $1"
        ],
        "description": "Retrieves the owner of the assembly component path of a reference."
    },
    "GET_REF_ANNOTATION_PLANE": {
        "prefix": "GET_REF_ANNOTATION_PLANE",
        "body": [
            "GET_REF_ANNOTATION_PLANE $1"
        ],
        "description": "Retrieves the annotation plane of a reference to an annotation."
    },
    "GET_REF_CHILD": {
        "prefix": "GET_REF_CHILD",
        "body": [
            "GET_REF_CHILD $1"
        ],
        "description": "Gets the child model of a specified reference by declaring the path. The path is relative to the owner of the specified reference."
    },
    "GET_REF_COMMON_PARENT": {
        "prefix": "GET_REF_COMMON_PARENT",
        "body": [
            "GET_REF_COMMON_PARENT $1"
        ],
        "description": "Retrieves the most immediate model which includes all specified references."
    },
    "GET_REF_DEPEND_CHILD": {
        "prefix": "GET_REF_DEPEND_CHILD",
        "body": [
            "GET_REF_DEPEND_CHILD $1"
        ],
        "description": "Determines child feature of a specified reference."
    },
    "GET_REF_DEPEND_CHILD_EX": {
        "prefix": "GET_REF_DEPEND_CHILD_EX",
        "body": [
            "GET_REF_DEPEND_CHILD_EX $1"
        ],
        "description": "Determines child feature of a specified reference and provides detailed information. This command extends the old command."
    },
    "GET_REF_DEPEND_CHILDREN": {
        "prefix": "GET_REF_DEPEND_CHILDREN",
        "body": [
            "GET_REF_DEPEND_CHILDREN $1"
        ],
        "description": "Determines child features of a specified reference."
    },
    "GET_REF_DEPEND_CHILDREN_EX": {
        "prefix": "GET_REF_DEPEND_CHILDREN_EX",
        "body": [
            "GET_REF_DEPEND_CHILDREN_EX $1"
        ],
        "description": "Determines child features of a specified reference and provides detailed information. This command extends the old command."
    },
    "GET_REF_DEPEND_PARENT": {
        "prefix": "GET_REF_DEPEND_PARENT",
        "body": [
            "GET_REF_DEPEND_PARENT $1"
        ],
        "description": "Determines parent feature of a specified reference."
    },
    "GET_REF_DEPEND_PARENT_EX": {
        "prefix": "GET_REF_DEPEND_PARENT_EX",
        "body": [
            "GET_REF_DEPEND_PARENT_EX $1"
        ],
        "description": "Determines parent feature of a specified reference and provides detailed information. This command extends the old command."
    },
    "GET_REF_DEPEND_PARENTS": {
        "prefix": "GET_REF_DEPEND_PARENTS",
        "body": [
            "GET_REF_DEPEND_PARENTS $1"
        ],
        "description": "Determines parent features of a specified reference."
    },
    "GET_REF_DEPEND_PARENTS_EX": {
        "prefix": "GET_REF_DEPEND_PARENTS_EX",
        "body": [
            "GET_REF_DEPEND_PARENTS_EX $1"
        ],
        "description": "Determines parent features of a specified reference. This command extends the old command."
    },
    "GET_REF_FAMINSTANCE": {
        "prefix": "GET_REF_FAMINSTANCE",
        "body": [
            "GET_REF_FAMINSTANCE $1"
        ],
        "description": "Retrieves reference to a family table instance item based on a specific reference and the instance name."
    },
    "GET_REF_GENERIC": {
        "prefix": "GET_REF_GENERIC",
        "body": [
            "GET_REF_GENERIC $1"
        ],
        "description": "Retrieves reference to the generic item based on a specified reference to a family table instance item."
    },
    "GET_REF_ID": {
        "prefix": "GET_REF_ID",
        "body": [
            "GET_REF_ID $1"
        ],
        "description": "Gets Creo Elements/Pro id of a specified reference."
    },
    "GET_REF_NAME": {
        "prefix": "GET_REF_NAME",
        "body": [
            "GET_REF_NAME $1"
        ],
        "description": "Gets name of a specified reference."
    },
    "GET_REF_OWNER": {
        "prefix": "GET_REF_OWNER",
        "body": [
            "GET_REF_OWNER $1"
        ],
        "description": "Gets the owner of a specified reference. For features and geometrical entities the owner is the part or assembly which contains them. The owner of a part or assembly is the model itself."
    },
    "GET_REF_PARAM_DESCRIPTION": {
        "prefix": "GET_REF_PARAM_DESCRIPTION",
        "body": [
            "GET_REF_PARAM_DESCRIPTION $1"
        ],
        "description": "Reads the description of a Creo reference parameter."
    },
    "GET_REF_PARAM_LOCK_STATUS": {
        "prefix": "GET_REF_PARAM_LOCK_STATUS",
        "body": [
            "GET_REF_PARAM_LOCK_STATUS $1"
        ],
        "description": "Reads the lock status of a Creo reference parameter."
    },
    "GET_REF_PARENT": {
        "prefix": "GET_REF_PARENT",
        "body": [
            "GET_REF_PARENT $1"
        ],
        "description": "Gets the parent of the owner of a specified reference."
    },
    "GET_REF_POS": {
        "prefix": "GET_REF_POS",
        "body": [
            "GET_REF_POS $1"
        ],
        "description": "Retrieves position of a geometrical reference. If the reference was selected the pick position of the mouse is supplied. In case the reference was searched the result will be the center position."
    },
    "GET_REF_STATE": {
        "prefix": "GET_REF_STATE",
        "body": [
            "GET_REF_STATE $1"
        ],
        "description": "Reports the current state of a reference by a string parameter. For example a state can be active or frozen."
    },
    "GET_REF_TYPE": {
        "prefix": "GET_REF_TYPE",
        "body": [
            "GET_REF_TYPE $1"
        ],
        "description": "Gets type of a specified reference."
    },
    "GET_REF_VERTEX": {
        "prefix": "GET_REF_VERTEX",
        "body": [
            "GET_REF_VERTEX $1"
        ],
        "description": "Gets a vertex to a specified reference to an edge, curve or composite curve."
    },
    "GET_REGISTRY_STRING": {
        "prefix": "GET_REGISTRY_STRING",
        "body": [
            "GET_REGISTRY_STRING $1"
        ],
        "description": "Retrieves text from a registry value. In case the registry value has a different data type, the content is converted to a string."
    },
    "GET_REGISTRY_STRINGS": {
        "prefix": "GET_REGISTRY_STRINGS",
        "body": [
            "GET_REGISTRY_STRINGS $1"
        ],
        "description": "Retrieves an array of text from the a registry value. In case the registry value has a different data type, the content of the array is converted to strings."
    },
    "GET_RELATIONS": {
        "prefix": "GET_RELATIONS",
        "body": [
            "GET_RELATIONS $1"
        ],
        "description": "Gets all relations of a Creo Elements/Pro model, component or feature."
    },
    "GET_RELATIONS_UNIT_SENSITIVE": {
        "prefix": "GET_RELATIONS_UNIT_SENSITIVE",
        "body": [
            "GET_RELATIONS_UNIT_SENSITIVE $1"
        ],
        "description": "Retrieves the sensitivity state of the model relations. This command requires Creo 2.0 M110 or above."
    },
    "GET_ROW_ARRAY": {
        "prefix": "GET_ROW_ARRAY",
        "body": [
            "GET_ROW_ARRAY $1"
        ],
        "description": "Retrieves a specified row of an array with sub-arrays to get an array with plain elements. This is similar to receiving a row vector from a matrix."
    },
    "GET_SA_VERSION": {
        "prefix": "GET_SA_VERSION",
        "body": [
            "GET_SA_VERSION $1"
        ],
        "description": "Retrieves the version release and datecode information from the current SmartAssembly build."
    },
    "GET_SELBUFFER": {
        "prefix": "GET_SELBUFFER",
        "body": [
            "GET_SELBUFFER $1"
        ],
        "description": "Retrieves all references from the selection buffer."
    },
    "GET_SERVER": {
        "prefix": "GET_SERVER",
        "body": [
            "GET_SERVER $1"
        ],
        "description": "Retrieves the names of the active server or of an offline server."
    },
    "GET_SERVERS": {
        "prefix": "GET_SERVERS",
        "body": [
            "GET_SERVERS $1"
        ],
        "description": "Retrieves the names of all servers, even if they are offline."
    },
    "GET_SESSION_MDLS": {
        "prefix": "GET_SESSION_MDLS",
        "body": [
            "GET_SESSION_MDLS $1"
        ],
        "description": "Retrieves and array of all models which are currently in session."
    },
    "GET_SIMPREP_DEFAULT_ACTION": {
        "prefix": "GET_SIMPREP_DEFAULT_ACTION",
        "body": [
            "GET_SIMPREP_DEFAULT_ACTION $1"
        ],
        "description": "Determines the default action of an existing simplified representation."
    },
    "GET_SMT_BEND_EDGE_CHILD": {
        "prefix": "GET_SMT_BEND_EDGE_CHILD",
        "body": [
            "GET_SMT_BEND_EDGE_CHILD $1"
        ],
        "description": "Determines the most recent child edge of the specified bend / unbend operation."
    },
    "GET_SMT_BEND_EDGE_PARENT": {
        "prefix": "GET_SMT_BEND_EDGE_PARENT",
        "body": [
            "GET_SMT_BEND_EDGE_PARENT $1"
        ],
        "description": "Determines the most recent parent edge of the specified bend / unbend operation."
    },
    "GET_SMT_BEND_SURFACE_CHILD": {
        "prefix": "GET_SMT_BEND_SURFACE_CHILD",
        "body": [
            "GET_SMT_BEND_SURFACE_CHILD $1"
        ],
        "description": "Determines the most recent child surface of the specified bend / unbend surface."
    },
    "GET_SMT_BEND_SURFACE_PARENT": {
        "prefix": "GET_SMT_BEND_SURFACE_PARENT",
        "body": [
            "GET_SMT_BEND_SURFACE_PARENT $1"
        ],
        "description": "Determines the most recent parent surface of the specified bend / unbend surface."
    },
    "GET_SMT_BEND_SURFACE_PROPS": {
        "prefix": "GET_SMT_BEND_SURFACE_PROPS",
        "body": [
            "GET_SMT_BEND_SURFACE_PROPS $1"
        ],
        "description": "Determines the properties of a bend surface."
    },
    "GET_SMT_EDGE_OPPOSITE": {
        "prefix": "GET_SMT_EDGE_OPPOSITE",
        "body": [
            "GET_SMT_EDGE_OPPOSITE $1"
        ],
        "description": "Determines the opposite edge of a sheet metal Model. The function provides the white side if the green was supplied and vice versa. For any other references the function will fail."
    },
    "GET_SMT_SURFACE_OPPOSITE": {
        "prefix": "GET_SMT_SURFACE_OPPOSITE",
        "body": [
            "GET_SMT_SURFACE_OPPOSITE $1"
        ],
        "description": "Determines the opposite surface of a sheet metal surface. The function provides the white side if the green was supplied and vice versa. For any other references the function will fail."
    },
    "GET_SMT_SURFACE_TYPE": {
        "prefix": "GET_SMT_SURFACE_TYPE",
        "body": [
            "GET_SMT_SURFACE_TYPE $1"
        ],
        "description": "Gets the type of a sheet metal surface."
    },
    "GET_STOPWATCH_TIME": {
        "prefix": "GET_STOPWATCH_TIME",
        "body": [
            "GET_STOPWATCH_TIME $1"
        ],
        "description": "Gets the current time of the stopwatch."
    },
    "GET_SURFACE_AT_POS": {
        "prefix": "GET_SURFACE_AT_POS",
        "body": [
            "GET_SURFACE_AT_POS $1"
        ],
        "description": "Determines the surface among an array of surfaces which contains the specified position."
    },
    "GET_SURFACE_CONTOUR": {
        "prefix": "GET_SURFACE_CONTOUR",
        "body": [
            "GET_SURFACE_CONTOUR $1"
        ],
        "description": "Retrieves the information about one contour of a surface."
    },
    "GET_SURFACE_CONTOURS": {
        "prefix": "GET_SURFACE_CONTOURS",
        "body": [
            "GET_SURFACE_CONTOURS $1"
        ],
        "description": "Retrieves the information about all contours of a surface."
    },
    "GET_SURFACE_NORM": {
        "prefix": "GET_SURFACE_NORM",
        "body": [
            "GET_SURFACE_NORM $1"
        ],
        "description": "Determines the normal vector on a surface. If the surface was selected, the normal vector is determined in the selection position. Otherwise the center point is used."
    },
    "GET_SURFACE_QUILT": {
        "prefix": "GET_SURFACE_QUILT",
        "body": [
            "GET_SURFACE_QUILT $1"
        ],
        "description": "Retrieves the reference to a quilt from a surface."
    },
    "GET_SURFACE_REV_AXIS": {
        "prefix": "GET_SURFACE_REV_AXIS",
        "body": [
            "GET_SURFACE_REV_AXIS $1"
        ],
        "description": "Retrieves the reference to an axis from a cylinder or cone surface reference."
    },
    "GET_SURFACE_SETUP_TYPE": {
        "prefix": "GET_SURFACE_SETUP_TYPE",
        "body": [
            "GET_SURFACE_SETUP_TYPE $1"
        ],
        "description": "Gets setup type of a specified reference."
    },
    "GET_SURFACE_TYPE": {
        "prefix": "GET_SURFACE_TYPE",
        "body": [
            "GET_SURFACE_TYPE $1"
        ],
        "description": "Gets geometrical type of a specified surface."
    },
    "GET_SURFACES_AT_POS": {
        "prefix": "GET_SURFACES_AT_POS",
        "body": [
            "GET_SURFACES_AT_POS $1"
        ],
        "description": "Determines the surfaces among an array of surfaces which contains the specified position."
    },
    "GET_SURFFINISH_VALUE": {
        "prefix": "GET_SURFFINISH_VALUE",
        "body": [
            "GET_SURFFINISH_VALUE $1"
        ],
        "description": "Retrieves the value from a surface finish created by a symbol from the variable text in . In case variable text does not exists an error occurs."
    },
    "GET_SYMBOL_GROUP_EXCLUSIVE": {
        "prefix": "GET_SYMBOL_GROUP_EXCLUSIVE",
        "body": [
            "GET_SYMBOL_GROUP_EXCLUSIVE $1"
        ],
        "description": "Examines if a symbol group is exclusive or independent."
    },
    "GET_SYMBOL_GROUP_SHOWN": {
        "prefix": "GET_SYMBOL_GROUP_SHOWN",
        "body": [
            "GET_SYMBOL_GROUP_SHOWN $1"
        ],
        "description": "Examines if a symbol group is visible or not."
    },
    "GET_SYMBOL_NAME": {
        "prefix": "GET_SYMBOL_NAME",
        "body": [
            "GET_SYMBOL_NAME $1"
        ],
        "description": "Retrieves the name of a symbol."
    },
    "GET_SYMBOL_POS": {
        "prefix": "GET_SYMBOL_POS",
        "body": [
            "GET_SYMBOL_POS $1"
        ],
        "description": "Retrieves the position of a symbol."
    },
    "GET_SYMBOL_STRING": {
        "prefix": "GET_SYMBOL_STRING",
        "body": [
            "GET_SYMBOL_STRING $1"
        ],
        "description": "Retrieves character symbol encodings to be placed on notes or geometric tolerances. This command requires Creo 4.0 or above."
    },
    "GET_SYMBOL_VAR_TEXT": {
        "prefix": "GET_SYMBOL_VAR_TEXT",
        "body": [
            "GET_SYMBOL_VAR_TEXT $1"
        ],
        "description": "GET_SYMBOL_VAR_TEXT"
    },
    "GET_TAB_LINE_NUM": {
        "prefix": "GET_TAB_LINE_NUM",
        "body": [
            "GET_TAB_LINE_NUM $1"
        ],
        "description": "Retrieves the current line number of the program file which is processed."
    },
    "GET_TAB_NAME": {
        "prefix": "GET_TAB_NAME",
        "body": [
            "GET_TAB_NAME $1"
        ],
        "description": "Retrieves the name of the current program file which is processed."
    },
    "GET_TAB_STACK": {
        "prefix": "GET_TAB_STACK",
        "body": [
            "GET_TAB_STACK $1"
        ],
        "description": "Retrieves the call stack for the current program file."
    },
    "GET_TAB_STACK_DEPTH": {
        "prefix": "GET_TAB_STACK_DEPTH",
        "body": [
            "GET_TAB_STACK_DEPTH $1"
        ],
        "description": "Retrieves the depth of the current call stack."
    },
    "GET_TBLPATTERN_DATA": {
        "prefix": "GET_TBLPATTERN_DATA",
        "body": [
            "GET_TBLPATTERN_DATA $1"
        ],
        "description": "Reads data of a table pattern in an array."
    },
    "GET_TBLPATTERN_TABLES": {
        "prefix": "GET_TBLPATTERN_TABLES",
        "body": [
            "GET_TBLPATTERN_TABLES $1"
        ],
        "description": "Retrieves the names of the table pattern tables in an array."
    },
    "GET_TEXTURE_PLACEMENT_PROPS": {
        "prefix": "GET_TEXTURE_PLACEMENT_PROPS",
        "body": [
            "GET_TEXTURE_PLACEMENT_PROPS $1"
        ],
        "description": "Gets the texture placement properties of assemblies, parts, components and surfaces."
    },
    "GET_TEXTURE_PROPS": {
        "prefix": "GET_TEXTURE_PROPS",
        "body": [
            "GET_TEXTURE_PROPS $1"
        ],
        "description": "Gets the texture properties of assemblies, parts, components and surfaces."
    },
    "GET_TIME_STRING": {
        "prefix": "GET_TIME_STRING",
        "body": [
            "GET_TIME_STRING $1"
        ],
        "description": "Retrieves time and date as a string from the operation system."
    },
    "GET_TOPLEVEL_ASMS": {
        "prefix": "GET_TOPLEVEL_ASMS",
        "body": [
            "GET_TOPLEVEL_ASMS $1"
        ],
        "description": "Determines the assemblies from an given array of models which are not included in another assembly."
    },
    "GET_TOPLEVEL_MDLS": {
        "prefix": "GET_TOPLEVEL_MDLS",
        "body": [
            "GET_TOPLEVEL_MDLS $1"
        ],
        "description": "Determines the parts and assemblies from an given array of models which are not included in another assembly."
    },
    "GET_TRANSLATION": {
        "prefix": "GET_TRANSLATION",
        "body": [
            "GET_TRANSLATION $1"
        ],
        "description": "Receives the translation strings from according to the specified path and language. Percentage signs can be used as placeholders for variables."
    },
    "GET_UDF_DATA": {
        "prefix": "GET_UDF_DATA",
        "body": [
            "GET_UDF_DATA $1"
        ],
        "description": "Retrieves the data from a UDF () file."
    },
    "GET_UNIT_FORCE": {
        "prefix": "GET_UNIT_FORCE",
        "body": [
            "GET_UNIT_FORCE $1"
        ],
        "description": "Reads the current unit for force from a model."
    },
    "GET_UNIT_LENGTH": {
        "prefix": "GET_UNIT_LENGTH",
        "body": [
            "GET_UNIT_LENGTH $1"
        ],
        "description": "Reads the current unit for length from a model."
    },
    "GET_UNIT_MASS": {
        "prefix": "GET_UNIT_MASS",
        "body": [
            "GET_UNIT_MASS $1"
        ],
        "description": "Reads the current unit for mass from a model."
    },
    "GET_UNIT_SYSTEM": {
        "prefix": "GET_UNIT_SYSTEM",
        "body": [
            "GET_UNIT_SYSTEM $1"
        ],
        "description": "Reads the current unit system from a model."
    },
    "GET_UNIT_TEMPERATURE": {
        "prefix": "GET_UNIT_TEMPERATURE",
        "body": [
            "GET_UNIT_TEMPERATURE $1"
        ],
        "description": "Reads the current unit for temperature from a model."
    },
    "GET_UNIT_TIME": {
        "prefix": "GET_UNIT_TIME",
        "body": [
            "GET_UNIT_TIME $1"
        ],
        "description": "Reads the current unit for time from a model."
    },
    "GET_VARIABLE_TYPE": {
        "prefix": "GET_VARIABLE_TYPE",
        "body": [
            "GET_VARIABLE_TYPE $1"
        ],
        "description": "Detects type of an existing . "
    },
    "GET_VARIED_ITEMS": {
        "prefix": "GET_VARIED_ITEMS",
        "body": [
            "GET_VARIED_ITEMS $1"
        ],
        "description": "Retrieves an array of varied items. References are used for features and strings for parameters and dimensions. This function requires Creo 1.0 or above."
    },
    "GET_WORKING_DIRECTORY": {
        "prefix": "GET_WORKING_DIRECTORY",
        "body": [
            "GET_WORKING_DIRECTORY $1"
        ],
        "description": "Retrieves the information of the current working directory and stores it to a variable."
    },
    "GET_WORKSPACE_CONTEXT": {
        "prefix": "GET_WORKSPACE_CONTEXT",
        "body": [
            "GET_WORKSPACE_CONTEXT $1"
        ],
        "description": "Retrieves the of context of a specified workspace of the current PDMLink session."
    },
    "GET_WORKSPACES": {
        "prefix": "GET_WORKSPACES",
        "body": [
            "GET_WORKSPACES $1"
        ],
        "description": "Retrieves the names of all workspaces of the current PDMLink session. In case no workspace is available, the results is an empty array."
    },
    "GET_XSEC": {
        "prefix": "GET_XSEC",
        "body": [
            "GET_XSEC $1"
        ],
        "description": "Retrieve a cross section from a solid model. This command is only available for Creo 2.0 and above."
    },
    "GET_XSEC_PROPERTIES": {
        "prefix": "GET_XSEC_PROPERTIES",
        "body": [
            "GET_XSEC_PROPERTIES $1"
        ],
        "description": "Calculates the cross section properties of a planar section similar to . In case the coordinate system is from another model, a temporary one will be created for the measurement."
    },
    "GET_XSEC_TYPE": {
        "prefix": "GET_XSEC_TYPE",
        "body": [
            "GET_XSEC_TYPE $1"
        ],
        "description": "GET_XSEC_TYPE"
    },
    "GET_XSECS": {
        "prefix": "GET_XSECS",
        "body": [
            "GET_XSECS $1"
        ],
        "description": "Retrieve cross sections from a solid model. This command is only available for Creo 2.0 and above."
    },
    "GET_ZOOM_POS": {
        "prefix": "GET_ZOOM_POS",
        "body": [
            "GET_ZOOM_POS $1"
        ],
        "description": "GET_ZOOM_POS"
    },
    "GLOBAL_PICTURE": {
        "prefix": "GLOBAL_PICTURE",
        "body": [
            "GLOBAL_PICTURE $1"
        ],
        "description": "Specifies an gif image to display in the dialog box. In case the configuration option IMAGE_GRAPHICS is set to GDIPLUS, also bmp, jpeg and tiff images can be used."
    },
    "GOOGLEAPI_LOGIN": {
        "prefix": "GOOGLEAPI_LOGIN",
        "body": [
            "GOOGLEAPI_LOGIN $1"
        ],
        "description": "GOOGLEAPI_LOGIN"
    },
    "GOOGLEAPI_LOGOUT": {
        "prefix": "GOOGLEAPI_LOGOUT",
        "body": [
            "GOOGLEAPI_LOGOUT $1"
        ],
        "description": "GOOGLEAPI_LOGOUT"
    },
    "GOOGLEAPI_REGISTER_APPLICATION": {
        "prefix": "GOOGLEAPI_REGISTER_APPLICATION",
        "body": [
            "GOOGLEAPI_REGISTER_APPLICATION $1"
        ],
        "description": "GOOGLEAPI_REGISTER_APPLICATION"
    },
    "GOOGLEAPI_UNREGISTER_APPLICATION": {
        "prefix": "GOOGLEAPI_UNREGISTER_APPLICATION",
        "body": [
            "GOOGLEAPI_UNREGISTER_APPLICATION $1"
        ],
        "description": "GOOGLEAPI_UNREGISTER_APPLICATION"
    },
    "GOOGLESHEETS_CLEAR_BUFFER": {
        "prefix": "GOOGLESHEETS_CLEAR_BUFFER",
        "body": [
            "GOOGLESHEETS_CLEAR_BUFFER $1"
        ],
        "description": "GOOGLESHEETS_CLEAR_BUFFER"
    },
    "GOOGLESHEETS_CLEAR_CONTENT": {
        "prefix": "GOOGLESHEETS_CLEAR_CONTENT",
        "body": [
            "GOOGLESHEETS_CLEAR_CONTENT $1"
        ],
        "description": "GOOGLESHEETS_CLEAR_CONTENT"
    },
    "GOOGLESHEETS_CREATE_SHEET": {
        "prefix": "GOOGLESHEETS_CREATE_SHEET",
        "body": [
            "GOOGLESHEETS_CREATE_SHEET $1"
        ],
        "description": "GOOGLESHEETS_CREATE_SHEET"
    },
    "GOOGLESHEETS_GET_ACTIVE_RANGE": {
        "prefix": "GOOGLESHEETS_GET_ACTIVE_RANGE",
        "body": [
            "GOOGLESHEETS_GET_ACTIVE_RANGE $1"
        ],
        "description": "GOOGLESHEETS_GET_ACTIVE_RANGE"
    },
    "GOOGLESHEETS_GET_SHEET_NAME": {
        "prefix": "GOOGLESHEETS_GET_SHEET_NAME",
        "body": [
            "GOOGLESHEETS_GET_SHEET_NAME $1"
        ],
        "description": "GOOGLESHEETS_GET_SHEET_NAME"
    },
    "GOOGLESHEETS_GET_SHEET_NAMES": {
        "prefix": "GOOGLESHEETS_GET_SHEET_NAMES",
        "body": [
            "GOOGLESHEETS_GET_SHEET_NAMES $1"
        ],
        "description": "GOOGLESHEETS_GET_SHEET_NAMES"
    },
    "GOOGLESHEETS_GET_STRING": {
        "prefix": "GOOGLESHEETS_GET_STRING",
        "body": [
            "GOOGLESHEETS_GET_STRING $1"
        ],
        "description": "GOOGLESHEETS_GET_STRING"
    },
    "GOOGLESHEETS_GET_STRING_BUFFER": {
        "prefix": "GOOGLESHEETS_GET_STRING_BUFFER",
        "body": [
            "GOOGLESHEETS_GET_STRING_BUFFER $1"
        ],
        "description": "GOOGLESHEETS_GET_STRING_BUFFER"
    },
    "GOOGLESHEETS_GET_STRINGS": {
        "prefix": "GOOGLESHEETS_GET_STRINGS",
        "body": [
            "GOOGLESHEETS_GET_STRINGS $1"
        ],
        "description": "GOOGLESHEETS_GET_STRINGS"
    },
    "GOOGLESHEETS_GET_VALUE": {
        "prefix": "GOOGLESHEETS_GET_VALUE",
        "body": [
            "GOOGLESHEETS_GET_VALUE $1"
        ],
        "description": "GOOGLESHEETS_GET_VALUE"
    },
    "GOOGLESHEETS_GET_VALUE_BUFFER": {
        "prefix": "GOOGLESHEETS_GET_VALUE_BUFFER",
        "body": [
            "GOOGLESHEETS_GET_VALUE_BUFFER $1"
        ],
        "description": "GOOGLESHEETS_GET_VALUE_BUFFER"
    },
    "GOOGLESHEETS_GET_VALUES": {
        "prefix": "GOOGLESHEETS_GET_VALUES",
        "body": [
            "GOOGLESHEETS_GET_VALUES $1"
        ],
        "description": "GOOGLESHEETS_GET_VALUES"
    },
    "GOOGLESHEETS_NEW_DOCUMENT": {
        "prefix": "GOOGLESHEETS_NEW_DOCUMENT",
        "body": [
            "GOOGLESHEETS_NEW_DOCUMENT $1"
        ],
        "description": "GOOGLESHEETS_NEW_DOCUMENT"
    },
    "GOOGLESHEETS_SET_VALUE": {
        "prefix": "GOOGLESHEETS_SET_VALUE",
        "body": [
            "GOOGLESHEETS_SET_VALUE $1"
        ],
        "description": "GOOGLESHEETS_SET_VALUE"
    },
    "GOOGLESHEETS_SET_VALUE_BUFFER": {
        "prefix": "GOOGLESHEETS_SET_VALUE_BUFFER",
        "body": [
            "GOOGLESHEETS_SET_VALUE_BUFFER $1"
        ],
        "description": "GOOGLESHEETS_SET_VALUE_BUFFER"
    },
    "GOOGLESHEETS_SET_VALUES": {
        "prefix": "GOOGLESHEETS_SET_VALUES",
        "body": [
            "GOOGLESHEETS_SET_VALUES $1"
        ],
        "description": "GOOGLESHEETS_SET_VALUES"
    },
    "GOOGLESHEETS_UPDATE_BUFFER": {
        "prefix": "GOOGLESHEETS_UPDATE_BUFFER",
        "body": [
            "GOOGLESHEETS_UPDATE_BUFFER $1"
        ],
        "description": "GOOGLESHEETS_UPDATE_BUFFER"
    },
    "GROUP_FEATURES": {
        "prefix": "GROUP_FEATURES",
        "body": [
            "GROUP_FEATURES $1"
        ],
        "description": "Group features which are specified in an array."
    },
    "HIDE": {
        "prefix": "HIDE",
        "body": [
            "HIDE $1"
        ],
        "description": "Hides a feature. This command requires Creo Elements/Pro Wildfire 4 or above."
    },
    "HIGHLIGHT_REF": {
        "prefix": "HIGHLIGHT_REF",
        "body": [
            "HIGHLIGHT_REF $1"
        ],
        "description": "Highlights a reference in Creo Elements/Pro."
    },
    "IMPORT_FEATURE": {
        "prefix": "IMPORT_FEATURE",
        "body": [
            "IMPORT_FEATURE $1"
        ],
        "description": "Imports geometry as a Creo Elements/Pro feature like ."
    },
    "IMPORT_MDL": {
        "prefix": "IMPORT_MDL",
        "body": [
            "IMPORT_MDL $1"
        ],
        "description": "Imports geometry as a Creo Elements/Pro model like "
    },
    "IMPORT_NC_TOOL_XML": {
        "prefix": "IMPORT_NC_TOOL_XML",
        "body": [
            "IMPORT_NC_TOOL_XML $1"
        ],
        "description": "Imports a NC tool definition from a XML file and assigns it to the active workcell."
    },
    "IMPORT_PRO_PROGRAM": {
        "prefix": "IMPORT_PRO_PROGRAM",
        "body": [
            "IMPORT_PRO_PROGRAM $1"
        ],
        "description": "Import the Pro/PROGRAM information of a model like ."
    },
    "INCLUDE": {
        "prefix": "INCLUDE",
        "body": [
            "INCLUDE $1"
        ],
        "description": "Includes another script file by specifying the file name. The script file execution starts in the assembly description block."
    },
    "INCLUDE_TO_SIMPREP": {
        "prefix": "INCLUDE_TO_SIMPREP",
        "body": [
            "INCLUDE_TO_SIMPREP $1"
        ],
        "description": "Include a component in a simplified representation. This works only for assemblies, but not for parts."
    },
    "INFO_ENGINE_AUTHENTICATE": {
        "prefix": "INFO_ENGINE_AUTHENTICATE",
        "body": [
            "INFO_ENGINE_AUTHENTICATE $1"
        ],
        "description": "Authenticates a Windchill domain with user and password information via the password database. This authentication is valid for the complete SmartAssembly session."
    },
    "INFO_ENGINE_QUERY": {
        "prefix": "INFO_ENGINE_QUERY",
        "body": [
            "INFO_ENGINE_QUERY $1"
        ],
        "description": "To query data from a Windchill Info*Engine URL by passing information via the query URL."
    },
    "INSERT_ARRAY_ELEM": {
        "prefix": "INSERT_ARRAY_ELEM",
        "body": [
            "INSERT_ARRAY_ELEM $1"
        ],
        "description": "Inserts a new element of an of type parameter, reference or array. That means an array can be an elements of another array. In case the index exceeds the number of existing elements, a new element is appended at the end of the array."
    },
    "INSERT_DRW_SHEET": {
        "prefix": "INSERT_DRW_SHEET",
        "body": [
            "INSERT_DRW_SHEET $1"
        ],
        "description": "Inserts a new sheet to a drawing."
    },
    "INSERT_DRW_TABLE_COL": {
        "prefix": "INSERT_DRW_TABLE_COL",
        "body": [
            "INSERT_DRW_TABLE_COL $1"
        ],
        "description": "Inserts a column to an existing drawing table."
    },
    "INSERT_DRW_TABLE_ROW": {
        "prefix": "INSERT_DRW_TABLE_ROW",
        "body": [
            "INSERT_DRW_TABLE_ROW $1"
        ],
        "description": "Inserts a row to an existing drawing table."
    },
    "INSERT_FAMINSTANCE": {
        "prefix": "INSERT_FAMINSTANCE",
        "body": [
            "INSERT_FAMINSTANCE $1"
        ],
        "description": "Inserts new instances to a family table."
    },
    "INSERT_FAMITEM": {
        "prefix": "INSERT_FAMITEM",
        "body": [
            "INSERT_FAMITEM $1"
        ],
        "description": "Inserts family table item to a family table to the specified generic."
    },
    "INSERT_VARIED_ITEM": {
        "prefix": "INSERT_VARIED_ITEM",
        "body": [
            "INSERT_VARIED_ITEM $1"
        ],
        "description": "Inserts a parameter, a dimension or a feature as varied item to an inheritance feature or a flexible component. This function requires Creo 1.0 or above."
    },
    "INTEGRATE_NESTED_FAMINSTANCES": {
        "prefix": "INTEGRATE_NESTED_FAMINSTANCES",
        "body": [
            "INTEGRATE_NESTED_FAMINSTANCES $1"
        ],
        "description": "This command helps to restructure nested family table instances. It integrates all tested family table instances to the specified generic."
    },
    "INVALIDATE_PARAM": {
        "prefix": "INVALIDATE_PARAM",
        "body": [
            "INVALIDATE_PARAM $1"
        ],
        "description": "Invalidates an existing parameter."
    },
    "INVALIDATE_REF": {
        "prefix": "INVALIDATE_REF",
        "body": [
            "INVALIDATE_REF $1"
        ],
        "description": "Invalidates an existing reference."
    },
    "INVERT_MATRIX": {
        "prefix": "INVERT_MATRIX",
        "body": [
            "INVERT_MATRIX $1"
        ],
        "description": "Calculates the inverse of a matrix."
    },
    "JLINK_APP_LOAD": {
        "prefix": "JLINK_APP_LOAD",
        "body": [
            "JLINK_APP_LOAD $1"
        ],
        "description": "Loads the J-Link application."
    },
    "JLINK_APP_UNLOAD": {
        "prefix": "JLINK_APP_UNLOAD",
        "body": [
            "JLINK_APP_UNLOAD $1"
        ],
        "description": "Unloads a J-Link application."
    },
    "JLINK_TASK_EXEC": {
        "prefix": "JLINK_TASK_EXEC",
        "body": [
            "JLINK_TASK_EXEC $1"
        ],
        "description": "Executes a task of a loaded J-Link application."
    },
    "JSON_COMPOSE_PATH": {
        "prefix": "JSON_COMPOSE_PATH",
        "body": [
            "JSON_COMPOSE_PATH $1"
        ],
        "description": "Zooms to a reference in the current model on the screen."
    },
    "JSON_DOCUMENT_TO_STRING": {
        "prefix": "JSON_DOCUMENT_TO_STRING",
        "body": [
            "JSON_DOCUMENT_TO_STRING $1"
        ],
        "description": "Converts an existing JSON document to a string."
    },
    "JSON_GET_ARRAY_ELEMS": {
        "prefix": "JSON_GET_ARRAY_ELEMS",
        "body": [
            "JSON_GET_ARRAY_ELEMS $1"
        ],
        "description": "Retrieves the paths of all JSON array elements in an array."
    },
    "JSON_GET_ARRAY_SIZE": {
        "prefix": "JSON_GET_ARRAY_SIZE",
        "body": [
            "JSON_GET_ARRAY_SIZE $1"
        ],
        "description": "Retrieves the number of all JSON array elements."
    },
    "JSON_GET_NEXT_ARRAY_ELEM": {
        "prefix": "JSON_GET_NEXT_ARRAY_ELEM",
        "body": [
            "JSON_GET_NEXT_ARRAY_ELEM $1"
        ],
        "description": "Retrieves path to create the next JSON array element."
    },
    "JSON_GET_OBJECT_MEMBERS": {
        "prefix": "JSON_GET_OBJECT_MEMBERS",
        "body": [
            "JSON_GET_OBJECT_MEMBERS $1"
        ],
        "description": "Retrieves the paths of all JSON object members in an array."
    },
    "JSON_GET_TYPE": {
        "prefix": "JSON_GET_TYPE",
        "body": [
            "JSON_GET_TYPE $1"
        ],
        "description": "Retrieves the type of a JSON value."
    },
    "JSON_GET_VALUE": {
        "prefix": "JSON_GET_VALUE",
        "body": [
            "JSON_GET_VALUE $1"
        ],
        "description": "Reads a value from a JSON document by specifying its path."
    },
    "JSON_INIT_DOCUMENT": {
        "prefix": "JSON_INIT_DOCUMENT",
        "body": [
            "JSON_INIT_DOCUMENT $1"
        ],
        "description": "Initializes a JSON document from string."
    },
    "JSON_LOAD_DOCUMENT": {
        "prefix": "JSON_LOAD_DOCUMENT",
        "body": [
            "JSON_LOAD_DOCUMENT $1"
        ],
        "description": "Loads a JSON document from file."
    },
    "JSON_NEW_DOCUMENT": {
        "prefix": "JSON_NEW_DOCUMENT",
        "body": [
            "JSON_NEW_DOCUMENT $1"
        ],
        "description": "Creates a new empty JSON document."
    },
    "JSON_SAVE_DOCUMENT": {
        "prefix": "JSON_SAVE_DOCUMENT",
        "body": [
            "JSON_SAVE_DOCUMENT $1"
        ],
        "description": "Saves a JSON document to disk."
    },
    "JSON_SET_ARRAY": {
        "prefix": "JSON_SET_ARRAY",
        "body": [
            "JSON_SET_ARRAY $1"
        ],
        "description": "Creates an array in a JSON document by specifying its path."
    },
    "JSON_SET_NULL": {
        "prefix": "JSON_SET_NULL",
        "body": [
            "JSON_SET_NULL $1"
        ],
        "description": "Creates a null value in a JSON document by specifying its path."
    },
    "JSON_SET_OBJECT": {
        "prefix": "JSON_SET_OBJECT",
        "body": [
            "JSON_SET_OBJECT $1"
        ],
        "description": "Creates an object in a JSON document by specifying its path."
    },
    "JSON_SET_VALUE": {
        "prefix": "JSON_SET_VALUE",
        "body": [
            "JSON_SET_VALUE $1"
        ],
        "description": "Creates a value in a JSON document by specifying its path and value."
    },
    "LINK_SKETCH": {
        "prefix": "LINK_SKETCH",
        "body": [
            "LINK_SKETCH $1"
        ],
        "description": "Redefines the sketch of a feature according to the shape of a surface or curve by adjusting the sketch. No dependency to the source surface or curve is created."
    },
    "LINK_SKETCH_MDL": {
        "prefix": "LINK_SKETCH_MDL",
        "body": [
            "LINK_SKETCH_MDL $1"
        ],
        "description": "Redefines the sketch of a feature according to the shape of a section model."
    },
    "LOAD_CONFIG_OPTIONS": {
        "prefix": "LOAD_CONFIG_OPTIONS",
        "body": [
            "LOAD_CONFIG_OPTIONS $1"
        ],
        "description": "Reads a configuration file for the current Creo Parametric session."
    },
    "LOAD_DRW_OPTIONS": {
        "prefix": "LOAD_DRW_OPTIONS",
        "body": [
            "LOAD_DRW_OPTIONS $1"
        ],
        "description": "Applies the drawing options of a dtl file."
    },
    "LOAD_MDL": {
        "prefix": "LOAD_MDL",
        "body": [
            "LOAD_MDL $1"
        ],
        "description": "Executes file open dialog and lets the user select a model."
    },
    "LOAD_MDL_DTL_OPTIONS": {
        "prefix": "LOAD_MDL_DTL_OPTIONS",
        "body": [
            "LOAD_MDL_DTL_OPTIONS $1"
        ],
        "description": "Applies the detail options to a solid model from a dtl file."
    },
    "LOAD_MDL_TOL_TABLE": {
        "prefix": "LOAD_MDL_TOL_TABLE",
        "body": [
            "LOAD_MDL_TOL_TABLE $1"
        ],
        "description": "Load the tolerance table for a model."
    },
    "LOOKUP_FAMINSTANCE": {
        "prefix": "LOOKUP_FAMINSTANCE",
        "body": [
            "LOOKUP_FAMINSTANCE $1"
        ],
        "description": "Searches a family table instance name according to dimension or parameter values of the family item. In case of several matching instances the first one is returned."
    },
    "LOOKUP_FAMINSTANCES": {
        "prefix": "LOOKUP_FAMINSTANCES",
        "body": [
            "LOOKUP_FAMINSTANCES $1"
        ],
        "description": "Searches all family table instance names according to dimension or parameter values of the family items."
    },
    "MAPKEY": {
        "prefix": "MAPKEY",
        "body": [
            "MAPKEY $1"
        ],
        "description": "Executes a Creo Elements/Pro mapkey."
    },
    "MEASURE_ANGLE": {
        "prefix": "MEASURE_ANGLE",
        "body": [
            "MEASURE_ANGLE $1"
        ],
        "description": "Computes the angle between two specified references."
    },
    "MEASURE_AREA": {
        "prefix": "MEASURE_AREA",
        "body": [
            "MEASURE_AREA $1"
        ],
        "description": "Computes the area of selected surface references."
    },
    "MEASURE_DIAMETER": {
        "prefix": "MEASURE_DIAMETER",
        "body": [
            "MEASURE_DIAMETER $1"
        ],
        "description": "Computes the diameter of a specified reference."
    },
    "MEASURE_DISTANCE": {
        "prefix": "MEASURE_DISTANCE",
        "body": [
            "MEASURE_DISTANCE $1"
        ],
        "description": "Computes the distance between two specified references."
    },
    "MEASURE_LENGTH": {
        "prefix": "MEASURE_LENGTH",
        "body": [
            "MEASURE_LENGTH $1"
        ],
        "description": "Computes the length of a specified reference."
    },
    "MEASURE_RADIUS": {
        "prefix": "MEASURE_RADIUS",
        "body": [
            "MEASURE_RADIUS $1"
        ],
        "description": "Computes the radius of a specified reference."
    },
    "MERGE_DRW_TABLE": {
        "prefix": "MERGE_DRW_TABLE",
        "body": [
            "MERGE_DRW_TABLE $1"
        ],
        "description": "Merges the specified cells in a drawing table."
    },
    "MERGE_DRWS": {
        "prefix": "MERGE_DRWS",
        "body": [
            "MERGE_DRWS $1"
        ],
        "description": "Merges a drawing to an existing one. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "MESSAGE_BOX": {
        "prefix": "MESSAGE_BOX",
        "body": [
            "MESSAGE_BOX $1"
        ],
        "description": "Shows a message in a box. The program will halt until the user is pressing the OK button."
    },
    "MESSAGE_BOX_EX": {
        "prefix": "MESSAGE_BOX_EX",
        "body": [
            "MESSAGE_BOX_EX $1"
        ],
        "description": "Extended version of the message box. Shows a message in a box with buttons. The program will halt until the user is pressing a button or the cancel button in the title bar."
    },
    "MODIFY_COMB_VIEW": {
        "prefix": "MODIFY_COMB_VIEW",
        "body": [
            "MODIFY_COMB_VIEW $1"
        ],
        "description": "Modifies and existing combined view. This command requires Creo Parametric 1.0 or above."
    },
    "MODIFY_COMPONENT": {
        "prefix": "MODIFY_COMPONENT",
        "body": [
            "MODIFY_COMPONENT $1"
        ],
        "description": "Executes the modify functionality of a former created component."
    },
    "MODIFY_DRW_NOTE_EX": {
        "prefix": "MODIFY_DRW_NOTE_EX",
        "body": [
            "MODIFY_DRW_NOTE_EX $1"
        ],
        "description": "Modifies an existing note on a drawing."
    },
    "MODIFY_EXPLODE_STATE": {
        "prefix": "MODIFY_EXPLODE_STATE",
        "body": [
            "MODIFY_EXPLODE_STATE $1"
        ],
        "description": "Modifies an explode state in an assembly. This command requires Creo Parametric 2.0 or above."
    },
    "MODIFY_FIELD_POINT": {
        "prefix": "MODIFY_FIELD_POINT",
        "body": [
            "MODIFY_FIELD_POINT $1"
        ],
        "description": "Modifies the placement reference of a field point."
    },
    "MODIFY_GENERAL_CSYS": {
        "prefix": "MODIFY_GENERAL_CSYS",
        "body": [
            "MODIFY_GENERAL_CSYS $1"
        ],
        "description": "MODIFY_GENERAL_CSYS"
    },
    "MODIFY_GENERAL_PATTERN": {
        "prefix": "MODIFY_GENERAL_PATTERN",
        "body": [
            "MODIFY_GENERAL_PATTERN $1"
        ],
        "description": "MODIFY_GENERAL_PATTERN"
    },
    "MODIFY_GENERAL_POINT": {
        "prefix": "MODIFY_GENERAL_POINT",
        "body": [
            "MODIFY_GENERAL_POINT $1"
        ],
        "description": "Modifies a general point datum feature."
    },
    "MODIFY_GTOL": {
        "prefix": "MODIFY_GTOL",
        "body": [
            "MODIFY_GTOL $1"
        ],
        "description": "Modifies a geometric tolerance in solids or drawings. This command requires Pro/ENGINEER Wildfire 5 or above."
    },
    "MODIFY_GTOL_CREO4": {
        "prefix": "MODIFY_GTOL_CREO4",
        "body": [
            "MODIFY_GTOL_CREO4 $1"
        ],
        "description": "Modifies a geometric tolerance in solids or drawings with the new functionality in Creo 4.0 and above. This command requires Creo 4.0 or above."
    },
    "MODIFY_HOLE": {
        "prefix": "MODIFY_HOLE",
        "body": [
            "MODIFY_HOLE $1"
        ],
        "description": "Modifies a hole feature. This command requires Pro/ENGINEER Wildfire 4 or above."
    },
    "MODIFY_NC_STEP": {
        "prefix": "MODIFY_NC_STEP",
        "body": [
            "MODIFY_NC_STEP $1"
        ],
        "description": "Redefines an NC step feature with the data from a given NC_STEP structure."
    },
    "MODIFY_NOTE_EX": {
        "prefix": "MODIFY_NOTE_EX",
        "body": [
            "MODIFY_NOTE_EX $1"
        ],
        "description": "Modifies an existing note in a solid model."
    },
    "MODIFY_POINTS_EX": {
        "prefix": "MODIFY_POINTS_EX",
        "body": [
            "MODIFY_POINTS_EX $1"
        ],
        "description": "Modifies a datum point offset coordinate system feature with several points inside."
    },
    "MODIFY_SURFFINISH": {
        "prefix": "MODIFY_SURFFINISH",
        "body": [
            "MODIFY_SURFFINISH $1"
        ],
        "description": "Modifies the surface finish in a solid model."
    },
    "MODIFY_SYMBOL": {
        "prefix": "MODIFY_SYMBOL",
        "body": [
            "MODIFY_SYMBOL $1"
        ],
        "description": "Modifies an existing symbol in a solid model."
    },
    "MOVE_ANNOTATION_TO_ORIENTATION": {
        "prefix": "MOVE_ANNOTATION_TO_ORIENTATION",
        "body": [
            "MOVE_ANNOTATION_TO_ORIENTATION $1"
        ],
        "description": "Moves annotation elements to an orientation."
    },
    "MOVE_ANNOTATION_TO_PLANE": {
        "prefix": "MOVE_ANNOTATION_TO_PLANE",
        "body": [
            "MOVE_ANNOTATION_TO_PLANE $1"
        ],
        "description": "Moves annotation elements to a specified plane."
    },
    "MOVE_DRW_DIM": {
        "prefix": "MOVE_DRW_DIM",
        "body": [
            "MOVE_DRW_DIM $1"
        ],
        "description": "Moves a drawing dimension to a specified position. This command is valid for shown and created dimensions."
    },
    "MOVE_DRW_NOTE_TO_VIEW": {
        "prefix": "MOVE_DRW_NOTE_TO_VIEW",
        "body": [
            "MOVE_DRW_NOTE_TO_VIEW $1"
        ],
        "description": "Moves a drawing note to a specified view."
    },
    "MOVE_DRW_SYMBOL_TO_VIEW": {
        "prefix": "MOVE_DRW_SYMBOL_TO_VIEW",
        "body": [
            "MOVE_DRW_SYMBOL_TO_VIEW $1"
        ],
        "description": "Moves a drawing symbol to a specified view."
    },
    "MOVE_DRW_VIEW": {
        "prefix": "MOVE_DRW_VIEW",
        "body": [
            "MOVE_DRW_VIEW $1"
        ],
        "description": "Moves a view on a drawing to the desired position."
    },
    "MOVE_FILE": {
        "prefix": "MOVE_FILE",
        "body": [
            "MOVE_FILE $1"
        ],
        "description": "Moves a file to a new name or to a new position in the file system."
    },
    "MOVE_FROM_FOOTER": {
        "prefix": "MOVE_FROM_FOOTER",
        "body": [
            "MOVE_FROM_FOOTER $1"
        ],
        "description": "Moves a feature or an array of features from the footer."
    },
    "MOVE_TO_FOOTER": {
        "prefix": "MOVE_TO_FOOTER",
        "body": [
            "MOVE_TO_FOOTER $1"
        ],
        "description": "Moves a feature or an array of features to the footer."
    },
    "NEXT_RAY_INTERSECTION": {
        "prefix": "NEXT_RAY_INTERSECTION",
        "body": [
            "NEXT_RAY_INTERSECTION $1"
        ],
        "description": "Finds a solid surface in a specific direction. By default the next nearest surface is found. With the options below also other surfaces can be determined."
    },
    "NORMALIZE_MATRIX": {
        "prefix": "NORMALIZE_MATRIX",
        "body": [
            "NORMALIZE_MATRIX $1"
        ],
        "description": "Normalizes a matrix and converts it to a right-hand system if required."
    },
    "ODBC_COMMIT": {
        "prefix": "ODBC_COMMIT",
        "body": [
            "ODBC_COMMIT $1"
        ],
        "description": "Database ODBC command to commit executed commands in a database. This is required to make changes in the database persistent."
    },
    "ODBC_CONNECT": {
        "prefix": "ODBC_CONNECT",
        "body": [
            "ODBC_CONNECT $1"
        ],
        "description": "Database ODBC command to connect to a database."
    },
    "ODBC_DISCONNECT": {
        "prefix": "ODBC_DISCONNECT",
        "body": [
            "ODBC_DISCONNECT $1"
        ],
        "description": "Database ODBC command to disconnect from a database."
    },
    "ODBC_EXECUTE": {
        "prefix": "ODBC_EXECUTE",
        "body": [
            "ODBC_EXECUTE $1"
        ],
        "description": "Database ODBC command to execute database commands. This is typically used to insert values to a database."
    },
    "ODBC_GET_COLUMN_TYPE": {
        "prefix": "ODBC_GET_COLUMN_TYPE",
        "body": [
            "ODBC_GET_COLUMN_TYPE $1"
        ],
        "description": "Retrieves the type of a column."
    },
    "ODBC_GET_TABLE_COLUMNS": {
        "prefix": "ODBC_GET_TABLE_COLUMNS",
        "body": [
            "ODBC_GET_TABLE_COLUMNS $1"
        ],
        "description": "Retrieves the names of all columns in a database table."
    },
    "ODBC_GET_TABLES": {
        "prefix": "ODBC_GET_TABLES",
        "body": [
            "ODBC_GET_TABLES $1"
        ],
        "description": "Retrieves the names of all tables in the database."
    },
    "ODBC_QUERY": {
        "prefix": "ODBC_QUERY",
        "body": [
            "ODBC_QUERY $1"
        ],
        "description": "Database ODBC command to query values from a database."
    },
    "PARSE_FILE_NAME": {
        "prefix": "PARSE_FILE_NAME",
        "body": [
            "PARSE_FILE_NAME $1"
        ],
        "description": "Parses a give file name and extracts path, name and extension."
    },
    "PARSE_STRING": {
        "prefix": "PARSE_STRING",
        "body": [
            "PARSE_STRING $1"
        ],
        "description": "Reads formatted data from a string. The format control string determines which part of the input string is stored in the different variables. Spaces and tabulators are ignored in the input and in the format string. The command does not only allow to retrieve variables, it can also be used to control that the string follows specific rules."
    },
    "PARSE_STRING_EX": {
        "prefix": "PARSE_STRING_EX",
        "body": [
            "PARSE_STRING_EX $1"
        ],
        "description": "Reads formatted data from a string and stores the result in an array. The format control string determines which part of the input string is stored in the different variables. Spaces and tabulators are ignored in the input and in the format string. The command does not only allow to retrieve variables, it can also be used to control that the string follows specific rules."
    },
    "PASSWORD_DIALOG": {
        "prefix": "PASSWORD_DIALOG",
        "body": [
            "PASSWORD_DIALOG $1"
        ],
        "description": "PASSWORD_DIALOG"
    },
    "PLOT": {
        "prefix": "PLOT",
        "body": [
            "PLOT $1"
        ],
        "description": "Plots a drawing on the printer according to a printer PCF file."
    },
    "PLUGIN": {
        "prefix": "PLUGIN",
        "body": [
            "PLUGIN $1"
        ],
        "description": "Starts an external program."
    },
    "PREDEFINE_FLEXIBILITY": {
        "prefix": "PREDEFINE_FLEXIBILITY",
        "body": [
            "PREDEFINE_FLEXIBILITY $1"
        ],
        "description": "Predefines varied items on a model to be used later on when using the model as a flexible component. This function requires Creo 1.0 or above."
    },
    "PRINT": {
        "prefix": "PRINT",
        "body": [
            "PRINT $1"
        ],
        "description": "Output of text messages in the Creo Elements/Pro message area."
    },
    "PROBE_DRW_SYMBOL_LEGACY": {
        "prefix": "PROBE_DRW_SYMBOL_LEGACY",
        "body": [
            "PROBE_DRW_SYMBOL_LEGACY $1"
        ],
        "description": "Identifies legacy drawing symbols from earlier Pro/ENGINEER versions which are not displayed, but found by ."
    },
    "PROCESS_PROE_EVENTS": {
        "prefix": "PROCESS_PROE_EVENTS",
        "body": [
            "PROCESS_PROE_EVENTS $1"
        ],
        "description": "Stops the processing of further commands for a short while and allows waiting Creo events to be processed. This could be used for example for wait for rule based layers to populate new features."
    },
    "PROCESSING_BOX_END": {
        "prefix": "PROCESSING_BOX_END",
        "body": [
            "PROCESSING_BOX_END $1"
        ],
        "description": "Terminates an active processing dialog box."
    },
    "PROCESSING_BOX_SET_STATE": {
        "prefix": "PROCESSING_BOX_SET_STATE",
        "body": [
            "PROCESSING_BOX_SET_STATE $1"
        ],
        "description": "Displays a process bar in the processing dialog box and sets the current percentage."
    },
    "PROCESSING_BOX_START": {
        "prefix": "PROCESSING_BOX_START",
        "body": [
            "PROCESSING_BOX_START $1"
        ],
        "description": "Shows a processing dialog box in the bottom right corner while the tab file is processed."
    },
    "PURGE": {
        "prefix": "PURGE",
        "body": [
            "PURGE $1"
        ],
        "description": "Purges the files in a directory."
    },
    "PURGE_UNUSED_DRW_SYMBOLS": {
        "prefix": "PURGE_UNUSED_DRW_SYMBOLS",
        "body": [
            "PURGE_UNUSED_DRW_SYMBOLS $1"
        ],
        "description": "Purges drawing symbols which are not used on the drawing."
    },
    "PURGE_UNUSED_SYMBOLS": {
        "prefix": "PURGE_UNUSED_SYMBOLS",
        "body": [
            "PURGE_UNUSED_SYMBOLS $1"
        ],
        "description": "Purges symbols which are not used on the solid model. This command requires Creo 4.0 M090 / Creo 5.0.4.0 or above."
    },
    "RADIOBUTTON_PARAM": {
        "prefix": "RADIOBUTTON_PARAM",
        "body": [
            "RADIOBUTTON_PARAM $1"
        ],
        "description": "Radio button in graphical user interface. A radio button provides a list of options to the user while allowing to select exactly one of those."
    },
    "READ_COLOR_PROPS": {
        "prefix": "READ_COLOR_PROPS",
        "body": [
            "READ_COLOR_PROPS $1"
        ],
        "description": "READ_COLOR_PROPS"
    },
    "READ_COMP_INTERFACE": {
        "prefix": "READ_COMP_INTERFACE",
        "body": [
            "READ_COMP_INTERFACE $1"
        ],
        "description": "READ_COMP_INTERFACE"
    },
    "READ_DATUM_TAG": {
        "prefix": "READ_DATUM_TAG",
        "body": [
            "READ_DATUM_TAG ${1:INPUT_DATUM_TAG_REF} ${2:OUTPUT_DATUM_TAG_STRUCT}"
        ],
        "description": "Reads the properties of an existing datum tag."
    },
    "READ_DATUM_TARGET": {
        "prefix": "READ_DATUM_TARGET",
        "body": [
            "READ_DATUM_TARGET ${1:INPUT_DATUM_TARGET_REF} ${2:OUTPUT_DATUM_TARGET_STRUCT}"
        ],
        "description": "Reads the properties of an existing datum target."
    },
    "READ_DIM_ANNOTATION": {
        "prefix": "READ_DIM_ANNOTATION",
        "body": [
            "READ_DIM_ANNOTATION $1"
        ],
        "description": "Reads the properties of an existing annotation dimension."
    },
    "READ_DIRECTORY": {
        "prefix": "READ_DIRECTORY",
        "body": [
            "READ_DIRECTORY $1"
        ],
        "description": "Reads file list from directory in an array of strings."
    },
    "READ_DRW_NOTE_EX": {
        "prefix": "READ_DRW_NOTE_EX",
        "body": [
            "READ_DRW_NOTE_EX $1"
        ],
        "description": "Reads the information from an existing note on a drawing."
    },
    "READ_EXPLODE_STATE": {
        "prefix": "READ_EXPLODE_STATE",
        "body": [
            "READ_EXPLODE_STATE $1"
        ],
        "description": "Reads in the definition of an explode state from an assembly. This command requires Creo Parametric 2.0 or above."
    },
    "READ_EXTERNAL_DATA": {
        "prefix": "READ_EXTERNAL_DATA",
        "body": [
            "READ_EXTERNAL_DATA $1"
        ],
        "description": "Reads external data by keyword from a model."
    },
    "READ_EXTERNAL_DATA_SLOT": {
        "prefix": "READ_EXTERNAL_DATA_SLOT",
        "body": [
            "READ_EXTERNAL_DATA_SLOT $1"
        ],
        "description": "Reads the content of an external data slot."
    },
    "READ_FIELD_POINT": {
        "prefix": "READ_FIELD_POINT",
        "body": [
            "READ_FIELD_POINT $1"
        ],
        "description": "Retrieves the placement reference of a field point."
    },
    "READ_GENERAL_CSYS": {
        "prefix": "READ_GENERAL_CSYS",
        "body": [
            "READ_GENERAL_CSYS $1"
        ],
        "description": "READ_GENERAL_CSYS"
    },
    "READ_GENERAL_PATTERN": {
        "prefix": "READ_GENERAL_PATTERN",
        "body": [
            "READ_GENERAL_PATTERN $1"
        ],
        "description": "READ_GENERAL_PATTERN"
    },
    "READ_GENERAL_POINT": {
        "prefix": "READ_GENERAL_POINT",
        "body": [
            "READ_GENERAL_POINT $1"
        ],
        "description": "Retrieves the description of a general point datum feature."
    },
    "READ_GTOL": {
        "prefix": "READ_GTOL",
        "body": [
            "READ_GTOL $1"
        ],
        "description": "Reads a geometric tolerance definition of solids or drawings. This command requires Pro/ENGINEER Wildfire 5 or above."
    },
    "READ_GTOL_CREO4": {
        "prefix": "READ_GTOL_CREO4",
        "body": [
            "READ_GTOL_CREO4 $1"
        ],
        "description": "Reads a geometric tolerance definition of solids or drawings with the new functionality in Creo 4.0 and above. This command requires Creo 4.0 or above."
    },
    "READ_HOLE": {
        "prefix": "READ_HOLE",
        "body": [
            "READ_HOLE $1"
        ],
        "description": "Reads the description of a hole feature. This command requires Pro/ENGINEER Wildfire 4 or above."
    },
    "READ_NC_STEP": {
        "prefix": "READ_NC_STEP",
        "body": [
            "READ_NC_STEP $1"
        ],
        "description": "Gets the description of an NC step feature."
    },
    "READ_NOTE_EX": {
        "prefix": "READ_NOTE_EX",
        "body": [
            "READ_NOTE_EX $1"
        ],
        "description": "Reads the information from an existing note in an solid model."
    },
    "READ_POINTS_EX": {
        "prefix": "READ_POINTS_EX",
        "body": [
            "READ_POINTS_EX $1"
        ],
        "description": "Reads the description of a datum point offset coordinate system feature with several points inside."
    },
    "READ_SUBDIRECTORIES": {
        "prefix": "READ_SUBDIRECTORIES",
        "body": [
            "READ_SUBDIRECTORIES $1"
        ],
        "description": "Reads names of sub directories and stores them to an array."
    },
    "READ_SURFFINISH": {
        "prefix": "READ_SURFFINISH",
        "body": [
            "READ_SURFFINISH $1"
        ],
        "description": "Retrieves the information from a surface finish in a solid model."
    },
    "READ_SYMBOL": {
        "prefix": "READ_SYMBOL",
        "body": [
            "READ_SYMBOL $1"
        ],
        "description": "Reads the information from an existing symbol in an solid model."
    },
    "READ_TEXTURE_PROPS": {
        "prefix": "READ_TEXTURE_PROPS",
        "body": [
            "READ_TEXTURE_PROPS $1"
        ],
        "description": "READ_TEXTURE_PROPS"
    },
    "READ_XSEC_EX": {
        "prefix": "READ_XSEC_EX",
        "body": [
            "READ_XSEC_EX $1"
        ],
        "description": "Reads the definition of an existing planar cross section."
    },
    "REFERENCE_TO_STRING": {
        "prefix": "REFERENCE_TO_STRING",
        "body": [
            "REFERENCE_TO_STRING $1"
        ],
        "description": "Converts a reference variable to two strings. One for the model for which is the owner of the reference and one for the reference content."
    },
    "REG_EXP_FIND_ALL": {
        "prefix": "REG_EXP_FIND_ALL",
        "body": [
            "REG_EXP_FIND_ALL $1"
        ],
        "description": "Searches for all regular expressions matches in an input string."
    },
    "REG_EXP_MATCH": {
        "prefix": "REG_EXP_MATCH",
        "body": [
            "REG_EXP_MATCH $1"
        ],
        "description": "Tests if an input string matches a regular expression pattern. This command only succeeds if the complete string is matched."
    },
    "REG_EXP_REPLACE": {
        "prefix": "REG_EXP_REPLACE",
        "body": [
            "REG_EXP_REPLACE $1"
        ],
        "description": "Searches for regular expression matches in an input string and replaces them."
    },
    "REG_EXP_SEARCH": {
        "prefix": "REG_EXP_SEARCH",
        "body": [
            "REG_EXP_SEARCH $1"
        ],
        "description": "Searches for the next regular expression match in an input string."
    },
    "REGEN_MDL": {
        "prefix": "REGEN_MDL",
        "body": [
            "REGEN_MDL $1"
        ],
        "description": "Regenerates an existing model."
    },
    "REGEN_RELATIONS": {
        "prefix": "REGEN_RELATIONS",
        "body": [
            "REGEN_RELATIONS $1"
        ],
        "description": "Regenerates all relations of a Creo Elements/Pro model, component or feature."
    },
    "REGISTER_SERVER": {
        "prefix": "REGISTER_SERVER",
        "body": [
            "REGISTER_SERVER $1"
        ],
        "description": "Registers a PDMLink server."
    },
    "REMOVE_ALL_CONSTRAINTS": {
        "prefix": "REMOVE_ALL_CONSTRAINTS",
        "body": [
            "REMOVE_ALL_CONSTRAINTS $1"
        ],
        "description": "Removes all constraints of a placed component, including interface constraints. This command is available since Creo 2.0 M230 / Creo 3.0 M110and above."
    },
    "REMOVE_COLOR_PROPS": {
        "prefix": "REMOVE_COLOR_PROPS",
        "body": [
            "REMOVE_COLOR_PROPS $1"
        ],
        "description": "Removes the color properties from assemblies, parts, features, curves or surfaces."
    },
    "REMOVE_COMB_VIEW_ANNOTATIONS": {
        "prefix": "REMOVE_COMB_VIEW_ANNOTATIONS",
        "body": [
            "REMOVE_COMB_VIEW_ANNOTATIONS $1"
        ],
        "description": "Removes annotations from a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "REMOVE_COMPONENT": {
        "prefix": "REMOVE_COMPONENT",
        "body": [
            "REMOVE_COMPONENT $1"
        ],
        "description": "Removes a specified part or assembly component."
    },
    "REMOVE_CONSTRAINT": {
        "prefix": "REMOVE_CONSTRAINT",
        "body": [
            "REMOVE_CONSTRAINT $1"
        ],
        "description": "Removes a constraint of a placed component."
    },
    "REMOVE_DIRECTORY": {
        "prefix": "REMOVE_DIRECTORY",
        "body": [
            "REMOVE_DIRECTORY $1"
        ],
        "description": "Removes a directory from the file system."
    },
    "REMOVE_DRW_SHEET": {
        "prefix": "REMOVE_DRW_SHEET",
        "body": [
            "REMOVE_DRW_SHEET $1"
        ],
        "description": "Removes an existing sheet from a drawing."
    },
    "REMOVE_DRW_TABLE": {
        "prefix": "REMOVE_DRW_TABLE",
        "body": [
            "REMOVE_DRW_TABLE $1"
        ],
        "description": "Removes a drawing table."
    },
    "REMOVE_DRW_TABLE_COL": {
        "prefix": "REMOVE_DRW_TABLE_COL",
        "body": [
            "REMOVE_DRW_TABLE_COL $1"
        ],
        "description": "Removes a column of an existing drawing table."
    },
    "REMOVE_DRW_TABLE_ROW": {
        "prefix": "REMOVE_DRW_TABLE_ROW",
        "body": [
            "REMOVE_DRW_TABLE_ROW $1"
        ],
        "description": "Removes a row of an existing drawing table."
    },
    "REMOVE_FEATURE": {
        "prefix": "REMOVE_FEATURE",
        "body": [
            "REMOVE_FEATURE $1"
        ],
        "description": "Removes a specified feature."
    },
    "REMOVE_FEATURES": {
        "prefix": "REMOVE_FEATURES",
        "body": [
            "REMOVE_FEATURES $1"
        ],
        "description": "Removes an array of features in a model."
    },
    "REMOVE_FROM_LAYER": {
        "prefix": "REMOVE_FROM_LAYER",
        "body": [
            "REMOVE_FROM_LAYER $1"
        ],
        "description": "Removes geometry elements, features, parts or sub-assemblies features from a layer."
    },
    "REMOVE_LAYER": {
        "prefix": "REMOVE_LAYER",
        "body": [
            "REMOVE_LAYER $1"
        ],
        "description": "Removes a layer from a model."
    },
    "REMOVE_LAYER_STATE": {
        "prefix": "REMOVE_LAYER_STATE",
        "body": [
            "REMOVE_LAYER_STATE $1"
        ],
        "description": "Removes layer states from a solid model. This command requires Creo Parametric 2.0 or above."
    },
    "REMOVE_LAYER_STATE_LAYER": {
        "prefix": "REMOVE_LAYER_STATE_LAYER",
        "body": [
            "REMOVE_LAYER_STATE_LAYER $1"
        ],
        "description": "Removes layers from a layer state. This command requires Creo Parametric 2.0 or above."
    },
    "REMOVE_NC_TOOL_FROM_HEAD": {
        "prefix": "REMOVE_NC_TOOL_FROM_HEAD",
        "body": [
            "REMOVE_NC_TOOL_FROM_HEAD $1"
        ],
        "description": "Removes a tool from a NC workcell head."
    },
    "REMOVE_PATTERN": {
        "prefix": "REMOVE_PATTERN",
        "body": [
            "REMOVE_PATTERN $1"
        ],
        "description": "Removes a pattern by preserving the patterned feature."
    },
    "REMOVE_RELATIONS": {
        "prefix": "REMOVE_RELATIONS",
        "body": [
            "REMOVE_RELATIONS $1"
        ],
        "description": "Removes all relations from a model."
    },
    "REMOVE_SIMPREPS": {
        "prefix": "REMOVE_SIMPREPS",
        "body": [
            "REMOVE_SIMPREPS $1"
        ],
        "description": "Removes one or an array of simplified representations."
    },
    "REMOVE_SKETCH_REFS": {
        "prefix": "REMOVE_SKETCH_REFS",
        "body": [
            "REMOVE_SKETCH_REFS $1"
        ],
        "description": "Removes all sketch references and uses a coordinate system reference instead."
    },
    "REMOVE_VARIED_ITEM": {
        "prefix": "REMOVE_VARIED_ITEM",
        "body": [
            "REMOVE_VARIED_ITEM $1"
        ],
        "description": "Removes a parameter, a dimension or a feature as varied item for an inheritance feature or a flexible component. This function requires Creo 1.0 or above."
    },
    "REMOVE_WORKSPACE_OBJECTS": {
        "prefix": "REMOVE_WORKSPACE_OBJECTS",
        "body": [
            "REMOVE_WORKSPACE_OBJECTS $1"
        ],
        "description": "Removes objects by name or by reference from the current workspace of the active PDMLink server."
    },
    "REORDER_DRW_SHEET": {
        "prefix": "REORDER_DRW_SHEET",
        "body": [
            "REORDER_DRW_SHEET $1"
        ],
        "description": "Reorder a sheet on a drawing."
    },
    "REORDER_FEATURES": {
        "prefix": "REORDER_FEATURES",
        "body": [
            "REORDER_FEATURES $1"
        ],
        "description": "Reorders features in the Creo Elements/Pro model tree."
    },
    "REPAINT": {
        "prefix": "REPAINT",
        "body": [
            "REPAINT $1"
        ],
        "description": "Repaints the screen."
    },
    "REPLACE_COMPONENT": {
        "prefix": "REPLACE_COMPONENT",
        "body": [
            "REPLACE_COMPONENT $1"
        ],
        "description": "Replaces an existing component through another one. References are maintained in case they are identical, that means they have the same Creo Elements/Pro identifier. "
    },
    "REPLACE_DRW_VIEW_MDL": {
        "prefix": "REPLACE_DRW_VIEW_MDL",
        "body": [
            "REPLACE_DRW_VIEW_MDL $1"
        ],
        "description": "Replaces the model of a drawing view. This function works only for replacing models of the same family table."
    },
    "RESET_STOPWATCH": {
        "prefix": "RESET_STOPWATCH",
        "body": [
            "RESET_STOPWATCH $1"
        ],
        "description": "Resets a stopwatch to zero."
    },
    "RESOLVE_PATH": {
        "prefix": "RESOLVE_PATH",
        "body": [
            "RESOLVE_PATH $1"
        ],
        "description": "RESOLVE_PATH"
    },
    "RETRIEVE_MDL": {
        "prefix": "RETRIEVE_MDL",
        "body": [
            "RETRIEVE_MDL ${1|lib:,wtws:,wtcs:,var_model_name|}$2  ${3:output_model_reference}"
        ],
        "description": "Retrieves a model specified by name. To retrieve an instance of a family table, use as Creo Elements/Pro does."
    },
    "RETRIEVE_REFERENCE": {
        "prefix": "RETRIEVE_REFERENCE",
        "body": [
            "RETRIEVE_REFERENCE $1"
        ],
        "description": "Retrieves a reference information from a component feature. This command is useful for retrieving reference information from previously created components in case of ."
    },
    "RETURN": {
        "prefix": "RETURN",
        "body": [
            "RETURN $1"
        ],
        "description": "Returns from the program file with the specified value. This is currently only used for the notification MDL_RENAME_PRE and MDL_SAVE_PRE to avoid renaming or saving of a model."
    },
    "ROTATE_DRW_VIEW": {
        "prefix": "ROTATE_DRW_VIEW",
        "body": [
            "ROTATE_DRW_VIEW $1"
        ],
        "description": "Rotates a drawing view normal to the drawing area."
    },
    "SAVE_DRW_TABLE": {
        "prefix": "SAVE_DRW_TABLE",
        "body": [
            "SAVE_DRW_TABLE $1"
        ],
        "description": "Saves an existing drawing table in text, csv or tbl file."
    },
    "SAVE_LAYER_STATE": {
        "prefix": "SAVE_LAYER_STATE",
        "body": [
            "SAVE_LAYER_STATE $1"
        ],
        "description": "Saves a layer state in a solid model. This command requires Creo Parametric 2.0 or above. For Creo 2.0 before M170 and Creo 3.0 before M050, the command will not cause an error, but also not save the layer state."
    },
    "SAVE_LAYER_STATUS": {
        "prefix": "SAVE_LAYER_STATUS",
        "body": [
            "SAVE_LAYER_STATUS $1"
        ],
        "description": "Save layer status in Creo Elements/Pro models."
    },
    "SAVE_MDL": {
        "prefix": "SAVE_MDL",
        "body": [
            "SAVE_MDL $1"
        ],
        "description": "Saves a Creo Elements/Pro model to disk."
    },
    "SAVE_REFERENCE": {
        "prefix": "SAVE_REFERENCE",
        "body": [
            "SAVE_REFERENCE $1"
        ],
        "description": "Stores a reference information to a component feature. This command is useful for supplying reference information for components which should be created by ."
    },
    "SEARCH_BODY_REF": {
        "prefix": "SEARCH_BODY_REF",
        "body": [
            "SEARCH_BODY_REF $1"
        ],
        "description": "SEARCH_BODY_REF"
    },
    "SEARCH_BODY_REFS": {
        "prefix": "SEARCH_BODY_REFS",
        "body": [
            "SEARCH_BODY_REFS $1"
        ],
        "description": "SEARCH_BODY_REFS"
    },
    "SEARCH_CUSTOM_SIMPREP": {
        "prefix": "SEARCH_CUSTOM_SIMPREP",
        "body": [
            "SEARCH_CUSTOM_SIMPREP $1"
        ],
        "description": "Searches a model for a custom simplified representation."
    },
    "SEARCH_CUSTOM_SIMPREPS": {
        "prefix": "SEARCH_CUSTOM_SIMPREPS",
        "body": [
            "SEARCH_CUSTOM_SIMPREPS $1"
        ],
        "description": "Searches a model for an array of custom simplified representations."
    },
    "SEARCH_CUSTOM_STYLE": {
        "prefix": "SEARCH_CUSTOM_STYLE",
        "body": [
            "SEARCH_CUSTOM_STYLE $1"
        ],
        "description": "SEARCH_CUSTOM_STYLE"
    },
    "SEARCH_CUSTOM_STYLES": {
        "prefix": "SEARCH_CUSTOM_STYLES",
        "body": [
            "SEARCH_CUSTOM_STYLES $1"
        ],
        "description": "SEARCH_CUSTOM_STYLES"
    },
    "SEARCH_DESIGN_SERVER_VARIABLE_NAMES": {
        "prefix": "SEARCH_DESIGN_SERVER_VARIABLE_NAMES",
        "body": [
            "SEARCH_DESIGN_SERVER_VARIABLE_NAMES $1"
        ],
        "description": "Searches for variable names from the SmartDesignServer job by a search string."
    },
    "SEARCH_DRW_ITEM": {
        "prefix": "SEARCH_DRW_ITEM",
        "body": [
            "SEARCH_DRW_ITEM $1"
        ],
        "description": "Searches for a drawing item by specifying view, sheet, identifier and type."
    },
    "SEARCH_DRW_ITEMS": {
        "prefix": "SEARCH_DRW_ITEMS",
        "body": [
            "SEARCH_DRW_ITEMS $1"
        ],
        "description": "Searches for an array of drawing items by specifying view, sheet, identifier and type."
    },
    "SEARCH_DRW_SYMBOL_GROUP_NAMES": {
        "prefix": "SEARCH_DRW_SYMBOL_GROUP_NAMES",
        "body": [
            "SEARCH_DRW_SYMBOL_GROUP_NAMES $1"
        ],
        "description": "Searches the names of groups in a symbol."
    },
    "SEARCH_DRW_SYMBOL_VAR_TEXT": {
        "prefix": "SEARCH_DRW_SYMBOL_VAR_TEXT",
        "body": [
            "SEARCH_DRW_SYMBOL_VAR_TEXT $1"
        ],
        "description": "Searches the variable text of a symbol for a specific entry and retrieve its value."
    },
    "SEARCH_DRW_SYMBOL_VAR_TEXT_NAMES": {
        "prefix": "SEARCH_DRW_SYMBOL_VAR_TEXT_NAMES",
        "body": [
            "SEARCH_DRW_SYMBOL_VAR_TEXT_NAMES $1"
        ],
        "description": "Searches the names of variable texts in a symbol."
    },
    "SEARCH_DRW_SYMBOLS": {
        "prefix": "SEARCH_DRW_SYMBOLS",
        "body": [
            "SEARCH_DRW_SYMBOLS $1"
        ],
        "description": "Searches for drawing symbols. Name and sheet number can be specified or wild cards can be used for them."
    },
    "SEARCH_DRW_TABLES_FOR_MDL": {
        "prefix": "SEARCH_DRW_TABLES_FOR_MDL",
        "body": [
            "SEARCH_DRW_TABLES_FOR_MDL $1"
        ],
        "description": "Searches for tables on a drawing which use a specific model for its repeat region."
    },
    "SEARCH_DRW_VIEW": {
        "prefix": "SEARCH_DRW_VIEW",
        "body": [
            "SEARCH_DRW_VIEW $1"
        ],
        "description": "Searches for a view in a Creo Elements/Pro drawing."
    },
    "SEARCH_DRW_VIEW_DIM": {
        "prefix": "SEARCH_DRW_VIEW_DIM",
        "body": [
            "SEARCH_DRW_VIEW_DIM $1"
        ],
        "description": "Searches a drawing dimension."
    },
    "SEARCH_DRW_VIEW_DIMS": {
        "prefix": "SEARCH_DRW_VIEW_DIMS",
        "body": [
            "SEARCH_DRW_VIEW_DIMS $1"
        ],
        "description": "Searches for dimensions in a drawing view by specifying the name with wildcards."
    },
    "SEARCH_DRW_VIEWS": {
        "prefix": "SEARCH_DRW_VIEWS",
        "body": [
            "SEARCH_DRW_VIEWS $1"
        ],
        "description": "Searches for a views in a Creo Elements/Pro drawing by specifying name and sheet number with wildcards."
    },
    "SEARCH_DRW_WELD_SYMBOLS": {
        "prefix": "SEARCH_DRW_WELD_SYMBOLS",
        "body": [
            "SEARCH_DRW_WELD_SYMBOLS $1"
        ],
        "description": "Searches for welding symbols on drawings. Name and sheet number can be specified or wild cards can be used for them."
    },
    "SEARCH_ENUMERATED_FEAT_PARAM_NAME": {
        "prefix": "SEARCH_ENUMERATED_FEAT_PARAM_NAME",
        "body": [
            "SEARCH_ENUMERATED_FEAT_PARAM_NAME $1"
        ],
        "description": "Searches for a restricted enumerated parameter of a specific name in a feature."
    },
    "SEARCH_ENUMERATED_FEAT_PARAM_NAMES": {
        "prefix": "SEARCH_ENUMERATED_FEAT_PARAM_NAMES",
        "body": [
            "SEARCH_ENUMERATED_FEAT_PARAM_NAMES $1"
        ],
        "description": "Searches for restricted enumerated parameters of a specific name in a feature."
    },
    "SEARCH_ENUMERATED_MDL_PARAM_NAME": {
        "prefix": "SEARCH_ENUMERATED_MDL_PARAM_NAME",
        "body": [
            "SEARCH_ENUMERATED_MDL_PARAM_NAME $1"
        ],
        "description": "Searches for a restricted enumerated parameter of a specific name in a model."
    },
    "SEARCH_ENUMERATED_MDL_PARAM_NAMES": {
        "prefix": "SEARCH_ENUMERATED_MDL_PARAM_NAMES",
        "body": [
            "SEARCH_ENUMERATED_MDL_PARAM_NAMES $1"
        ],
        "description": "Searches for restricted enumerated parameters of a specific name in a model."
    },
    "SEARCH_ENUMERATED_REF_PARAM_NAME": {
        "prefix": "SEARCH_ENUMERATED_REF_PARAM_NAME",
        "body": [
            "SEARCH_ENUMERATED_REF_PARAM_NAME $1"
        ],
        "description": "Searches for a restricted enumerated parameter of a specific name in a reference."
    },
    "SEARCH_ENUMERATED_REF_PARAM_NAMES": {
        "prefix": "SEARCH_ENUMERATED_REF_PARAM_NAMES",
        "body": [
            "SEARCH_ENUMERATED_REF_PARAM_NAMES $1"
        ],
        "description": "Searches for restricted enumerated parameters of a specific name in a reference."
    },
    "SEARCH_FEAT_PARAM": {
        "prefix": "SEARCH_FEAT_PARAM",
        "body": [
            "SEARCH_FEAT_PARAM $1"
        ],
        "description": "Searches for a specific parameter in a feature."
    },
    "SEARCH_FEAT_PARAM_NAME": {
        "prefix": "SEARCH_FEAT_PARAM_NAME",
        "body": [
            "SEARCH_FEAT_PARAM_NAME $1"
        ],
        "description": "Searches for a parameter of a specific name in a feature."
    },
    "SEARCH_FEAT_PARAM_NAMES": {
        "prefix": "SEARCH_FEAT_PARAM_NAMES",
        "body": [
            "SEARCH_FEAT_PARAM_NAMES $1"
        ],
        "description": "Searches for parameters of a specific name in a feature."
    },
    "SEARCH_FEAT_REF": {
        "prefix": "SEARCH_FEAT_REF",
        "body": [
            "SEARCH_FEAT_REF $1"
        ],
        "description": "Searches for a named reference in a Creo Elements/Pro feature."
    },
    "SEARCH_FEAT_REFS": {
        "prefix": "SEARCH_FEAT_REFS",
        "body": [
            "SEARCH_FEAT_REFS $1"
        ],
        "description": "Searches for all named reference in a Creo Elements/Pro feature."
    },
    "SEARCH_FILE_PARAM": {
        "prefix": "SEARCH_FILE_PARAM",
        "body": [
            "SEARCH_FILE_PARAM $1"
        ],
        "description": "Searches for a content in a specified file. The file lines are build up in the manner ."
    },
    "SEARCH_LINESTOCK_PARAM": {
        "prefix": "SEARCH_LINESTOCK_PARAM",
        "body": [
            "SEARCH_LINESTOCK_PARAM $1"
        ],
        "description": "Searches for a linestock parameter of in a pipeline feature."
    },
    "SEARCH_LINESTOCK_PARAM_EX": {
        "prefix": "SEARCH_LINESTOCK_PARAM_EX",
        "body": [
            "SEARCH_LINESTOCK_PARAM_EX $1"
        ],
        "description": "SEARCH_LINESTOCK_PARAM_EX"
    },
    "SEARCH_MDL_OR_COMP_PARAM": {
        "prefix": "SEARCH_MDL_OR_COMP_PARAM",
        "body": [
            "SEARCH_MDL_OR_COMP_PARAM $1"
        ],
        "description": "Recursive search for a parameter with a specific name. The search starts with the specified model and checks if its component or the model contains the parameter. In case it does not, the search will be done in the parameter model and so forth."
    },
    "SEARCH_MDL_PARAM": {
        "prefix": "SEARCH_MDL_PARAM",
        "body": [
            "SEARCH_MDL_PARAM $1"
        ],
        "description": "Searches for a parameter or dimension with a specific name in an Creo Elements/Pro model."
    },
    "SEARCH_MDL_PARAM_NAME": {
        "prefix": "SEARCH_MDL_PARAM_NAME",
        "body": [
            "SEARCH_MDL_PARAM_NAME $1"
        ],
        "description": "Searches for a parameter of a specific name in a model."
    },
    "SEARCH_MDL_PARAM_NAMES": {
        "prefix": "SEARCH_MDL_PARAM_NAMES",
        "body": [
            "SEARCH_MDL_PARAM_NAMES $1"
        ],
        "description": "Searches for parameters of a specific name in a model."
    },
    "SEARCH_MDL_REF": {
        "prefix": "SEARCH_MDL_REF",
        "body": [
            "SEARCH_MDL_REF $1"
        ],
        "description": "Searches for a named reference in a Creo Elements/Pro model."
    },
    "SEARCH_MDL_REFS": {
        "prefix": "SEARCH_MDL_REFS",
        "body": [
            "SEARCH_MDL_REFS $1"
        ],
        "description": "Searches for all named reference in a Creo Elements/Pro model."
    },
    "SEARCH_REF_PARAM": {
        "prefix": "SEARCH_REF_PARAM",
        "body": [
            "SEARCH_REF_PARAM $1"
        ],
        "description": "Searches for a specific parameter in a reference."
    },
    "SEARCH_REF_PARAM_NAME": {
        "prefix": "SEARCH_REF_PARAM_NAME",
        "body": [
            "SEARCH_REF_PARAM_NAME $1"
        ],
        "description": "Searches for a parameter of a specific name in a reference."
    },
    "SEARCH_REF_PARAM_NAMES": {
        "prefix": "SEARCH_REF_PARAM_NAMES",
        "body": [
            "SEARCH_REF_PARAM_NAMES $1"
        ],
        "description": "Searches for parameters of a specific name in a reference."
    },
    "SEARCH_RELATION_ELEMENTS": {
        "prefix": "SEARCH_RELATION_ELEMENTS",
        "body": [
            "SEARCH_RELATION_ELEMENTS $1"
        ],
        "description": "Searches in a model for all elements which own a relation set. That can be the model itself, component features, features and patterns."
    },
    "SEARCH_RELATIONS": {
        "prefix": "SEARCH_RELATIONS",
        "body": [
            "SEARCH_RELATIONS $1"
        ],
        "description": "Searches for specific relations of a Creo Elements/Pro model, component or feature."
    },
    "SEARCH_STAGE_ORIENT_PLANE": {
        "prefix": "SEARCH_STAGE_ORIENT_PLANE",
        "body": [
            "SEARCH_STAGE_ORIENT_PLANE $1"
        ],
        "description": "Searches for a datum plane in specified model. This command could be used to retrieve an orientation reference for UDF placement or assembling."
    },
    "SEARCH_STAMP_REF": {
        "prefix": "SEARCH_STAMP_REF",
        "body": [
            "SEARCH_STAMP_REF $1"
        ],
        "description": "Searches for a named surface in the selected models. The search is done in z direction. Use this command to specify a tool plate at a position"
    },
    "SEARCH_SYMBOL_GROUP_NAMES": {
        "prefix": "SEARCH_SYMBOL_GROUP_NAMES",
        "body": [
            "SEARCH_SYMBOL_GROUP_NAMES $1"
        ],
        "description": "Searches the names of groups in a symbol."
    },
    "SEARCH_SYMBOL_VAR_TEXT": {
        "prefix": "SEARCH_SYMBOL_VAR_TEXT",
        "body": [
            "SEARCH_SYMBOL_VAR_TEXT $1"
        ],
        "description": "Searches the variable text of a symbol for a specific entry and retrieve its value."
    },
    "SEARCH_SYMBOL_VAR_TEXT_NAMES": {
        "prefix": "SEARCH_SYMBOL_VAR_TEXT_NAMES",
        "body": [
            "SEARCH_SYMBOL_VAR_TEXT_NAMES $1"
        ],
        "description": "Searches the names of variable texts in a symbol."
    },
    "SEARCH_UDF_DIM": {
        "prefix": "SEARCH_UDF_DIM",
        "body": [
            "SEARCH_UDF_DIM $1"
        ],
        "description": "Searches for a variable dimension from a user defined feature."
    },
    "SEARCH_VARIABLE": {
        "prefix": "SEARCH_VARIABLE",
        "body": [
            "SEARCH_VARIABLE $1"
        ],
        "description": "Searches an existing variable by name. Wildcards can be used for the search. "
    },
    "SEARCH_VARIABLE_NAMES": {
        "prefix": "SEARCH_VARIABLE_NAMES",
        "body": [
            "SEARCH_VARIABLE_NAMES $1"
        ],
        "description": "Searches for the names of existing variables by a search string."
    },
    "SEARCH_VARIABLES": {
        "prefix": "SEARCH_VARIABLES",
        "body": [
            "SEARCH_VARIABLES $1"
        ],
        "description": "Searches existing variables by name. Wildcards can be used for the search. "
    },
    "SELECT_FAMINSTANCE": {
        "prefix": "SELECT_FAMINSTANCE",
        "body": [
            "SELECT_FAMINSTANCE $1"
        ],
        "description": "Shows up a selection dialog to let the user select an instance of the family table."
    },
    "SEND_MAIL": {
        "prefix": "SEND_MAIL",
        "body": [
            "SEND_MAIL $1"
        ],
        "description": "Sends mails via the specified mail server."
    },
    "SET_ACCURACY": {
        "prefix": "SET_ACCURACY",
        "body": [
            "SET_ACCURACY $1"
        ],
        "description": "Sets the accuracy of a model."
    },
    "SET_ACTIVE_BODY": {
        "prefix": "SET_ACTIVE_BODY",
        "body": [
            "SET_ACTIVE_BODY $1"
        ],
        "description": "SET_ACTIVE_BODY"
    },
    "SET_ACTIVE_COMB_VIEW": {
        "prefix": "SET_ACTIVE_COMB_VIEW",
        "body": [
            "SET_ACTIVE_COMB_VIEW $1"
        ],
        "description": "Sets the active combined view. This command requires Creo Parametric 1.0 or above."
    },
    "SET_ANNOTATION_ANGLE": {
        "prefix": "SET_ANNOTATION_ANGLE",
        "body": [
            "SET_ANNOTATION_ANGLE $1"
        ],
        "description": "Retrieves position of an annotation."
    },
    "SET_ANNOTATION_ELEMENT": {
        "prefix": "SET_ANNOTATION_ELEMENT",
        "body": [
            "SET_ANNOTATION_ELEMENT $1"
        ],
        "description": "Removes existing elements from the annotation and places a new one instead."
    },
    "SET_ANNOTATION_ELEMENT_NAME": {
        "prefix": "SET_ANNOTATION_ELEMENT_NAME",
        "body": [
            "SET_ANNOTATION_ELEMENT_NAME $1"
        ],
        "description": "Sets the name of a specified annotation element which is contained by an annotation feature."
    },
    "SET_ANNOTATION_ELEMENTS": {
        "prefix": "SET_ANNOTATION_ELEMENTS",
        "body": [
            "SET_ANNOTATION_ELEMENTS $1"
        ],
        "description": "Removes existing elements from the annotation and places the new ones instead."
    },
    "SET_ANNOTATION_POS": {
        "prefix": "SET_ANNOTATION_POS",
        "body": [
            "SET_ANNOTATION_POS $1"
        ],
        "description": "Sets the position of an annotation."
    },
    "SET_ANNOTATION_TEXT_STYLE": {
        "prefix": "SET_ANNOTATION_TEXT_STYLE",
        "body": [
            "SET_ANNOTATION_TEXT_STYLE $1"
        ],
        "description": "Sets the text style for an annotation."
    },
    "SET_ARRAY_ELEM": {
        "prefix": "SET_ARRAY_ELEM",
        "body": [
            "SET_ARRAY_ELEM $1"
        ],
        "description": "Updates an existing element of an of type parameter, reference or array. That means an array can be an elements of another array. In case the index exceeds the number of existing elements, a new element is appended at the end of the array."
    },
    "SET_AUTO_REORDER": {
        "prefix": "SET_AUTO_REORDER",
        "body": [
            "SET_AUTO_REORDER $1"
        ],
        "description": "Reorders a feature to a specific position in the model tree. The feature is always moved in the defined position for each regeneration, save and creation of a new feature."
    },
    "SET_AUTO_TRANSLATION_LANGUAGE": {
        "prefix": "SET_AUTO_TRANSLATION_LANGUAGE",
        "body": [
            "SET_AUTO_TRANSLATION_LANGUAGE $1"
        ],
        "description": "Sets the default language for the ."
    },
    "SET_AUTO_TRANSLATION_PATH": {
        "prefix": "SET_AUTO_TRANSLATION_PATH",
        "body": [
            "SET_AUTO_TRANSLATION_PATH $1"
        ],
        "description": "Sets the default path for the ."
    },
    "SET_BODY_DENSITY": {
        "prefix": "SET_BODY_DENSITY",
        "body": [
            "SET_BODY_DENSITY $1"
        ],
        "description": "SET_BODY_DENSITY"
    },
    "SET_BODY_MATERIAL": {
        "prefix": "SET_BODY_MATERIAL",
        "body": [
            "SET_BODY_MATERIAL $1"
        ],
        "description": "SET_BODY_MATERIAL"
    },
    "SET_BODY_MATERIAL_PROPERTIES": {
        "prefix": "SET_BODY_MATERIAL_PROPERTIES",
        "body": [
            "SET_BODY_MATERIAL_PROPERTIES $1"
        ],
        "description": "SET_BODY_MATERIAL_PROPERTIES"
    },
    "SET_BODY_MATERIAL_PROPERTY": {
        "prefix": "SET_BODY_MATERIAL_PROPERTY",
        "body": [
            "SET_BODY_MATERIAL_PROPERTY $1"
        ],
        "description": "SET_BODY_MATERIAL_PROPERTY"
    },
    "SET_BROWSER_SIZE": {
        "prefix": "SET_BROWSER_SIZE",
        "body": [
            "SET_BROWSER_SIZE $1"
        ],
        "description": "Sets the size of the Creo embedded browser in percentage of coverage of the Creo window. The values in the range 0.0 to 100.0."
    },
    "SET_CLIPBOARD_TEXT": {
        "prefix": "SET_CLIPBOARD_TEXT",
        "body": [
            "SET_CLIPBOARD_TEXT $1"
        ],
        "description": "Copies text to the clipboard."
    },
    "SET_COLOR": {
        "prefix": "SET_COLOR",
        "body": [
            "SET_COLOR $1"
        ],
        "description": "Sets rgb color of assembly, part, feature, curve or surface via specifying intensity of red, green and blue between 0 and 255."
    },
    "SET_COLOR_PROPS": {
        "prefix": "SET_COLOR_PROPS",
        "body": [
            "SET_COLOR_PROPS $1"
        ],
        "description": "Sets the color properties of assemblies, parts, features, curves or surfaces."
    },
    "SET_COMB_VIEW_ANNOTATION_VISIBILITY": {
        "prefix": "SET_COMB_VIEW_ANNOTATION_VISIBILITY",
        "body": [
            "SET_COMB_VIEW_ANNOTATION_VISIBILITY $1"
        ],
        "description": "Sets the visibility state of annotations in a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "SET_COMB_VIEW_ANNOTATIONS": {
        "prefix": "SET_COMB_VIEW_ANNOTATIONS",
        "body": [
            "SET_COMB_VIEW_ANNOTATIONS $1"
        ],
        "description": "Sets the annotations of a combined view. This command requires Creo Parametric 1.0 or above."
    },
    "SET_COMB_VIEW_NAME": {
        "prefix": "SET_COMB_VIEW_NAME",
        "body": [
            "SET_COMB_VIEW_NAME $1"
        ],
        "description": "Renames an existing combined view of a model. This command requires Creo Parametric 1.0 or above."
    },
    "SET_COMMON_NAME": {
        "prefix": "SET_COMMON_NAME",
        "body": [
            "SET_COMMON_NAME $1"
        ],
        "description": "Sets the PTC_COMMON_NAME parameter of a model. Since the . This command requires Creo Elements/Pro Wildfire 4 or above."
    },
    "SET_COMP_PLACED": {
        "prefix": "SET_COMP_PLACED",
        "body": [
            "SET_COMP_PLACED $1"
        ],
        "description": "Sets the placement state of a component. Unplaced component are usually created via ."
    },
    "SET_COMP_POS": {
        "prefix": "SET_COMP_POS",
        "body": [
            "SET_COMP_POS $1"
        ],
        "description": "Sets the position of a component which is under-constraint."
    },
    "SET_COMP_TYPE": {
        "prefix": "SET_COMP_TYPE",
        "body": [
            "SET_COMP_TYPE $1"
        ],
        "description": "Sets the type of a component."
    },
    "SET_CONFIG_HTML_DATA": {
        "prefix": "SET_CONFIG_HTML_DATA",
        "body": [
            "SET_CONFIG_HTML_DATA $1"
        ],
        "description": "Sets the data to return to the web page called from ."
    },
    "SET_CONFIG_OPTION": {
        "prefix": "SET_CONFIG_OPTION",
        "body": [
            "SET_CONFIG_OPTION $1"
        ],
        "description": "Sets the value of a Creo Elements/Pro configuration option."
    },
    "SET_CONSEC_FEAT_PARAM": {
        "prefix": "SET_CONSEC_FEAT_PARAM",
        "body": [
            "SET_CONSEC_FEAT_PARAM $1"
        ],
        "description": "Creates a new feature parameter with a consecutive number at the end of the name."
    },
    "SET_CONSEC_MDL_PARAM": {
        "prefix": "SET_CONSEC_MDL_PARAM",
        "body": [
            "SET_CONSEC_MDL_PARAM $1"
        ],
        "description": "Creates a new model parameter with a consecutive number at the end of the name."
    },
    "SET_CONSTRAINT": {
        "prefix": "SET_CONSTRAINT",
        "body": [
            "SET_CONSTRAINT $1"
        ],
        "description": "Modifies a constraint of a component."
    },
    "SET_CONSTRAINTS": {
        "prefix": "SET_CONSTRAINTS",
        "body": [
            "SET_CONSTRAINTS $1"
        ],
        "description": "Set the constrains for a component."
    },
    "SET_CONSTRUCTION_BODY": {
        "prefix": "SET_CONSTRUCTION_BODY",
        "body": [
            "SET_CONSTRUCTION_BODY $1"
        ],
        "description": "SET_CONSTRUCTION_BODY"
    },
    "SET_CURRENT_MDL": {
        "prefix": "SET_CURRENT_MDL",
        "body": [
            "SET_CURRENT_MDL $1"
        ],
        "description": "Makes a model the current model on the screen."
    },
    "SET_DATUM_TAG_LABEL": {
        "prefix": "SET_DATUM_TAG_LABEL",
        "body": [
            "SET_DATUM_TAG_LABEL $1"
        ],
        "description": "Sets the label of a datum tag. For the new Creo 4.0 datum tags this is the label, for legacy datum tags it is the name of the related datum plane."
    },
    "SET_DENSITY": {
        "prefix": "SET_DENSITY",
        "body": [
            "SET_DENSITY $1"
        ],
        "description": "Sets the density of a part."
    },
    "SET_DIM_DECIMALS": {
        "prefix": "SET_DIM_DECIMALS",
        "body": [
            "SET_DIM_DECIMALS $1"
        ],
        "description": "Sets the number of decimals places of a dimension."
    },
    "SET_DIM_DISPLAY_ROUNDED": {
        "prefix": "SET_DIM_DISPLAY_ROUNDED",
        "body": [
            "SET_DIM_DISPLAY_ROUNDED $1"
        ],
        "description": "Set the information if the dimension should be displayed as a rounded value. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DIM_DISPLAY_TYPE": {
        "prefix": "SET_DIM_DISPLAY_TYPE",
        "body": [
            "SET_DIM_DISPLAY_TYPE $1"
        ],
        "description": "Modifies the display type of a dimension."
    },
    "SET_DIM_FRACTIONAL": {
        "prefix": "SET_DIM_FRACTIONAL",
        "body": [
            "SET_DIM_FRACTIONAL $1"
        ],
        "description": "Determines if a "
    },
    "SET_DIM_OVERRIDE_VALUE": {
        "prefix": "SET_DIM_OVERRIDE_VALUE",
        "body": [
            "SET_DIM_OVERRIDE_VALUE $1"
        ],
        "description": "Sets the dimension override value for a created dimension."
    },
    "SET_DIM_SYMBOL": {
        "prefix": "SET_DIM_SYMBOL",
        "body": [
            "SET_DIM_SYMBOL $1"
        ],
        "description": "Modifies dimension symbol."
    },
    "SET_DIM_TEXT": {
        "prefix": "SET_DIM_TEXT",
        "body": [
            "SET_DIM_TEXT $1"
        ],
        "description": "Sets dimension value for a dimension reference."
    },
    "SET_DIM_TOL": {
        "prefix": "SET_DIM_TOL",
        "body": [
            "SET_DIM_TOL $1"
        ],
        "description": "Sets the upper and lower limit from a tolerance of a dimension."
    },
    "SET_DIM_TOL_TABLE": {
        "prefix": "SET_DIM_TOL_TABLE",
        "body": [
            "SET_DIM_TOL_TABLE $1"
        ],
        "description": "Sets the tolerance table for a dimension."
    },
    "SET_DIM_TOL_TYPE": {
        "prefix": "SET_DIM_TOL_TYPE",
        "body": [
            "SET_DIM_TOL_TYPE $1"
        ],
        "description": "Modifies the tolerance type of a dimension."
    },
    "SET_DIM_VALUE": {
        "prefix": "SET_DIM_VALUE",
        "body": [
            "SET_DIM_VALUE $1"
        ],
        "description": "Sets dimension value for a dimension reference."
    },
    "SET_DIM_VALUE_DISPLAY_TYPE": {
        "prefix": "SET_DIM_VALUE_DISPLAY_TYPE",
        "body": [
            "SET_DIM_VALUE_DISPLAY_TYPE $1"
        ],
        "description": "Sets the value display type for a created dimension."
    },
    "SET_DRW_ANNOTATION_TEXT_STYLE": {
        "prefix": "SET_DRW_ANNOTATION_TEXT_STYLE",
        "body": [
            "SET_DRW_ANNOTATION_TEXT_STYLE $1"
        ],
        "description": "Sets the text style for a drawing annotation."
    },
    "SET_DRW_CUR_SHEET": {
        "prefix": "SET_DRW_CUR_SHEET",
        "body": [
            "SET_DRW_CUR_SHEET $1"
        ],
        "description": "Activates a specific sheet of a drawing."
    },
    "SET_DRW_FORMAT": {
        "prefix": "SET_DRW_FORMAT",
        "body": [
            "SET_DRW_FORMAT $1"
        ],
        "description": "Sets the format of a drawing. Tables from older formats will be removed."
    },
    "SET_DRW_ITEM_VIEW": {
        "prefix": "SET_DRW_ITEM_VIEW",
        "body": [
            "SET_DRW_ITEM_VIEW $1"
        ],
        "description": "Relates a drawing item to a specific view."
    },
    "SET_DRW_ITEMS_VIEW": {
        "prefix": "SET_DRW_ITEMS_VIEW",
        "body": [
            "SET_DRW_ITEMS_VIEW $1"
        ],
        "description": "Relates an array of drawing items to a specific view."
    },
    "SET_DRW_LAYER_STATUS": {
        "prefix": "SET_DRW_LAYER_STATUS",
        "body": [
            "SET_DRW_LAYER_STATUS $1"
        ],
        "description": "Switches display status of an independent drawing layer."
    },
    "SET_DRW_LAYER_STATUS_EX": {
        "prefix": "SET_DRW_LAYER_STATUS_EX",
        "body": [
            "SET_DRW_LAYER_STATUS_EX $1"
        ],
        "description": "Switches display status of an independent drawing layer. Extended version of to set more visibility states."
    },
    "SET_DRW_MDL": {
        "prefix": "SET_DRW_MDL",
        "body": [
            "SET_DRW_MDL $1"
        ],
        "description": "Sets the active model of a drawing."
    },
    "SET_DRW_NOTE_ANGLE": {
        "prefix": "SET_DRW_NOTE_ANGLE",
        "body": [
            "SET_DRW_NOTE_ANGLE $1"
        ],
        "description": "Modifies the angle of a drawing note."
    },
    "SET_DRW_NOTE_LEADER": {
        "prefix": "SET_DRW_NOTE_LEADER",
        "body": [
            "SET_DRW_NOTE_LEADER $1"
        ],
        "description": "Sets one leader or an array of leaders for a drawing note."
    },
    "SET_DRW_NOTE_POS": {
        "prefix": "SET_DRW_NOTE_POS",
        "body": [
            "SET_DRW_NOTE_POS $1"
        ],
        "description": "Modifies the position of a drawing note."
    },
    "SET_DRW_NOTE_TEXT": {
        "prefix": "SET_DRW_NOTE_TEXT",
        "body": [
            "SET_DRW_NOTE_TEXT $1"
        ],
        "description": "Sets the text of an existing drawing note."
    },
    "SET_DRW_NOTE_TEXT_ALIGNMENT": {
        "prefix": "SET_DRW_NOTE_TEXT_ALIGNMENT",
        "body": [
            "SET_DRW_NOTE_TEXT_ALIGNMENT $1"
        ],
        "description": "Sets the horizontal and vertical alignment of an existing drawing note."
    },
    "SET_DRW_NOTE_TEXT_FONT": {
        "prefix": "SET_DRW_NOTE_TEXT_FONT",
        "body": [
            "SET_DRW_NOTE_TEXT_FONT $1"
        ],
        "description": "Sets the text font of an existing drawing note."
    },
    "SET_DRW_NOTE_TEXT_HEIGHT": {
        "prefix": "SET_DRW_NOTE_TEXT_HEIGHT",
        "body": [
            "SET_DRW_NOTE_TEXT_HEIGHT $1"
        ],
        "description": "Sets the text height of an existing drawing note."
    },
    "SET_DRW_OPTIONS": {
        "prefix": "SET_DRW_OPTIONS",
        "body": [
            "SET_DRW_OPTIONS $1"
        ],
        "description": "Sets the options of a drawing."
    },
    "SET_DRW_REF_VIEW": {
        "prefix": "SET_DRW_REF_VIEW",
        "body": [
            "SET_DRW_REF_VIEW $1"
        ],
        "description": "Assigns the the reference of a drawing view to an existing reference."
    },
    "SET_DRW_SCALE": {
        "prefix": "SET_DRW_SCALE",
        "body": [
            "SET_DRW_SCALE $1"
        ],
        "description": "Sets scale of drawing view or of drawing."
    },
    "SET_DRW_SIZE": {
        "prefix": "SET_DRW_SIZE",
        "body": [
            "SET_DRW_SIZE $1"
        ],
        "description": "Sets the size of a drawing sheet by name or by width and height."
    },
    "SET_DRW_SYMBOL_GROUP_SHOWN": {
        "prefix": "SET_DRW_SYMBOL_GROUP_SHOWN",
        "body": [
            "SET_DRW_SYMBOL_GROUP_SHOWN $1"
        ],
        "description": "Sets a symbol group visible or not visible."
    },
    "SET_DRW_SYMBOL_LEADER": {
        "prefix": "SET_DRW_SYMBOL_LEADER",
        "body": [
            "SET_DRW_SYMBOL_LEADER $1"
        ],
        "description": "Sets one leader or an array of leaders for a drawing symbol."
    },
    "SET_DRW_SYMBOL_POS": {
        "prefix": "SET_DRW_SYMBOL_POS",
        "body": [
            "SET_DRW_SYMBOL_POS $1"
        ],
        "description": "Modifies the position of a drawing symbol."
    },
    "SET_DRW_SYMBOL_VAR_TEXT": {
        "prefix": "SET_DRW_SYMBOL_VAR_TEXT",
        "body": [
            "SET_DRW_SYMBOL_VAR_TEXT $1"
        ],
        "description": "Sets the variable text of a drawing symbol by its name."
    },
    "SET_DRW_TABLE_COL_WIDTH": {
        "prefix": "SET_DRW_TABLE_COL_WIDTH",
        "body": [
            "SET_DRW_TABLE_COL_WIDTH $1"
        ],
        "description": "Set the width of a drawing table column."
    },
    "SET_DRW_TABLE_FORMAT": {
        "prefix": "SET_DRW_TABLE_FORMAT",
        "body": [
            "SET_DRW_TABLE_FORMAT $1"
        ],
        "description": "Assigns formatting information to a table cell on a drawing."
    },
    "SET_DRW_TABLE_GROWTH_DIR": {
        "prefix": "SET_DRW_TABLE_GROWTH_DIR",
        "body": [
            "SET_DRW_TABLE_GROWTH_DIR $1"
        ],
        "description": "Sets the growth direction of a drawing table."
    },
    "SET_DRW_TABLE_POS": {
        "prefix": "SET_DRW_TABLE_POS",
        "body": [
            "SET_DRW_TABLE_POS $1"
        ],
        "description": "Sets the position of a drawing table."
    },
    "SET_DRW_TABLE_ROW_HEIGHT": {
        "prefix": "SET_DRW_TABLE_ROW_HEIGHT",
        "body": [
            "SET_DRW_TABLE_ROW_HEIGHT $1"
        ],
        "description": "Set the height ot a drawing table row."
    },
    "SET_DRW_TABLE_TEXT": {
        "prefix": "SET_DRW_TABLE_TEXT",
        "body": [
            "SET_DRW_TABLE_TEXT $1"
        ],
        "description": "Inserts text to a drawing table."
    },
    "SET_DRW_VIEW_BROKEN_AREA": {
        "prefix": "SET_DRW_VIEW_BROKEN_AREA",
        "body": [
            "SET_DRW_VIEW_BROKEN_AREA $1"
        ],
        "description": "Sets a broken area of an existing drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_DETAIL_OUTLINE": {
        "prefix": "SET_DRW_VIEW_DETAIL_OUTLINE",
        "body": [
            "SET_DRW_VIEW_DETAIL_OUTLINE $1"
        ],
        "description": "Sets a new outline spline for an existing detail view based on a specified outline curve. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_DETAIL_OUTLINE_CIRCLE": {
        "prefix": "SET_DRW_VIEW_DETAIL_OUTLINE_CIRCLE",
        "body": [
            "SET_DRW_VIEW_DETAIL_OUTLINE_CIRCLE $1"
        ],
        "description": "Sets a new circular outline spline for an existing detail view based. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_DISPLAY": {
        "prefix": "SET_DRW_VIEW_DISPLAY",
        "body": [
            "SET_DRW_VIEW_DISPLAY $1"
        ],
        "description": "Sets the display status of an existing drawing view."
    },
    "SET_DRW_VIEW_ITEM": {
        "prefix": "SET_DRW_VIEW_ITEM",
        "body": [
            "SET_DRW_VIEW_ITEM $1"
        ],
        "description": "SET_DRW_VIEW_ITEM"
    },
    "SET_DRW_VIEW_ITEMS": {
        "prefix": "SET_DRW_VIEW_ITEMS",
        "body": [
            "SET_DRW_VIEW_ITEMS $1"
        ],
        "description": "SET_DRW_VIEW_ITEMS"
    },
    "SET_DRW_VIEW_NAME": {
        "prefix": "SET_DRW_VIEW_NAME",
        "body": [
            "SET_DRW_VIEW_NAME $1"
        ],
        "description": "Sets the name of a drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_ORIENTATION": {
        "prefix": "SET_DRW_VIEW_ORIENTATION",
        "body": [
            "SET_DRW_VIEW_ORIENTATION $1"
        ],
        "description": "Re-orients an existing drawing view according to specified model view."
    },
    "SET_DRW_VIEW_PARTIAL_AREA": {
        "prefix": "SET_DRW_VIEW_PARTIAL_AREA",
        "body": [
            "SET_DRW_VIEW_PARTIAL_AREA $1"
        ],
        "description": "Sets a partial area in an existing drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_QUILT_HLR": {
        "prefix": "SET_DRW_VIEW_QUILT_HLR",
        "body": [
            "SET_DRW_VIEW_QUILT_HLR $1"
        ],
        "description": "Sets the hidden line removal option for quilts on a drawing view."
    },
    "SET_DRW_VIEW_SIMPREP": {
        "prefix": "SET_DRW_VIEW_SIMPREP",
        "body": [
            "SET_DRW_VIEW_SIMPREP $1"
        ],
        "description": "Set the active simplified representation of the drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_SKELETON_DISPLAY": {
        "prefix": "SET_DRW_VIEW_SKELETON_DISPLAY",
        "body": [
            "SET_DRW_VIEW_SKELETON_DISPLAY $1"
        ],
        "description": "Sets the skeleton model display option for a drawing view"
    },
    "SET_DRW_VIEW_STATE": {
        "prefix": "SET_DRW_VIEW_STATE",
        "body": [
            "SET_DRW_VIEW_STATE $1"
        ],
        "description": "Suppresses or resumes a drawing view. This function requires Pro/ENGINEER Wildfire 5 / Creo Elements/Pro 5 or above."
    },
    "SET_DRW_VIEW_TANGENT_EDGE_DISPLAY": {
        "prefix": "SET_DRW_VIEW_TANGENT_EDGE_DISPLAY",
        "body": [
            "SET_DRW_VIEW_TANGENT_EDGE_DISPLAY $1"
        ],
        "description": "Sets the display style for tangent edges."
    },
    "SET_FAMINSTANCE_LOCK_STATUS": {
        "prefix": "SET_FAMINSTANCE_LOCK_STATUS",
        "body": [
            "SET_FAMINSTANCE_LOCK_STATUS $1"
        ],
        "description": "SET_FAMINSTANCE_LOCK_STATUS"
    },
    "SET_FAMITEM_STATE": {
        "prefix": "SET_FAMITEM_STATE",
        "body": [
            "SET_FAMITEM_STATE $1"
        ],
        "description": "Sets the state of a family table item a specific instance to suppressed or resumed."
    },
    "SET_FAMITEM_VALUE": {
        "prefix": "SET_FAMITEM_VALUE",
        "body": [
            "SET_FAMITEM_VALUE $1"
        ],
        "description": "Sets the value of a family table item for a specific instance and stores it to a variable of type parameter."
    },
    "SET_FEAT_PARAM": {
        "prefix": "SET_FEAT_PARAM",
        "body": [
            "SET_FEAT_PARAM $1"
        ],
        "description": "Creates or updates a feature parameter or dimension with a specified value."
    },
    "SET_FEAT_PARAM_DESCRIPTION": {
        "prefix": "SET_FEAT_PARAM_DESCRIPTION",
        "body": [
            "SET_FEAT_PARAM_DESCRIPTION $1"
        ],
        "description": "Sets the description of a Creo feature parameter."
    },
    "SET_FEAT_PARAM_LOCK_STATUS": {
        "prefix": "SET_FEAT_PARAM_LOCK_STATUS",
        "body": [
            "SET_FEAT_PARAM_LOCK_STATUS $1"
        ],
        "description": "Sets the lock status of a Creo feature parameter."
    },
    "SET_FEATURE_DEPENDENCY": {
        "prefix": "SET_FEATURE_DEPENDENCY",
        "body": [
            "SET_FEATURE_DEPENDENCY $1"
        ],
        "description": "Sets the dependency of a copy geom feature."
    },
    "SET_FEATURE_NAME": {
        "prefix": "SET_FEATURE_NAME",
        "body": [
            "SET_FEATURE_NAME $1"
        ],
        "description": "Sets name to a specified feature."
    },
    "SET_FEATURE_STATE": {
        "prefix": "SET_FEATURE_STATE",
        "body": [
            "SET_FEATURE_STATE $1"
        ],
        "description": "Suppresses or resumes a specified features."
    },
    "SET_FEATURE_UPDATE_NOTIFICATION": {
        "prefix": "SET_FEATURE_UPDATE_NOTIFICATION",
        "body": [
            "SET_FEATURE_UPDATE_NOTIFICATION $1"
        ],
        "description": "Sets the update notification status of a copy geometry feature. This command requires Creo 3.0 or above. In case the Creo license option , the function will not do anything."
    },
    "SET_FLEXIBLE": {
        "prefix": "SET_FLEXIBLE",
        "body": [
            "SET_FLEXIBLE $1"
        ],
        "description": "Makes an existing component flexible and defines its varied items. The function requires Creo 1.0 or above."
    },
    "SET_FLEXIBLE_PREDEFINED": {
        "prefix": "SET_FLEXIBLE_PREDEFINED",
        "body": [
            "SET_FLEXIBLE_PREDEFINED $1"
        ],
        "description": "Makes an existing component flexible by using its predefined varied items. This function requires Creo 1.0 or above."
    },
    "SET_GTOL_TEXT": {
        "prefix": "SET_GTOL_TEXT",
        "body": [
            "SET_GTOL_TEXT $1"
        ],
        "description": "Sets the text of a geometric tolerance in solids or drawings. This command requires Pro/ENGINEER Wildfire 5 or above."
    },
    "SET_GTOL_VALUE": {
        "prefix": "SET_GTOL_VALUE",
        "body": [
            "SET_GTOL_VALUE $1"
        ],
        "description": "SET_GTOL_VALUE"
    },
    "SET_IDENTIFIER": {
        "prefix": "SET_IDENTIFIER",
        "body": [
            "SET_IDENTIFIER $1"
        ],
        "description": "Set a new session identifier from the content of a variable. "
    },
    "SET_LAYER_STATE_LAYER_STATUS": {
        "prefix": "SET_LAYER_STATE_LAYER_STATUS",
        "body": [
            "SET_LAYER_STATE_LAYER_STATUS $1"
        ],
        "description": "Sets the layer visibility information in a layer state. This command requires Creo Parametric 2.0 or above."
    },
    "SET_LAYER_STATE_REF_STATUS": {
        "prefix": "SET_LAYER_STATE_REF_STATUS",
        "body": [
            "SET_LAYER_STATE_REF_STATUS $1"
        ],
        "description": "Adds or removes references to and from a layer state in a solid model. The layer state should be saved afterwards in order to make the changes active. This command requires Creo Parametric 2.0 or above."
    },
    "SET_LAYER_STATUS": {
        "prefix": "SET_LAYER_STATUS",
        "body": [
            "SET_LAYER_STATUS $1"
        ],
        "description": "Sets layer status for a specific layer."
    },
    "SET_LAYER_STATUS_EX": {
        "prefix": "SET_LAYER_STATUS_EX",
        "body": [
            "SET_LAYER_STATUS_EX $1"
        ],
        "description": "Sets layer status for a specific layer. Extended version of to set more visibility states."
    },
    "SET_LINE_FONT": {
        "prefix": "SET_LINE_FONT",
        "body": [
            "SET_LINE_FONT $1"
        ],
        "description": "Sets the line font of a curve or composite curve similar to ."
    },
    "SET_LINESTOCK_PARAM": {
        "prefix": "SET_LINESTOCK_PARAM",
        "body": [
            "SET_LINESTOCK_PARAM $1"
        ],
        "description": "Sets the value for a linestock parameter."
    },
    "SET_LINESTOCK_PARAM_EX": {
        "prefix": "SET_LINESTOCK_PARAM_EX",
        "body": [
            "SET_LINESTOCK_PARAM_EX $1"
        ],
        "description": "SET_LINESTOCK_PARAM_EX"
    },
    "SET_MATERIAL": {
        "prefix": "SET_MATERIAL",
        "body": [
            "SET_MATERIAL $1"
        ],
        "description": "Sets and assigns material to a model."
    },
    "SET_MATERIAL_PROPERTIES": {
        "prefix": "SET_MATERIAL_PROPERTIES",
        "body": [
            "SET_MATERIAL_PROPERTIES $1"
        ],
        "description": "Set the standard properties of the assigned material of a model."
    },
    "SET_MATERIAL_PROPERTY": {
        "prefix": "SET_MATERIAL_PROPERTY",
        "body": [
            "SET_MATERIAL_PROPERTY $1"
        ],
        "description": "Set a property to the assigned material of a model. This allows also to access custom material properties."
    },
    "SET_MDL_DTL_OPTION": {
        "prefix": "SET_MDL_DTL_OPTION",
        "body": [
            "SET_MDL_DTL_OPTION $1"
        ],
        "description": "Assigns a specific detail option to a solid model."
    },
    "SET_MDL_DTL_OPTIONS": {
        "prefix": "SET_MDL_DTL_OPTIONS",
        "body": [
            "SET_MDL_DTL_OPTIONS $1"
        ],
        "description": "Assigns the detail options to a solid model."
    },
    "SET_MDL_MODIFIED": {
        "prefix": "SET_MDL_MODIFIED",
        "body": [
            "SET_MDL_MODIFIED $1"
        ],
        "description": "Sets the modification flag of the model. This makes sure the model will be regarded as changed for the a save command."
    },
    "SET_MDL_NAME": {
        "prefix": "SET_MDL_NAME",
        "body": [
            "SET_MDL_NAME $1"
        ],
        "description": "renames a specified model. In case the model already exists on hard drive or in the workspace the renamed model will be saved. When renaming a part or an assembly available drawings of the same name will be renamed accordingly."
    },
    "SET_MDL_PARAM": {
        "prefix": "SET_MDL_PARAM",
        "body": [
            "SET_MDL_PARAM $1"
        ],
        "description": "Creates or update a model parameter or a dimension with a specified value."
    },
    "SET_MDL_PARAM_DESCRIPTION": {
        "prefix": "SET_MDL_PARAM_DESCRIPTION",
        "body": [
            "SET_MDL_PARAM_DESCRIPTION $1"
        ],
        "description": "Sets the description of a Creo model parameter."
    },
    "SET_MDL_PARAM_LOCK_STATUS": {
        "prefix": "SET_MDL_PARAM_LOCK_STATUS",
        "body": [
            "SET_MDL_PARAM_LOCK_STATUS $1"
        ],
        "description": "Sets the lock status of a Creo model parameter."
    },
    "SET_MDL_SCALE": {
        "prefix": "SET_MDL_SCALE",
        "body": [
            "SET_MDL_SCALE $1"
        ],
        "description": "Scales a model by a factor. Similar to in Pro/ENGINEER / Creo Parametric."
    },
    "SET_MDL_TOL_CLASS": {
        "prefix": "SET_MDL_TOL_CLASS",
        "body": [
            "SET_MDL_TOL_CLASS $1"
        ],
        "description": "Sets the tolerance class of a model."
    },
    "SET_MDL_TOL_STANDARD": {
        "prefix": "SET_MDL_TOL_STANDARD",
        "body": [
            "SET_MDL_TOL_STANDARD $1"
        ],
        "description": "Sets the tolerance standard of a model. The command is supported since Creo 2.0 M100 and above."
    },
    "SET_NC_STEP_PARAM": {
        "prefix": "SET_NC_STEP_PARAM",
        "body": [
            "SET_NC_STEP_PARAM $1"
        ],
        "description": "Sets the value of a NC step parameter."
    },
    "SET_NC_STEP_TOOL": {
        "prefix": "SET_NC_STEP_TOOL",
        "body": [
            "SET_NC_STEP_TOOL $1"
        ],
        "description": "Assigns a tool to a NC step feature."
    },
    "SET_NC_WORKCELL_PARAM": {
        "prefix": "SET_NC_WORKCELL_PARAM",
        "body": [
            "SET_NC_WORKCELL_PARAM $1"
        ],
        "description": "Sets the value of a NC workcell parameter."
    },
    "SET_NEXT_MDL_NAME": {
        "prefix": "SET_NEXT_MDL_NAME",
        "body": [
            "SET_NEXT_MDL_NAME $1"
        ],
        "description": "Sets the next available name for this model. Since Pro/ENGINEER Wildfire M070 this command also uses the PDMLink auto numbering."
    },
    "SET_NOTE_TEXT": {
        "prefix": "SET_NOTE_TEXT",
        "body": [
            "SET_NOTE_TEXT $1"
        ],
        "description": "Sets the text of an existing note."
    },
    "SET_ON_DRW_LAYER": {
        "prefix": "SET_ON_DRW_LAYER",
        "body": [
            "SET_ON_DRW_LAYER $1"
        ],
        "description": "Places geometry elements, features, parts or sub-assemblies on a drawing layer. The layer will be created if it does not exist yet."
    },
    "SET_ON_LAYER": {
        "prefix": "SET_ON_LAYER",
        "body": [
            "SET_ON_LAYER $1"
        ],
        "description": "Places geometry elements, features, parts or sub-assemblies on a layer. The layer will be created if it does not exist yet."
    },
    "SET_ORIENTATION": {
        "prefix": "SET_ORIENTATION",
        "body": [
            "SET_ORIENTATION $1"
        ],
        "description": "Sets the current view of a model by specifying its name."
    },
    "SET_ORIENTATION_BY_REF": {
        "prefix": "SET_ORIENTATION_BY_REF",
        "body": [
            "SET_ORIENTATION_BY_REF $1"
        ],
        "description": "Sets the current view of a model by specifying its orientation references."
    },
    "SET_ORIENTATION_MATRIX": {
        "prefix": "SET_ORIENTATION_MATRIX",
        "body": [
            "SET_ORIENTATION_MATRIX $1"
        ],
        "description": "Sets the current view of a model by specifying its orientation matrix."
    },
    "SET_ORIENTATION_NAME": {
        "prefix": "SET_ORIENTATION_NAME",
        "body": [
            "SET_ORIENTATION_NAME $1"
        ],
        "description": "Renames an orientation of a solid model. This command is available since Creo 3.0 M140 / Creo 4.0 M020 and above."
    },
    "SET_PRO_PROGRAM_INPUT": {
        "prefix": "SET_PRO_PROGRAM_INPUT",
        "body": [
            "SET_PRO_PROGRAM_INPUT $1"
        ],
        "description": "Sets the input section information of Pro/PROGRAM from a model."
    },
    "SET_READONLY": {
        "prefix": "SET_READONLY",
        "body": [
            "SET_READONLY $1"
        ],
        "description": "Sets read-only mode of a model."
    },
    "SET_REF_NAME": {
        "prefix": "SET_REF_NAME",
        "body": [
            "SET_REF_NAME $1"
        ],
        "description": "Sets name to a specified reference in Creo Elements/Pro."
    },
    "SET_REF_PARAM": {
        "prefix": "SET_REF_PARAM",
        "body": [
            "SET_REF_PARAM $1"
        ],
        "description": "Creates or updates a reference parameter. This can be used to create or update parameters to annotation elements, surfaces, quilts, edges, curves and composite curves."
    },
    "SET_REF_PARAM_DESCRIPTION": {
        "prefix": "SET_REF_PARAM_DESCRIPTION",
        "body": [
            "SET_REF_PARAM_DESCRIPTION $1"
        ],
        "description": "Sets the description of a Creo reference parameter."
    },
    "SET_REF_PARAM_LOCK_STATUS": {
        "prefix": "SET_REF_PARAM_LOCK_STATUS",
        "body": [
            "SET_REF_PARAM_LOCK_STATUS $1"
        ],
        "description": "Sets the lock status of a Creo reference parameter."
    },
    "SET_REF_POS": {
        "prefix": "SET_REF_POS",
        "body": [
            "SET_REF_POS $1"
        ],
        "description": "Sets the internal position on a geometrical reference. This is especially helpful if the reference was searched and not selected. For example the exact location on an edge could be specified. In case the location is not on the geometrical reference the closest position will be used."
    },
    "SET_REGISTRY_STRING": {
        "prefix": "SET_REGISTRY_STRING",
        "body": [
            "SET_REGISTRY_STRING $1"
        ],
        "description": "Sets text to a registry value."
    },
    "SET_REGISTRY_STRINGS": {
        "prefix": "SET_REGISTRY_STRINGS",
        "body": [
            "SET_REGISTRY_STRINGS $1"
        ],
        "description": "Sets an array of strings to a registry value."
    },
    "SET_RELATIONS_UNIT_SENSITIVE": {
        "prefix": "SET_RELATIONS_UNIT_SENSITIVE",
        "body": [
            "SET_RELATIONS_UNIT_SENSITIVE $1"
        ],
        "description": "Sets the sensitivity state of the model relations. This command requires Creo 2.0 M110 or above."
    },
    "SET_RETURN_VALUE": {
        "prefix": "SET_RETURN_VALUE",
        "body": [
            "SET_RETURN_VALUE $1"
        ],
        "description": "Sets the return value for a program file. This is currently only used for the notifications to prevent the feature or model related operations."
    },
    "SET_SIMPREP_DEFAULT_ACTION": {
        "prefix": "SET_SIMPREP_DEFAULT_ACTION",
        "body": [
            "SET_SIMPREP_DEFAULT_ACTION $1"
        ],
        "description": "Ses the default action for an existing simplified representation."
    },
    "SET_SIMPREP_NAME": {
        "prefix": "SET_SIMPREP_NAME",
        "body": [
            "SET_SIMPREP_NAME $1"
        ],
        "description": "Renames a simplified representation of a model. This works only for assemblies, but not for parts."
    },
    "SET_SMT_FEAT_BENDTABLE": {
        "prefix": "SET_SMT_FEAT_BENDTABLE",
        "body": [
            "SET_SMT_FEAT_BENDTABLE $1"
        ],
        "description": "Applies a bend table to a Pro/SHEETMETAL bend or wall feature. The Pro/ENGINEER bend table must not include periods after the file extension (sample.bnd intead of sample.bnd.1)."
    },
    "SET_SMT_MDL_BENDTABLE": {
        "prefix": "SET_SMT_MDL_BENDTABLE",
        "body": [
            "SET_SMT_MDL_BENDTABLE $1"
        ],
        "description": "Applies a bend table to a Pro/SHEETMETAL part. The Pro/ENGINEER bend table must not include periods after the file extension (sample.bnd intead of sample.bnd.1)."
    },
    "SET_SYMBOL_GROUP_SHOWN": {
        "prefix": "SET_SYMBOL_GROUP_SHOWN",
        "body": [
            "SET_SYMBOL_GROUP_SHOWN $1"
        ],
        "description": "Sets a symbol group visible or not visible."
    },
    "SET_SYMBOL_VAR_TEXT": {
        "prefix": "SET_SYMBOL_VAR_TEXT",
        "body": [
            "SET_SYMBOL_VAR_TEXT $1"
        ],
        "description": "Sets the variable text of a symbol by its name."
    },
    "SET_TBLPATTERN_DATA": {
        "prefix": "SET_TBLPATTERN_DATA",
        "body": [
            "SET_TBLPATTERN_DATA $1"
        ],
        "description": "Updates table pattern with data from an array."
    },
    "SET_TBLPATTERN_TABLE": {
        "prefix": "SET_TBLPATTERN_TABLE",
        "body": [
            "SET_TBLPATTERN_TABLE $1"
        ],
        "description": "Activates a specific table of a table pattern."
    },
    "SET_TEXTURE_PLACEMENT_PROPS": {
        "prefix": "SET_TEXTURE_PLACEMENT_PROPS",
        "body": [
            "SET_TEXTURE_PLACEMENT_PROPS $1"
        ],
        "description": "Sets the texture placement properties of assemblies, parts, components or surfaces."
    },
    "SET_TEXTURE_PROPS": {
        "prefix": "SET_TEXTURE_PROPS",
        "body": [
            "SET_TEXTURE_PROPS $1"
        ],
        "description": "Sets the texture properties of assemblies, parts, components or surfaces."
    },
    "SET_UNIT_LENGTH": {
        "prefix": "SET_UNIT_LENGTH",
        "body": [
            "SET_UNIT_LENGTH $1"
        ],
        "description": "Sets the unit system of a model with the specified unit for length."
    },
    "SET_UNIT_SYSTEM": {
        "prefix": "SET_UNIT_SYSTEM",
        "body": [
            "SET_UNIT_SYSTEM $1"
        ],
        "description": "Sets the unit system of a model."
    },
    "SET_VARIED_ITEM_STATE": {
        "prefix": "SET_VARIED_ITEM_STATE",
        "body": [
            "SET_VARIED_ITEM_STATE $1"
        ],
        "description": "Sets the state of a varied item of an inheritance feature or a flexible component. This function requires Pro/ENGINEER Wildfire 4 or above."
    },
    "SET_VARIED_ITEM_VALUE": {
        "prefix": "SET_VARIED_ITEM_VALUE",
        "body": [
            "SET_VARIED_ITEM_VALUE $1"
        ],
        "description": "Sets the value of a varied item of an inheritance feature or a flexible component. This function requires Pro/ENGINEER Wildfire 4 or above."
    },
    "SET_WORKING_DIRECTORY": {
        "prefix": "SET_WORKING_DIRECTORY",
        "body": [
            "SET_WORKING_DIRECTORY $1"
        ],
        "description": "Sets the working directory to a specified path."
    },
    "SHOW_DIM": {
        "prefix": "SHOW_DIM",
        "body": [
            "SHOW_DIM $1"
        ],
        "description": "Shows one dimension or an array of dimensions."
    },
    "SHOW_DIM_ANNOTATION": {
        "prefix": "SHOW_DIM_ANNOTATION",
        "body": [
            "SHOW_DIM_ANNOTATION $1"
        ],
        "description": "Converts a solid dimension to an annotation dimension."
    },
    "SHOW_DIMS": {
        "prefix": "SHOW_DIMS",
        "body": [
            "SHOW_DIMS $1"
        ],
        "description": "Shows dimensions of a specific feature or model."
    },
    "SHOW_DRW_ANNOTATION": {
        "prefix": "SHOW_DRW_ANNOTATION",
        "body": [
            "SHOW_DRW_ANNOTATION $1"
        ],
        "description": "Shows a drawing annotation."
    },
    "SHOW_DRW_FORMAT": {
        "prefix": "SHOW_DRW_FORMAT",
        "body": [
            "SHOW_DRW_FORMAT $1"
        ],
        "description": "Shows or hides the format of a drawing sheet. This command is only available for Creo 2.0 and above."
    },
    "SHOW_DRW_SHEET_DIM": {
        "prefix": "SHOW_DRW_SHEET_DIM",
        "body": [
            "SHOW_DRW_SHEET_DIM $1"
        ],
        "description": "Shows existing Creo Elements/Pro dimension on a drawing sheet specifying the dimension of the solid model."
    },
    "SHOW_DRW_VIEW_ANNOTATION": {
        "prefix": "SHOW_DRW_VIEW_ANNOTATION",
        "body": [
            "SHOW_DRW_VIEW_ANNOTATION $1"
        ],
        "description": "Shows existing Creo Elements/Pro annotations like a note on a drawing view by specifying the annotation of the solid model."
    },
    "SHOW_DRW_VIEW_AXIS": {
        "prefix": "SHOW_DRW_VIEW_AXIS",
        "body": [
            "SHOW_DRW_VIEW_AXIS $1"
        ],
        "description": "SHOW_DRW_VIEW_AXIS"
    },
    "SHOW_DRW_VIEW_DIM": {
        "prefix": "SHOW_DRW_VIEW_DIM",
        "body": [
            "SHOW_DRW_VIEW_DIM $1"
        ],
        "description": "Shows existing Creo Elements/Pro dimension in a drawing view by specifying the dimension of the solid model."
    },
    "SHOW_HELP": {
        "prefix": "SHOW_HELP",
        "body": [
            "SHOW_HELP $1"
        ],
        "description": "Enables a help button in the graphical user interface. If the help button is clicked the specified web page will be opened."
    },
    "SHOW_PARAM": {
        "prefix": "SHOW_PARAM",
        "body": [
            "SHOW_PARAM $1"
        ],
        "description": "Shows current value of the parameter in an information dialog box."
    },
    "SHOW_URL": {
        "prefix": "SHOW_URL",
        "body": [
            "SHOW_URL $1"
        ],
        "description": "Displays an URL in the embedded Creo Elements/Pro web browser."
    },
    "SKETCH_USE_EDGE": {
        "prefix": "SKETCH_USE_EDGE",
        "body": [
            "SKETCH_USE_EDGE $1"
        ],
        "description": "Redefines the sketch of a feature according to the shape of a surface or curve by using its edges. The feature will become dependent to the source surface or curve."
    },
    "SLEEP": {
        "prefix": "SLEEP",
        "body": [
            "SLEEP $1"
        ],
        "description": "Suspends the execution for a specified number of seconds."
    },
    "SMARTHOLECHART_EXEC": {
        "prefix": "SMARTHOLECHART_EXEC",
        "body": [
            "SMARTHOLECHART_EXEC $1"
        ],
        "description": "Executes the search for bore information in SMARTHolechart. SMARTHolechart must be active in the Creo session in order to run this command. It requires the SMARTHolechart version 8.0 M020 or newer."
    },
    "SMARTUPDATE_EXEC": {
        "prefix": "SMARTUPDATE_EXEC",
        "body": [
            "SMARTUPDATE_EXEC $1"
        ],
        "description": "Executes SMARTUpdate for a specified model with a specified configuration. SMARTUpdate must be active in the Creo session in order to run this command. It requires the SMARTUpdate version 8.0 M010 or newer."
    },
    "SORT_ARRAY": {
        "prefix": "SORT_ARRAY",
        "body": [
            "SORT_ARRAY $1"
        ],
        "description": "Sorts all elements of an array. Sub arrays are sorted."
    },
    "SPLIT_STRING": {
        "prefix": "SPLIT_STRING",
        "body": [
            "SPLIT_STRING $1"
        ],
        "description": "Splits a multi line string with line break characters to an array of single lines"
    },
    "START_STOPWATCH": {
        "prefix": "START_STOPWATCH",
        "body": [
            "START_STOPWATCH $1"
        ],
        "description": "Starts a stopwatch."
    },
    "STOP_STOPWATCH": {
        "prefix": "STOP_STOPWATCH",
        "body": [
            "STOP_STOPWATCH $1"
        ],
        "description": "Stops a stopwatch."
    },
    "STRING_TO_REFERENCE": {
        "prefix": "STRING_TO_REFERENCE",
        "body": [
            "STRING_TO_REFERENCE $1"
        ],
        "description": "Constructs a reference variable from two strings. The first string contains the name and extension of the model which owns the reference. The second string contains the reference content."
    },
    "SUB_PICTURE": {
        "prefix": "SUB_PICTURE",
        "body": [
            "SUB_PICTURE $1"
        ],
        "description": "Specifies an overlaying gif image related to the global picture in the dialog box. In case the configuration option IMAGE_GRAPHICS is set to GDIPLUS, also bmp, jpeg and tiff images can be used."
    },
    "SUBSTITUTE_SIMPREP": {
        "prefix": "SUBSTITUTE_SIMPREP",
        "body": [
            "SUBSTITUTE_SIMPREP $1"
        ],
        "description": "Substitutes a simplified representation of a component. This works only for assemblies, but not for parts."
    },
    "SUGGEST_SMT_FIXED_SURFACE": {
        "prefix": "SUGGEST_SMT_FIXED_SURFACE",
        "body": [
            "SUGGEST_SMT_FIXED_SURFACE $1"
        ],
        "description": "SUGGEST_SMT_FIXED_SURFACE"
    },
    "SWITCH_TO_MAIN_MDL": {
        "prefix": "SWITCH_TO_MAIN_MDL",
        "body": [
            "SWITCH_TO_MAIN_MDL $1"
        ],
        "description": "Drawing operations require to switch automatically the current model to the drawing. Use this command to switch back to the main model."
    },
    "SWITCH_TO_MDL": {
        "prefix": "SWITCH_TO_MDL",
        "body": [
            "SWITCH_TO_MDL $1"
        ],
        "description": "Makes a specific model the current Creo Elements/Pro model."
    },
    "SWITCH_TO_MDL_POST": {
        "prefix": "SWITCH_TO_MDL_POST",
        "body": [
            "SWITCH_TO_MDL_POST $1"
        ],
        "description": "Switches to a specified model after the tab file was processed."
    },
    "TERMINATE_PROE": {
        "prefix": "TERMINATE_PROE",
        "body": [
            "TERMINATE_PROE $1"
        ],
        "description": "Terminates the active Pro/ENGINEER / Creo session."
    },
    "TK_APP_LOAD": {
        "prefix": "TK_APP_LOAD",
        "body": [
            "TK_APP_LOAD $1"
        ],
        "description": "Loads the Creo Toolkit dll."
    },
    "TK_APP_UNLOAD": {
        "prefix": "TK_APP_UNLOAD",
        "body": [
            "TK_APP_UNLOAD $1"
        ],
        "description": "Unloads a Creo Toolkit dll."
    },
    "TK_GET_HANDLE_FROM_REGISTRY": {
        "prefix": "TK_GET_HANDLE_FROM_REGISTRY",
        "body": [
            "TK_GET_HANDLE_FROM_REGISTRY $1"
        ],
        "description": "Retrieves the handle from the Creo Toolkit dll from registry. This works only if the Toolkit application writes the result of ProToolkitDllIdGet to the windows registry. The registry key is: . At the end of the application the Toolkit dll should remove this information again from registry. As path it is recommended to use company name/application name."
    },
    "TK_TASK_EXEC": {
        "prefix": "TK_TASK_EXEC",
        "body": [
            "TK_TASK_EXEC $1"
        ],
        "description": "Executes a task of a loaded Creo Toolkit dll."
    },
    "TOOLKIT_APP_LOAD": {
        "prefix": "TOOLKIT_APP_LOAD",
        "body": [
            "TOOLKIT_APP_LOAD $1"
        ],
        "description": "Loads SmartAssembly Toolkit dll."
    },
    "TOOLKIT_APP_UNLOAD": {
        "prefix": "TOOLKIT_APP_UNLOAD",
        "body": [
            "TOOLKIT_APP_UNLOAD $1"
        ],
        "description": "Unloads a SmartAssembly Toolkit dll."
    },
    "TOOLKIT_FUNCTION_CALL": {
        "prefix": "TOOLKIT_FUNCTION_CALL",
        "body": [
            "TOOLKIT_FUNCTION_CALL $1"
        ],
        "description": "Executes a function of another Pro/TOOLKIT dll which is running as an auxiliary application."
    },
    "TOOLKIT_TASK_EXEC": {
        "prefix": "TOOLKIT_TASK_EXEC",
        "body": [
            "TOOLKIT_TASK_EXEC $1"
        ],
        "description": "Executes a task of a loaded SmartAssembly Toolkit dll."
    },
    "TOUCH": {
        "prefix": "TOUCH",
        "body": [
            "TOUCH $1"
        ],
        "description": "Updates the date and time of an existing file or folder or creates a new empty file. The command works similar to the UNIX. The main use of this command is to update the date and time stamp of a folder. Since Creo Parametric buffers the information about models in a directory, copying models by the operation system and trying to retrieve them could cause failures. This could be prevented by updating the date and time stamp."
    },
    "TRANSPOSE_ARRAY": {
        "prefix": "TRANSPOSE_ARRAY",
        "body": [
            "TRANSPOSE_ARRAY $1"
        ],
        "description": "Retrieves an array which switches row and column location of an array with sub-arrays. This is similar to computing a transposed matrix."
    },
    "TRIM_TO_PART": {
        "prefix": "TRIM_TO_PART",
        "body": [
            "TRIM_TO_PART $1"
        ],
        "description": "Trims a library part against the solid surfaces of a specified model."
    },
    "UNDECLARE_MDL_NOTEBOOK": {
        "prefix": "UNDECLARE_MDL_NOTEBOOK",
        "body": [
            "UNDECLARE_MDL_NOTEBOOK $1"
        ],
        "description": "Undeclares a solid model from a notebook."
    },
    "UNDO_CHECKOUT_OBJECTS": {
        "prefix": "UNDO_CHECKOUT_OBJECTS",
        "body": [
            "UNDO_CHECKOUT_OBJECTS $1"
        ],
        "description": "Revokes the checkout of an object in PDMLink."
    },
    "UNERASE_DRW_ANNOTATION": {
        "prefix": "UNERASE_DRW_ANNOTATION",
        "body": [
            "UNERASE_DRW_ANNOTATION $1"
        ],
        "description": "Shows an erased drawing annotation again."
    },
    "UNGROUP_FEATURES": {
        "prefix": "UNGROUP_FEATURES",
        "body": [
            "UNGROUP_FEATURES $1"
        ],
        "description": "Dissolves a group of features."
    },
    "UNHIDE": {
        "prefix": "UNHIDE",
        "body": [
            "UNHIDE $1"
        ],
        "description": "Unhides a feature. This command requires Creo Elements/Pro Wildfire 4 or above."
    },
    "UNLINK_SKETCH": {
        "prefix": "UNLINK_SKETCH",
        "body": [
            "UNLINK_SKETCH $1"
        ],
        "description": "Converts the external sketch of a feature to an internal one, similar like the unlink button in the Edit Definition dialog."
    },
    "UNMERGE_DRW_TABLE": {
        "prefix": "UNMERGE_DRW_TABLE",
        "body": [
            "UNMERGE_DRW_TABLE $1"
        ],
        "description": "Un-merges the cells in the specified rectangle of a drawing table."
    },
    "UNREGISTER_SERVER": {
        "prefix": "UNREGISTER_SERVER",
        "body": [
            "UNREGISTER_SERVER $1"
        ],
        "description": "Unregisters a PDMLink server"
    },
    "UNSET_FLEXIBLE": {
        "prefix": "UNSET_FLEXIBLE",
        "body": [
            "UNSET_FLEXIBLE $1"
        ],
        "description": "Removes flexibility from a component. This function requires Creo 1.0 or above."
    },
    "UNSET_READONLY": {
        "prefix": "UNSET_READONLY",
        "body": [
            "UNSET_READONLY $1"
        ],
        "description": "Removes read-only mode of a model."
    },
    "UPDATE_ALL_DRW_SYMBOLS": {
        "prefix": "UPDATE_ALL_DRW_SYMBOLS",
        "body": [
            "UPDATE_ALL_DRW_SYMBOLS $1"
        ],
        "description": "Updates all drawing symbols to the latest version."
    },
    "UPDATE_DIRECTORY_IDX": {
        "prefix": "UPDATE_DIRECTORY_IDX",
        "body": [
            "UPDATE_DIRECTORY_IDX $1"
        ],
        "description": "Updates the idx family table file for a directory."
    },
    "UPDATE_DRW_VIEWS": {
        "prefix": "UPDATE_DRW_VIEWS",
        "body": [
            "UPDATE_DRW_VIEWS $1"
        ],
        "description": "Updates drawing views on a specific drawing sheet."
    },
    "USE_LIBRARY_MDL": {
        "prefix": "USE_LIBRARY_MDL",
        "body": [
            "USE_LIBRARY_MDL $1"
        ],
        "description": "Uses a library model with an operation like in the ."
    },
    "USER_COLLECT": {
        "prefix": "USER_COLLECT",
        "body": [
            "USER_COLLECT $1"
        ],
        "description": "Allows to select surface sets and edge or curve chains by the help of the collection interfaces."
    },
    "USER_DROP_DOWN": {
        "prefix": "USER_DROP_DOWN",
        "body": [
            "USER_DROP_DOWN $1"
        ],
        "description": "Adds a drop down to the graphical user interface. A drop down provides the functionality to select one item."
    },
    "USER_INPUT_PARAM": {
        "prefix": "USER_INPUT_PARAM",
        "body": [
            "USER_INPUT_PARAM $1"
        ],
        "description": "Prompts input from the user and stores the result to a parameter."
    },
    "USER_LIST_BOX": {
        "prefix": "USER_LIST_BOX",
        "body": [
            "USER_LIST_BOX $1"
        ],
        "description": "Adds a list box to the graphical user interface. A list box provides the functionality to select one or many items."
    },
    "USER_SELECT": {
        "prefix": "USER_SELECT",
        "body": [
            "USER_SELECT $1"
        ],
        "description": "Prompts the user to select a reference in the Creo Elements/Pro model."
    },
    "USER_SELECT_MULTIPLE": {
        "prefix": "USER_SELECT_MULTIPLE",
        "body": [
            "USER_SELECT_MULTIPLE $1"
        ],
        "description": "Prompts the user to select an array of reference in the Creo Elements/Pro model."
    },
    "USER_SELECT_MULTIPLE_OPTIONAL": {
        "prefix": "USER_SELECT_MULTIPLE_OPTIONAL",
        "body": [
            "USER_SELECT_MULTIPLE_OPTIONAL $1"
        ],
        "description": "Prompts the user to select an array of reference in the Creo Elements/Pro model. The selection could be skipped."
    },
    "USER_SELECT_OPTIONAL": {
        "prefix": "USER_SELECT_OPTIONAL",
        "body": [
            "USER_SELECT_OPTIONAL $1"
        ],
        "description": "Prompts the user to select a reference in the Creo Elements/Pro model. The selection could be skipped."
    },
    "USER_TEXT_BOX": {
        "prefix": "USER_TEXT_BOX",
        "body": [
            "USER_TEXT_BOX $1"
        ],
        "description": "Adds a multi line text box the graphical user interface."
    },
    "USER_YESNO_PARAM": {
        "prefix": "USER_YESNO_PARAM",
        "body": [
            "USER_YESNO_PARAM $1"
        ],
        "description": "Prompts a boolean decision from the user and stores the result to a parameter. The information can either be entered as a text or by using the buttons in the message line."
    },
    "VECTOR_CROSS_PRODUCT": {
        "prefix": "VECTOR_CROSS_PRODUCT",
        "body": [
            "VECTOR_CROSS_PRODUCT $1"
        ],
        "description": "Calculates the cross product (also called vector product or outer product) of two vectors."
    },
    "VECTOR_DOT_PRODUCT": {
        "prefix": "VECTOR_DOT_PRODUCT",
        "body": [
            "VECTOR_DOT_PRODUCT $1"
        ],
        "description": "Calculates the dot product (also called scalar product or inner product) of two vectors."
    },
    "VECTOR_FROM_POINTS": {
        "prefix": "VECTOR_FROM_POINTS",
        "body": [
            "VECTOR_FROM_POINTS $1"
        ],
        "description": "Calculates the direction vector from a start point to an end point."
    },
    "VECTOR_GET_LENGTH": {
        "prefix": "VECTOR_GET_LENGTH",
        "body": [
            "VECTOR_GET_LENGTH $1"
        ],
        "description": "Calculates the length of a vector."
    },
    "VECTOR_NORMALIZE": {
        "prefix": "VECTOR_NORMALIZE",
        "body": [
            "VECTOR_NORMALIZE $1"
        ],
        "description": "Normalizes a vector to the unit length 1."
    },
    "VERIFY_FAMINSTANCE": {
        "prefix": "VERIFY_FAMINSTANCE",
        "body": [
            "VERIFY_FAMINSTANCE $1"
        ],
        "description": "Verifies one or all family table instances of a specified family table."
    },
    "VERIFY_RELATIONS": {
        "prefix": "VERIFY_RELATIONS",
        "body": [
            "VERIFY_RELATIONS $1"
        ],
        "description": "Verifies the relations of a reference and returns if they are valid."
    },
    "WAIT_FOR_FILE": {
        "prefix": "WAIT_FOR_FILE",
        "body": [
            "WAIT_FOR_FILE $1"
        ],
        "description": "Waits until a file is created."
    },
    "WEBSERVICE_CALL": {
        "prefix": "WEBSERVICE_CALL",
        "body": [
            "WEBSERVICE_CALL $1"
        ],
        "description": "Sends are web service request by the RESTful architecture style."
    },
    "WINDOW_ACTIVATE": {
        "prefix": "WINDOW_ACTIVATE",
        "body": [
            "WINDOW_ACTIVATE $1"
        ],
        "description": "Activates the window after the tab files was processed."
    },
    "WINDOW_CLOSE": {
        "prefix": "WINDOW_CLOSE",
        "body": [
            "WINDOW_CLOSE $1"
        ],
        "description": "Closes the window after the tab files was processed."
    },
    "WINWORD_CONNECT": {
        "prefix": "WINWORD_CONNECT",
        "body": [
            "WINWORD_CONNECT $1"
        ],
        "description": "Establishes a connection to Microsoft Word. In case Word is not already running, it will be launched. Otherwise a connection to the already running Word program is established."
    },
    "WINWORD_DISCONNECT": {
        "prefix": "WINWORD_DISCONNECT",
        "body": [
            "WINWORD_DISCONNECT $1"
        ],
        "description": "Terminates a connection to Microsoft Word."
    },
    "WINWORD_GET_BOOKMARK_TEXT": {
        "prefix": "WINWORD_GET_BOOKMARK_TEXT",
        "body": [
            "WINWORD_GET_BOOKMARK_TEXT $1"
        ],
        "description": "Searches in the current Word document for a bookmark and stores the content to a ."
    },
    "WINWORD_GET_BOOKMARKS": {
        "prefix": "WINWORD_GET_BOOKMARKS",
        "body": [
            "WINWORD_GET_BOOKMARKS $1"
        ],
        "description": "Retrieves an array of all bookmarks names from the current Word document."
    },
    "WINWORD_LOAD_DOCUMENT": {
        "prefix": "WINWORD_LOAD_DOCUMENT",
        "body": [
            "WINWORD_LOAD_DOCUMENT $1"
        ],
        "description": "Retrieves a new Word document specified by the name. The document could be located either in library or in working directory."
    },
    "WINWORD_REPLACE": {
        "prefix": "WINWORD_REPLACE",
        "body": [
            "WINWORD_REPLACE $1"
        ],
        "description": "Replaces text in the current Word document."
    },
    "WINWORD_SAVE_DOCUMENT": {
        "prefix": "WINWORD_SAVE_DOCUMENT",
        "body": [
            "WINWORD_SAVE_DOCUMENT $1"
        ],
        "description": "Saves a Word document specified by the name. The document could be located either in library or in working directory."
    },
    "WINWORD_SET_BOOKMARK_TEXT": {
        "prefix": "WINWORD_SET_BOOKMARK_TEXT",
        "body": [
            "WINWORD_SET_BOOKMARK_TEXT $1"
        ],
        "description": "Searches in the current Word document for a bookmark and replaces the content with the new text."
    },
    "WRITE_EXTERNAL_DATA": {
        "prefix": "WRITE_EXTERNAL_DATA",
        "body": [
            "WRITE_EXTERNAL_DATA $1"
        ],
        "description": "Writes external data by keyword to a model. The data could be a string value or an array of string values."
    },
    "WRITE_LOG_MESSAGE": {
        "prefix": "WRITE_LOG_MESSAGE",
        "body": [
            "WRITE_LOG_MESSAGE $1"
        ],
        "description": "Writes output to a log file in case the message logging mode is enabled."
    },
    "WRITE_TRAIL_MESSAGE": {
        "prefix": "WRITE_TRAIL_MESSAGE",
        "body": [
            "WRITE_TRAIL_MESSAGE $1"
        ],
        "description": "Writes a tagged message to the trail file. This command is helpful in combination with the configuration option DEBUG_TRAIL_FILE to track complex problems."
    },
    "XML_ADD_NODE": {
        "prefix": "XML_ADD_NODE",
        "body": [
            "XML_ADD_NODE $1"
        ],
        "description": "Adds a new node as child of the XML document or of a parent node."
    },
    "XML_ADD_NODE_ATTRIBUTE": {
        "prefix": "XML_ADD_NODE_ATTRIBUTE",
        "body": [
            "XML_ADD_NODE_ATTRIBUTE $1"
        ],
        "description": "Adds an attribute to an existing node."
    },
    "XML_COMPARE_NODES": {
        "prefix": "XML_COMPARE_NODES",
        "body": [
            "XML_COMPARE_NODES $1"
        ],
        "description": "Compares two XML nodes."
    },
    "XML_DOCUMENT_TO_STRING": {
        "prefix": "XML_DOCUMENT_TO_STRING",
        "body": [
            "XML_DOCUMENT_TO_STRING $1"
        ],
        "description": "Converts an existing XML document to a string."
    },
    "XML_FORMAT_DOCUMENT": {
        "prefix": "XML_FORMAT_DOCUMENT",
        "body": [
            "XML_FORMAT_DOCUMENT $1"
        ],
        "description": "Formats an existing XML document with indentions and line breaks."
    },
    "XML_GET_ATTRIBUTE_NAME": {
        "prefix": "XML_GET_ATTRIBUTE_NAME",
        "body": [
            "XML_GET_ATTRIBUTE_NAME $1"
        ],
        "description": "Gets the name of an existing attribute."
    },
    "XML_GET_ATTRIBUTE_VALUE": {
        "prefix": "XML_GET_ATTRIBUTE_VALUE",
        "body": [
            "XML_GET_ATTRIBUTE_VALUE $1"
        ],
        "description": "Gets the value of an existing node."
    },
    "XML_GET_NODE": {
        "prefix": "XML_GET_NODE",
        "body": [
            "XML_GET_NODE $1"
        ],
        "description": "Retrieves a node from a XML document or from a parent node."
    },
    "XML_GET_NODE_ATTRIBUTE": {
        "prefix": "XML_GET_NODE_ATTRIBUTE",
        "body": [
            "XML_GET_NODE_ATTRIBUTE $1"
        ],
        "description": "Retrieves an attribute from an existing node."
    },
    "XML_GET_NODE_ATTRIBUTES": {
        "prefix": "XML_GET_NODE_ATTRIBUTES",
        "body": [
            "XML_GET_NODE_ATTRIBUTES $1"
        ],
        "description": "Retrieves an array of attributes from an existing node."
    },
    "XML_GET_NODE_NAME": {
        "prefix": "XML_GET_NODE_NAME",
        "body": [
            "XML_GET_NODE_NAME $1"
        ],
        "description": "Gets the name of an existing node."
    },
    "XML_GET_NODE_TYPE": {
        "prefix": "XML_GET_NODE_TYPE",
        "body": [
            "XML_GET_NODE_TYPE $1"
        ],
        "description": "Gets the type of an existing node."
    },
    "XML_GET_NODE_VALUE": {
        "prefix": "XML_GET_NODE_VALUE",
        "body": [
            "XML_GET_NODE_VALUE $1"
        ],
        "description": "Gets the value of an existing node."
    },
    "XML_GET_NODES": {
        "prefix": "XML_GET_NODES",
        "body": [
            "XML_GET_NODES $1"
        ],
        "description": "Retrieves nodes from a XML document or from a parent node."
    },
    "XML_GET_SIBLING_NODE": {
        "prefix": "XML_GET_SIBLING_NODE",
        "body": [
            "XML_GET_SIBLING_NODE $1"
        ],
        "description": "Retrieves a sibling of a XML node."
    },
    "XML_GET_SIBLING_NODES": {
        "prefix": "XML_GET_SIBLING_NODES",
        "body": [
            "XML_GET_SIBLING_NODES $1"
        ],
        "description": "Retrieves siblings of a XML node."
    },
    "XML_INIT_DOCUMENT": {
        "prefix": "XML_INIT_DOCUMENT",
        "body": [
            "XML_INIT_DOCUMENT $1"
        ],
        "description": "Initializes a XML document from string."
    },
    "XML_LOAD_DOCUMENT": {
        "prefix": "XML_LOAD_DOCUMENT",
        "body": [
            "XML_LOAD_DOCUMENT $1"
        ],
        "description": "Loads a XML document from file, http or ftp connection."
    },
    "XML_NEW_DOCUMENT": {
        "prefix": "XML_NEW_DOCUMENT",
        "body": [
            "XML_NEW_DOCUMENT $1"
        ],
        "description": "Creates a new XML document which just includes the instruction line."
    },
    "XML_QUERY_VALUES": {
        "prefix": "XML_QUERY_VALUES",
        "body": [
            "XML_QUERY_VALUES $1"
        ],
        "description": "Queries values from a XML document or from a parent node."
    },
    "XML_SAVE_DOCUMENT": {
        "prefix": "XML_SAVE_DOCUMENT",
        "body": [
            "XML_SAVE_DOCUMENT $1"
        ],
        "description": "Saves a XML document to disk."
    },
    "XML_SET_NODE_VALUE": {
        "prefix": "XML_SET_NODE_VALUE",
        "body": [
            "XML_SET_NODE_VALUE $1"
        ],
        "description": "Sets the value of an existing node."
    },
    "ZIP": {
        "prefix": "ZIP",
        "body": [
            "ZIP $1"
        ],
        "description": "Zips files and folders to a zip file. When a folder is specified all includes files will be added recursively."
    },
    "ZOOM_TO_POS": {
        "prefix": "ZOOM_TO_POS",
        "body": [
            "ZOOM_TO_POS $1"
        ],
        "description": "Zooms to a position in the current model on the screen."
    },
    "ZOOM_TO_REF": {
        "prefix": "ZOOM_TO_REF",
        "body": [
            "ZOOM_TO_REF $1"
        ],
        "description": "Zooms to a reference in the current model on the screen."
    },
    "ADD_CONSTRAINTS": {
        "prefix": "ADD_CONSTRAINTS",
        "body": [
            "ADD_CONSTRAINTS",
            "$1",
            "END_ADD_CONSTRAINTS"
        ],
        "description": "Adds further constraints to a placed component."
    },
    "ASSEMBLE": {
        "prefix": "ASSEMBLE",
        "body": [
            "ASSEMBLE",
            "$1",
            "END_ASSEMBLE"
        ],
        "description": "Assembles a library component by specifying the constraints."
    },
    "BEGIN_ASM_DESCR": {
        "prefix": "BEGIN_ASM_DESCR",
        "body": [
            "BEGIN_ASM_DESCR",
            "$1",
            "END_ASM_DESCR"
        ],
        "description": "Assembly description block."
    },
    "BEGIN_CATCH_ERROR": {
        "prefix": "BEGIN_CATCH_ERROR",
        "body": [
            "BEGIN_CATCH_ERROR",
            "$1",
            "END_CATCH_ERROR"
        ],
        "description": "Runtime errors like invalid references are causing the program to stop with an error message. This command disables the runtime error checking and continues to proceed with the next valid statements. For syntax errors the program will stop in any case."
    },
    "BEGIN_COMP_DESCR": {
        "prefix": "BEGIN_COMP_DESCR",
        "body": [
            "BEGIN_COMP_DESCR",
            "$1",
            "END_COMP_DESCR"
        ],
        "description": "Component description block."
    },
    "BEGIN_CONSTRAINT_SET": {
        "prefix": "BEGIN_CONSTRAINT_SET",
        "body": [
            "BEGIN_CONSTRAINT_SET",
            "$1",
            "END_CONSTRAINT_SET"
        ],
        "description": "Constraint sets are defined in the following manner:"
    },
    "BEGIN_DEBUG": {
        "prefix": "BEGIN_DEBUG",
        "body": [
            "BEGIN_DEBUG",
            "$1",
            "END_DEBUG"
        ],
        "description": "Starts debug mode when processing a tab file. After every line the user has to confirm to go on in a Creo Elements/Pro string menu via Done select or Quit select."
    },
    "BEGIN_DEP_DESCR": {
        "prefix": "BEGIN_DEP_DESCR",
        "body": [
            "BEGIN_DEP_DESCR",
            "$1",
            "END_DEP_DESCR"
        ],
        "description": "Dependency description block."
    },
    "BEGIN_GUI_DESCR": {
        "prefix": "BEGIN_GUI_DESCR",
        "body": [
            "BEGIN_GUI_DESCR",
            "$1",
            "END_GUI_DESCR"
        ],
        "description": "Graphical user interface block."
    },
    "BEGIN_SUBCOMP": {
        "prefix": "BEGIN_SUBCOMP",
        "body": [
            "BEGIN_SUBCOMP",
            "$1",
            "END_SUBCOMP"
        ],
        "description": "Starts debug mode when processing a tab file. After every line the user has to confirm to go on in a Creo Elements/Pro string menu via Done select or Quit select."
    },
    "BEGIN_SUBCOMP_INFO": {
        "prefix": "BEGIN_SUBCOMP_INFO",
        "body": [
            "BEGIN_SUBCOMP_INFO",
            "$1",
            "END_SUBCOMP_INFO"
        ],
        "description": "Distinguishes if a component description file is used as a main component or as a sub component. Elements inside BEGIN_SUBCOMP_INFO ... END_SUBCOMP_INFO are only executed in case this component description file is used because of a component description block entry."
    },
    "BEGIN_SUBTABLE": {
        "prefix": "BEGIN_SUBTABLE",
        "body": [
            "BEGIN_SUBTABLE",
            "$1",
            "END_SUBTABLE"
        ],
        "description": "BEGIN_SUBTABLE"
    },
    "BEGIN_TABLE": {
        "prefix": "BEGIN_TABLE",
        "body": [
            "BEGIN_TABLE",
            "$1",
            "END_TABLE"
        ],
        "description": "Start the table definition."
    },
    "BEGIN_TAB_DESCR": {
        "prefix": "BEGIN_TAB_DESCR",
        "body": [
            "BEGIN_TAB_DESCR",
            "$1",
            "END_TAB_DESCR"
        ],
        "description": "Table description block."
    },
    "BEGIN_TOPELEM_INFO": {
        "prefix": "BEGIN_TOPELEM_INFO",
        "body": [
            "BEGIN_TOPELEM_INFO",
            "$1",
            "END_TOPELEM_INFO"
        ],
        "description": "Distinguishes if a component description file is used as a main component or as a sub component. Elements inside BEGIN_TOPELEM_INFO ... END_TOPELEM_INFO are only executed in case this component description file is used as a main component. In case it is executed because of a component description block entry, it will be ignored."
    },
    "CALL_EX": {
        "prefix": "CALL_EX",
        "body": [
            "CALL_EX",
            "$1",
            "END_CALL_EX"
        ],
        "description": "Executes another script file by specifying the file name. The script file execution starts in the assembly description block."
    },
    "CREATE_DRW_SYMBOL": {
        "prefix": "CREATE_DRW_SYMBOL",
        "body": [
            "CREATE_DRW_SYMBOL",
            "$1",
            "END_CREATE_DRW_SYMBOL"
        ],
        "description": "Creates a drawing symbol by use of a drawing symbol file."
    },
    "CREATE_DRW_SYMBOL_EX": {
        "prefix": "CREATE_DRW_SYMBOL_EX",
        "body": [
            "CREATE_DRW_SYMBOL_EX",
            "$1",
            "END_CREATE_DRW_SYMBOL_EX"
        ],
        "description": "Creates a drawing symbol by use of a drawing symbol file."
    },
    "CREATE_DRW_VIEW_SYMBOL": {
        "prefix": "CREATE_DRW_VIEW_SYMBOL",
        "body": [
            "CREATE_DRW_VIEW_SYMBOL",
            "$1",
            "END_CREATE_DRW_VIEW_SYMBOL"
        ],
        "description": "Creates a drawing symbol for a specific view by use of a drawing symbol file."
    },
    "CREATE_DRW_VIEW_SYMBOL_EX": {
        "prefix": "CREATE_DRW_VIEW_SYMBOL_EX",
        "body": [
            "CREATE_DRW_VIEW_SYMBOL_EX",
            "$1",
            "END_CREATE_DRW_VIEW_SYMBOL_EX"
        ],
        "description": "Creates a drawing symbol for a specific view by use of a drawing symbol file."
    },
    "CREATE_FEATURE_RELATION": {
        "prefix": "CREATE_FEATURE_RELATION",
        "body": [
            "CREATE_FEATURE_RELATION",
            "$1",
            "END_CREATE_FEATURE_RELATION"
        ],
        "description": "Creates a Creo Elements/Pro feature relation."
    },
    "CREATE_GENERAL_MERGE": {
        "prefix": "CREATE_GENERAL_MERGE",
        "body": [
            "CREATE_GENERAL_MERGE",
            "$1",
            "END_CREATE_GENERAL_MERGE"
        ],
        "description": "Creates merge and inheritance features."
    },
    "CREATE_RELATION": {
        "prefix": "CREATE_RELATION",
        "body": [
            "CREATE_RELATION",
            "$1",
            "END_CREATE_RELATION"
        ],
        "description": "Creates a Creo Elements/Pro model relation."
    },
    "CREATE_SYMBOL": {
        "prefix": "CREATE_SYMBOL",
        "body": [
            "CREATE_SYMBOL",
            "$1",
            "END_CREATE_SYMBOL"
        ],
        "description": "Creates a symbol in a solid model."
    },
    "CREATE_UDF": {
        "prefix": "CREATE_UDF",
        "body": [
            "CREATE_UDF",
            "$1",
            "END_CREATE_UDF"
        ],
        "description": "Creates a user-defined feature with specified references and variable dimensions."
    },
    "REMOVE_FEATURE_RELATION": {
        "prefix": "REMOVE_FEATURE_RELATION",
        "body": [
            "REMOVE_FEATURE_RELATION",
            "$1",
            "END_REMOVE_FEATURE_RELATION"
        ],
        "description": "Removes Creo Elements/Pro feature relations."
    },
    "REMOVE_RELATION": {
        "prefix": "REMOVE_RELATION",
        "body": [
            "REMOVE_RELATION",
            "$1",
            "END_REMOVE_RELATION"
        ],
        "description": "Removes Creo Elements/Pro feature relations."
    },
    "BEGIN_SIGNATURE": {
        "prefix": "BEGIN_SIGNATURE",
        "body": [
            "BEGIN_SIGNATURE",
            "$1",
            "END_SIGNATURE"
        ],
        "description": "BEGIN_SIGNATURE"
    },
    "SNIPPET": {
        "prefix": "SNIPPET",
        "body": [
            "SNIPPET",
            "$1",
            "END_SNIPPET"
        ],
        "description": "SNIPPET"
    },
    "IF": {
        "prefix": "IF",
        "body": [
            "IF ${1:condition} ",
            "\t$0",
            "${2| ,ELSE_IF,ELSE|}${3: }",
            "\t",
            "END_IF"
        ],
        "description": "Determines if a block of code is computed or not through evaluating a condition term."
    },
    "WHILE": {
        "prefix": "WHILE",
        "body": [
            "WHILE ${1:condition} ",
            "\t$0",
            "\tcount++",
            "END_WHILE"
        ],
        "description": "Processes a loop over a code sequence as long as a condition is true."
    },
    "FOR": {
        "prefix": "FOR",
        "body": [
            "FOR ${1:an_item} REF ${2|ARRAY,REVERSE_ARRAY,MAP,REVERSE_MAP|}  ${3:the_container} ",
            "\t$0",
            "END_FOR"
        ],
        "description": "Processes a loop over a code sequence for several references which are detected because of the specified option."
    },
    "ABSOLUTE": {
        "prefix": "ABSOLUTE",
        "body": [
            "ABSOLUTE $1"
        ],
        "description": "ABSOLUTE"
    },
    "ACTIVE": {
        "prefix": "ACTIVE",
        "body": [
            "ACTIVE $1"
        ],
        "description": "ACTIVE"
    },
    "ADD_EXP_TO_MAP": {
        "prefix": "ADD_EXP_TO_MAP",
        "body": [
            "ADD_EXP_TO_MAP $1"
        ],
        "description": "ADD_EXP_TO_MAP"
    },
    "ADD_REQ_SHORT": {
        "prefix": "ADD_REQ_SHORT",
        "body": [
            "ADD_REQ_SHORT $1"
        ],
        "description": "ADD_REQ_SHORT"
    },
    "ADJUST_PAPER_SIZE": {
        "prefix": "ADJUST_PAPER_SIZE",
        "body": [
            "ADJUST_PAPER_SIZE $1"
        ],
        "description": "ADJUST_PAPER_SIZE"
    },
    "AFTER": {
        "prefix": "AFTER",
        "body": [
            "AFTER $1"
        ],
        "description": "AFTER"
    },
    "ALIGN": {
        "prefix": "ALIGN",
        "body": [
            "ALIGN $1"
        ],
        "description": "ALIGN"
    },
    "ALIGN_ANGLE_OFF": {
        "prefix": "ALIGN_ANGLE_OFF",
        "body": [
            "ALIGN_ANGLE_OFF $1"
        ],
        "description": "ALIGN_ANGLE_OFF"
    },
    "ALIGN_ANGLE_OFF_FLIP": {
        "prefix": "ALIGN_ANGLE_OFF_FLIP",
        "body": [
            "ALIGN_ANGLE_OFF_FLIP $1"
        ],
        "description": "ALIGN_ANGLE_OFF_FLIP"
    },
    "ALIGN_FLIP": {
        "prefix": "ALIGN_FLIP",
        "body": [
            "ALIGN_FLIP $1"
        ],
        "description": "ALIGN_FLIP"
    },
    "ALIGN_OFF": {
        "prefix": "ALIGN_OFF",
        "body": [
            "ALIGN_OFF $1"
        ],
        "description": "ALIGN_OFF"
    },
    "ALIGN_OFF_FLIP": {
        "prefix": "ALIGN_OFF_FLIP",
        "body": [
            "ALIGN_OFF_FLIP $1"
        ],
        "description": "ALIGN_OFF_FLIP"
    },
    "ALIGN_ORIENT": {
        "prefix": "ALIGN_ORIENT",
        "body": [
            "ALIGN_ORIENT $1"
        ],
        "description": "ALIGN_ORIENT"
    },
    "ALL": {
        "prefix": "ALL",
        "body": [
            "ALL $1"
        ],
        "description": "ALL"
    },
    "ALLOW_INACTIVE": {
        "prefix": "ALLOW_INACTIVE",
        "body": [
            "ALLOW_INACTIVE $1"
        ],
        "description": "ALLOW_INACTIVE"
    },
    "ALLOW_RECREATE": {
        "prefix": "ALLOW_RECREATE",
        "body": [
            "ALLOW_RECREATE $1"
        ],
        "description": "ALLOW_RECREATE"
    },
    "ALLOW_RESELECT": {
        "prefix": "ALLOW_RESELECT",
        "body": [
            "ALLOW_RESELECT $1"
        ],
        "description": "ALLOW_RESELECT"
    },
    "ALLOW_SIMPREP_SUPPRESSED": {
        "prefix": "ALLOW_SIMPREP_SUPPRESSED",
        "body": [
            "ALLOW_SIMPREP_SUPPRESSED $1"
        ],
        "description": "ALLOW_SIMPREP_SUPPRESSED"
    },
    "ALLOW_SUPPRESSED": {
        "prefix": "ALLOW_SUPPRESSED",
        "body": [
            "ALLOW_SUPPRESSED $1"
        ],
        "description": "ALLOW_SUPPRESSED"
    },
    "ALL_INSTANCES": {
        "prefix": "ALL_INSTANCES",
        "body": [
            "ALL_INSTANCES $1"
        ],
        "description": "ALL_INSTANCES"
    },
    "ALL_REFS_IN_FEAT": {
        "prefix": "ALL_REFS_IN_FEAT",
        "body": [
            "ALL_REFS_IN_FEAT $1"
        ],
        "description": "ALL_REFS_IN_FEAT"
    },
    "ALL_VERSIONS": {
        "prefix": "ALL_VERSIONS",
        "body": [
            "ALL_VERSIONS $1"
        ],
        "description": "ALL_VERSIONS"
    },
    "ANGLE": {
        "prefix": "ANGLE",
        "body": [
            "ANGLE $1"
        ],
        "description": "ANGLE"
    },
    "ANGLE_CONTROL": {
        "prefix": "ANGLE_CONTROL",
        "body": [
            "ANGLE_CONTROL $1"
        ],
        "description": "ANGLE_CONTROL"
    },
    "ANNOTATION_DIM_OPTION": {
        "prefix": "ANNOTATION_DIM_OPTION",
        "body": [
            "ANNOTATION_DIM_OPTION $1"
        ],
        "description": "ANNOTATION_DIM_OPTION"
    },
    "ANNOTATION_PLANE_OPTION": {
        "prefix": "ANNOTATION_PLANE_OPTION",
        "body": [
            "ANNOTATION_PLANE_OPTION $1"
        ],
        "description": "ANNOTATION_PLANE_OPTION"
    },
    "ARGUMENTS": {
        "prefix": "ARGUMENTS",
        "body": [
            "ARGUMENTS $1"
        ],
        "description": "ARGUMENTS"
    },
    "ARRAY": {
        "prefix": "ARRAY",
        "body": [
            "ARRAY $1"
        ],
        "description": "ARRAY"
    },
    "ARRAY_EMPTY": {
        "prefix": "ARRAY_EMPTY",
        "body": [
            "ARRAY_EMPTY $1"
        ],
        "description": "ARRAY_EMPTY"
    },
    "ARROW_TYPE": {
        "prefix": "ARROW_TYPE",
        "body": [
            "ARROW_TYPE $1"
        ],
        "description": "ARROW_TYPE"
    },
    "ASCII": {
        "prefix": "ASCII",
        "body": [
            "ASCII $1"
        ],
        "description": "ASCII"
    },
    "ASK_FOR_SIMPREP": {
        "prefix": "ASK_FOR_SIMPREP",
        "body": [
            "ASK_FOR_SIMPREP $1"
        ],
        "description": "ASK_FOR_SIMPREP"
    },
    "ASK_RENAME_EXISTING": {
        "prefix": "ASK_RENAME_EXISTING",
        "body": [
            "ASK_RENAME_EXISTING $1"
        ],
        "description": "ASK_RENAME_EXISTING"
    },
    "ASK_USER": {
        "prefix": "ASK_USER",
        "body": [
            "ASK_USER $1"
        ],
        "description": "ASK_USER"
    },
    "ASYNC": {
        "prefix": "ASYNC",
        "body": [
            "ASYNC $1"
        ],
        "description": "ASYNC"
    },
    "ATTACH_LEADERS": {
        "prefix": "ATTACH_LEADERS",
        "body": [
            "ATTACH_LEADERS $1"
        ],
        "description": "ATTACH_LEADERS"
    },
    "ATTACH_TO": {
        "prefix": "ATTACH_TO",
        "body": [
            "ATTACH_TO $1"
        ],
        "description": "ATTACH_TO"
    },
    "ATTACH_TYPE_REF1": {
        "prefix": "ATTACH_TYPE_REF1",
        "body": [
            "ATTACH_TYPE_REF1 $1"
        ],
        "description": "ATTACH_TYPE_REF1"
    },
    "ATTACH_TYPE_REF2": {
        "prefix": "ATTACH_TYPE_REF2",
        "body": [
            "ATTACH_TYPE_REF2 $1"
        ],
        "description": "ATTACH_TYPE_REF2"
    },
    "AT_INDEX": {
        "prefix": "AT_INDEX",
        "body": [
            "AT_INDEX $1"
        ],
        "description": "AT_INDEX"
    },
    "AUTOMATIC": {
        "prefix": "AUTOMATIC",
        "body": [
            "AUTOMATIC $1"
        ],
        "description": "AUTOMATIC"
    },
    "AUTOSEL_SUBCOMP": {
        "prefix": "AUTOSEL_SUBCOMP",
        "body": [
            "AUTOSEL_SUBCOMP $1"
        ],
        "description": "AUTOSEL_SUBCOMP"
    },
    "AUTO_ADJUST_HEIGHT": {
        "prefix": "AUTO_ADJUST_HEIGHT",
        "body": [
            "AUTO_ADJUST_HEIGHT $1"
        ],
        "description": "AUTO_ADJUST_HEIGHT"
    },
    "AUTO_CLOSE": {
        "prefix": "AUTO_CLOSE",
        "body": [
            "AUTO_CLOSE $1"
        ],
        "description": "AUTO_CLOSE"
    },
    "AUTO_COMMIT": {
        "prefix": "AUTO_COMMIT",
        "body": [
            "AUTO_COMMIT $1"
        ],
        "description": "AUTO_COMMIT"
    },
    "BASIC": {
        "prefix": "BASIC",
        "body": [
            "BASIC $1"
        ],
        "description": "BASIC"
    },
    "BEFORE": {
        "prefix": "BEFORE",
        "body": [
            "BEFORE $1"
        ],
        "description": "BEFORE"
    },
    "BINARY": {
        "prefix": "BINARY",
        "body": [
            "BINARY $1"
        ],
        "description": "BINARY"
    },
    "BLANK": {
        "prefix": "BLANK",
        "body": [
            "BLANK $1"
        ],
        "description": "BLANK"
    },
    "BOM_COMPONENTS": {
        "prefix": "BOM_COMPONENTS",
        "body": [
            "BOM_COMPONENTS $1"
        ],
        "description": "BOM_COMPONENTS"
    },
    "BOTH": {
        "prefix": "BOTH",
        "body": [
            "BOTH $1"
        ],
        "description": "BOTH"
    },
    "BOTTOM": {
        "prefix": "BOTTOM",
        "body": [
            "BOTTOM $1"
        ],
        "description": "BOTTOM"
    },
    "BOTTOM_CENTER": {
        "prefix": "BOTTOM_CENTER",
        "body": [
            "BOTTOM_CENTER $1"
        ],
        "description": "BOTTOM_CENTER"
    },
    "BOTTOM_LEFT": {
        "prefix": "BOTTOM_LEFT",
        "body": [
            "BOTTOM_LEFT $1"
        ],
        "description": "BOTTOM_LEFT"
    },
    "BOTTOM_RIGHT": {
        "prefix": "BOTTOM_RIGHT",
        "body": [
            "BOTTOM_RIGHT $1"
        ],
        "description": "BOTTOM_RIGHT"
    },
    "BOX": {
        "prefix": "BOX",
        "body": [
            "BOX $1"
        ],
        "description": "BOX"
    },
    "BROKEN_EDGE": {
        "prefix": "BROKEN_EDGE",
        "body": [
            "BROKEN_EDGE $1"
        ],
        "description": "BROKEN_EDGE"
    },
    "BUFFER_TO_EXCEL": {
        "prefix": "BUFFER_TO_EXCEL",
        "body": [
            "BUFFER_TO_EXCEL $1"
        ],
        "description": "BUFFER_TO_EXCEL"
    },
    "BUFFER_TO_GOOGLESHEET": {
        "prefix": "BUFFER_TO_GOOGLESHEET",
        "body": [
            "BUFFER_TO_GOOGLESHEET $1"
        ],
        "description": "BUFFER_TO_GOOGLESHEET"
    },
    "BULK": {
        "prefix": "BULK",
        "body": [
            "BULK $1"
        ],
        "description": "BULK"
    },
    "BUMP_TEXTURE": {
        "prefix": "BUMP_TEXTURE",
        "body": [
            "BUMP_TEXTURE $1"
        ],
        "description": "BUMP_TEXTURE"
    },
    "BYTE_ENCODING": {
        "prefix": "BYTE_ENCODING",
        "body": [
            "BYTE_ENCODING $1"
        ],
        "description": "BYTE_ENCODING"
    },
    "BY_FEATUREGEOMETRY": {
        "prefix": "BY_FEATUREGEOMETRY",
        "body": [
            "BY_FEATUREGEOMETRY $1"
        ],
        "description": "BY_FEATUREGEOMETRY"
    },
    "BY_SOLIDGEOMETRY": {
        "prefix": "BY_SOLIDGEOMETRY",
        "body": [
            "BY_SOLIDGEOMETRY $1"
        ],
        "description": "BY_SOLIDGEOMETRY"
    },
    "CALC_POS": {
        "prefix": "CALC_POS",
        "body": [
            "CALC_POS $1"
        ],
        "description": "CALC_POS"
    },
    "CAPTURE_OUTPUT": {
        "prefix": "CAPTURE_OUTPUT",
        "body": [
            "CAPTURE_OUTPUT $1"
        ],
        "description": "CAPTURE_OUTPUT"
    },
    "CASE_SENSITIVE": {
        "prefix": "CASE_SENSITIVE",
        "body": [
            "CASE_SENSITIVE $1"
        ],
        "description": "CASE_SENSITIVE"
    },
    "CELL_BY_INDEX": {
        "prefix": "CELL_BY_INDEX",
        "body": [
            "CELL_BY_INDEX $1"
        ],
        "description": "CELL_BY_INDEX"
    },
    "CELL_BY_NAME": {
        "prefix": "CELL_BY_NAME",
        "body": [
            "CELL_BY_NAME $1"
        ],
        "description": "CELL_BY_NAME"
    },
    "CENTER": {
        "prefix": "CENTER",
        "body": [
            "CENTER $1"
        ],
        "description": "CENTER"
    },
    "CENTERED": {
        "prefix": "CENTERED",
        "body": [
            "CENTERED $1"
        ],
        "description": "CENTERED"
    },
    "CENTER_LEFT": {
        "prefix": "CENTER_LEFT",
        "body": [
            "CENTER_LEFT $1"
        ],
        "description": "CENTER_LEFT"
    },
    "CENTER_RIGHT": {
        "prefix": "CENTER_RIGHT",
        "body": [
            "CENTER_RIGHT $1"
        ],
        "description": "CENTER_RIGHT"
    },
    "CHAIN_ALLOW_ALL": {
        "prefix": "CHAIN_ALLOW_ALL",
        "body": [
            "CHAIN_ALLOW_ALL $1"
        ],
        "description": "CHAIN_ALLOW_ALL"
    },
    "CHAIN_BNDRY_CHAIN": {
        "prefix": "CHAIN_BNDRY_CHAIN",
        "body": [
            "CHAIN_BNDRY_CHAIN $1"
        ],
        "description": "CHAIN_BNDRY_CHAIN"
    },
    "CHAIN_CURVE_CHAIN": {
        "prefix": "CHAIN_CURVE_CHAIN",
        "body": [
            "CHAIN_CURVE_CHAIN $1"
        ],
        "description": "CHAIN_CURVE_CHAIN"
    },
    "CHAIN_FROM_TO": {
        "prefix": "CHAIN_FROM_TO",
        "body": [
            "CHAIN_FROM_TO $1"
        ],
        "description": "CHAIN_FROM_TO"
    },
    "CHAIN_INTENT_EDGE": {
        "prefix": "CHAIN_INTENT_EDGE",
        "body": [
            "CHAIN_INTENT_EDGE $1"
        ],
        "description": "CHAIN_INTENT_EDGE"
    },
    "CHAIN_ONE_BY_ONE": {
        "prefix": "CHAIN_ONE_BY_ONE",
        "body": [
            "CHAIN_ONE_BY_ONE $1"
        ],
        "description": "CHAIN_ONE_BY_ONE"
    },
    "CHAIN_SURF_CHAIN": {
        "prefix": "CHAIN_SURF_CHAIN",
        "body": [
            "CHAIN_SURF_CHAIN $1"
        ],
        "description": "CHAIN_SURF_CHAIN"
    },
    "CHAIN_TAN_CHAIN": {
        "prefix": "CHAIN_TAN_CHAIN",
        "body": [
            "CHAIN_TAN_CHAIN $1"
        ],
        "description": "CHAIN_TAN_CHAIN"
    },
    "CHANGED": {
        "prefix": "CHANGED",
        "body": [
            "CHANGED $1"
        ],
        "description": "CHANGED"
    },
    "CHANGED_AND_SPECIFIED": {
        "prefix": "CHANGED_AND_SPECIFIED",
        "body": [
            "CHANGED_AND_SPECIFIED $1"
        ],
        "description": "CHANGED_AND_SPECIFIED"
    },
    "CHANGED_AND_UPDATED": {
        "prefix": "CHANGED_AND_UPDATED",
        "body": [
            "CHANGED_AND_UPDATED $1"
        ],
        "description": "CHANGED_AND_UPDATED"
    },
    "CHECKIN_LOCATION": {
        "prefix": "CHECKIN_LOCATION",
        "body": [
            "CHECKIN_LOCATION $1"
        ],
        "description": "CHECKIN_LOCATION"
    },
    "CHECKIN_OPTION": {
        "prefix": "CHECKIN_OPTION",
        "body": [
            "CHECKIN_OPTION $1"
        ],
        "description": "CHECKIN_OPTION"
    },
    "CHECKIN_WORKSPACE_LOCATION": {
        "prefix": "CHECKIN_WORKSPACE_LOCATION",
        "body": [
            "CHECKIN_WORKSPACE_LOCATION $1"
        ],
        "description": "CHECKIN_WORKSPACE_LOCATION"
    },
    "CHECKIN_WORKSPACE_OPTION": {
        "prefix": "CHECKIN_WORKSPACE_OPTION",
        "body": [
            "CHECKIN_WORKSPACE_OPTION $1"
        ],
        "description": "CHECKIN_WORKSPACE_OPTION"
    },
    "CHECK_SAVED": {
        "prefix": "CHECK_SAVED",
        "body": [
            "CHECK_SAVED $1"
        ],
        "description": "CHECK_SAVED"
    },
    "CHECK_SUBASMS": {
        "prefix": "CHECK_SUBASMS",
        "body": [
            "CHECK_SUBASMS $1"
        ],
        "description": "CHECK_SUBASMS"
    },
    "CHORD_HEIGHT": {
        "prefix": "CHORD_HEIGHT",
        "body": [
            "CHORD_HEIGHT $1"
        ],
        "description": "CHORD_HEIGHT"
    },
    "CLEAN_POSITIONS": {
        "prefix": "CLEAN_POSITIONS",
        "body": [
            "CLEAN_POSITIONS $1"
        ],
        "description": "CLEAN_POSITIONS"
    },
    "CLIP": {
        "prefix": "CLIP",
        "body": [
            "CLIP $1"
        ],
        "description": "CLIP"
    },
    "CLIP_ALL": {
        "prefix": "CLIP_ALL",
        "body": [
            "CLIP_ALL $1"
        ],
        "description": "CLIP_ALL"
    },
    "CODEPAGE": {
        "prefix": "CODEPAGE",
        "body": [
            "CODEPAGE $1"
        ],
        "description": "CODEPAGE"
    },
    "COLOR_TEXTURE": {
        "prefix": "COLOR_TEXTURE",
        "body": [
            "COLOR_TEXTURE $1"
        ],
        "description": "COLOR_TEXTURE"
    },
    "COMB_VIEW_PROPS": {
        "prefix": "COMB_VIEW_PROPS",
        "body": [
            "COMB_VIEW_PROPS $1"
        ],
        "description": "COMB_VIEW_PROPS"
    },
    "COMMIT": {
        "prefix": "COMMIT",
        "body": [
            "COMMIT $1"
        ],
        "description": "COMMIT"
    },
    "COMPARE_DIMS": {
        "prefix": "COMPARE_DIMS",
        "body": [
            "COMPARE_DIMS $1"
        ],
        "description": "COMPARE_DIMS"
    },
    "COMP_FEAT": {
        "prefix": "COMP_FEAT",
        "body": [
            "COMP_FEAT $1"
        ],
        "description": "COMP_FEAT"
    },
    "CONFIG_DELETE_IDS": {
        "prefix": "CONFIG_DELETE_IDS",
        "body": [
            "CONFIG_DELETE_IDS $1"
        ],
        "description": "CONFIG_DELETE_IDS"
    },
    "CONFIG_SUBCOMP": {
        "prefix": "CONFIG_SUBCOMP",
        "body": [
            "CONFIG_SUBCOMP $1"
        ],
        "description": "CONFIG_SUBCOMP"
    },
    "CONSEC_NUMBER": {
        "prefix": "CONSEC_NUMBER",
        "body": [
            "CONSEC_NUMBER $1"
        ],
        "description": "CONSEC_NUMBER"
    },
    "CONSIDER_NEG_DIM_SIGN": {
        "prefix": "CONSIDER_NEG_DIM_SIGN",
        "body": [
            "CONSIDER_NEG_DIM_SIGN $1"
        ],
        "description": "CONSIDER_NEG_DIM_SIGN"
    },
    "CONSIDER_ORDER": {
        "prefix": "CONSIDER_ORDER",
        "body": [
            "CONSIDER_ORDER $1"
        ],
        "description": "CONSIDER_ORDER"
    },
    "CONTINUE_ON_CANCEL": {
        "prefix": "CONTINUE_ON_CANCEL",
        "body": [
            "CONTINUE_ON_CANCEL $1"
        ],
        "description": "CONTINUE_ON_CANCEL"
    },
    "CONTOUR": {
        "prefix": "CONTOUR",
        "body": [
            "CONTOUR $1"
        ],
        "description": "CONTOUR"
    },
    "CONVERT": {
        "prefix": "CONVERT",
        "body": [
            "CONVERT $1"
        ],
        "description": "CONVERT"
    },
    "COPY_DRAWING": {
        "prefix": "COPY_DRAWING",
        "body": [
            "COPY_DRAWING $1"
        ],
        "description": "COPY_DRAWING"
    },
    "COPY_FAMTABLE": {
        "prefix": "COPY_FAMTABLE",
        "body": [
            "COPY_FAMTABLE $1"
        ],
        "description": "COPY_FAMTABLE"
    },
    "COPY_GEOMETRY_OPTION": {
        "prefix": "COPY_GEOMETRY_OPTION",
        "body": [
            "COPY_GEOMETRY_OPTION $1"
        ],
        "description": "COPY_GEOMETRY_OPTION"
    },
    "COPY_SYMBOLS": {
        "prefix": "COPY_SYMBOLS",
        "body": [
            "COPY_SYMBOLS $1"
        ],
        "description": "COPY_SYMBOLS"
    },
    "CREATED_IN_DRAWING": {
        "prefix": "CREATED_IN_DRAWING",
        "body": [
            "CREATED_IN_DRAWING $1"
        ],
        "description": "CREATED_IN_DRAWING"
    },
    "CREATED_IN_MODEL": {
        "prefix": "CREATED_IN_MODEL",
        "body": [
            "CREATED_IN_MODEL $1"
        ],
        "description": "CREATED_IN_MODEL"
    },
    "CREATE_SKETCH_POINTS": {
        "prefix": "CREATE_SKETCH_POINTS",
        "body": [
            "CREATE_SKETCH_POINTS $1"
        ],
        "description": "CREATE_SKETCH_POINTS"
    },
    "CREATE_SNAP_LINES": {
        "prefix": "CREATE_SNAP_LINES",
        "body": [
            "CREATE_SNAP_LINES $1"
        ],
        "description": "CREATE_SNAP_LINES"
    },
    "CTRLFONT": {
        "prefix": "CTRLFONT",
        "body": [
            "CTRLFONT $1"
        ],
        "description": "CTRLFONT"
    },
    "CTRLFONT_L_L": {
        "prefix": "CTRLFONT_L_L",
        "body": [
            "CTRLFONT_L_L $1"
        ],
        "description": "CTRLFONT_L_L"
    },
    "CTRLFONT_MID_L": {
        "prefix": "CTRLFONT_MID_L",
        "body": [
            "CTRLFONT_MID_L $1"
        ],
        "description": "CTRLFONT_MID_L"
    },
    "CTRLFONT_S_L": {
        "prefix": "CTRLFONT_S_L",
        "body": [
            "CTRLFONT_S_L $1"
        ],
        "description": "CTRLFONT_S_L"
    },
    "CTRLFONT_S_S": {
        "prefix": "CTRLFONT_S_S",
        "body": [
            "CTRLFONT_S_S $1"
        ],
        "description": "CTRLFONT_S_S"
    },
    "DASHFONT": {
        "prefix": "DASHFONT",
        "body": [
            "DASHFONT $1"
        ],
        "description": "DASHFONT"
    },
    "DASHFONT_S_S": {
        "prefix": "DASHFONT_S_S",
        "body": [
            "DASHFONT_S_S $1"
        ],
        "description": "DASHFONT_S_S"
    },
    "DATABASE_NAME": {
        "prefix": "DATABASE_NAME",
        "body": [
            "DATABASE_NAME $1"
        ],
        "description": "DATABASE_NAME"
    },
    "DATABASE_SCHEMA": {
        "prefix": "DATABASE_SCHEMA",
        "body": [
            "DATABASE_SCHEMA $1"
        ],
        "description": "DATABASE_SCHEMA"
    },
    "DECIMAL_PLACES": {
        "prefix": "DECIMAL_PLACES",
        "body": [
            "DECIMAL_PLACES $1"
        ],
        "description": "DECIMAL_PLACES"
    },
    "DEFAULT": {
        "prefix": "DEFAULT",
        "body": [
            "DEFAULT $1"
        ],
        "description": "DEFAULT"
    },
    "DEFAULT_FOR": {
        "prefix": "DEFAULT_FOR",
        "body": [
            "DEFAULT_FOR $1"
        ],
        "description": "DEFAULT_FOR"
    },
    "DEFAULT_VALUE": {
        "prefix": "DEFAULT_VALUE",
        "body": [
            "DEFAULT_VALUE $1"
        ],
        "description": "DEFAULT_VALUE"
    },
    "DEPENDENT": {
        "prefix": "DEPENDENT",
        "body": [
            "DEPENDENT $1"
        ],
        "description": "DEPENDENT"
    },
    "DEPEND_ON_INPUT": {
        "prefix": "DEPEND_ON_INPUT",
        "body": [
            "DEPEND_ON_INPUT $1"
        ],
        "description": "DEPEND_ON_INPUT"
    },
    "DESCRIPTION": {
        "prefix": "DESCRIPTION",
        "body": [
            "DESCRIPTION $1"
        ],
        "description": "DESCRIPTION"
    },
    "DIAMETER": {
        "prefix": "DIAMETER",
        "body": [
            "DIAMETER $1"
        ],
        "description": "DIAMETER"
    },
    "DIMENSION_ANGLE_SENSE": {
        "prefix": "DIMENSION_ANGLE_SENSE",
        "body": [
            "DIMENSION_ANGLE_SENSE $1"
        ],
        "description": "DIMENSION_ANGLE_SENSE"
    },
    "DIMENSION_SENSE": {
        "prefix": "DIMENSION_SENSE",
        "body": [
            "DIMENSION_SENSE $1"
        ],
        "description": "DIMENSION_SENSE"
    },
    "DIMMED": {
        "prefix": "DIMMED",
        "body": [
            "DIMMED $1"
        ],
        "description": "DIMMED"
    },
    "DIM_DISPLAY_OPTION": {
        "prefix": "DIM_DISPLAY_OPTION",
        "body": [
            "DIM_DISPLAY_OPTION $1"
        ],
        "description": "DIM_DISPLAY_OPTION"
    },
    "DISPLAY": {
        "prefix": "DISPLAY",
        "body": [
            "DISPLAY $1"
        ],
        "description": "DISPLAY"
    },
    "DISPLAY_ORDER": {
        "prefix": "DISPLAY_ORDER",
        "body": [
            "DISPLAY_ORDER $1"
        ],
        "description": "DISPLAY_ORDER"
    },
    "DOTFONT": {
        "prefix": "DOTFONT",
        "body": [
            "DOTFONT $1"
        ],
        "description": "DOTFONT"
    },
    "DOT_CTRL_FONT": {
        "prefix": "DOT_CTRL_FONT",
        "body": [
            "DOT_CTRL_FONT $1"
        ],
        "description": "DOT_CTRL_FONT"
    },
    "DRW_NAME": {
        "prefix": "DRW_NAME",
        "body": [
            "DRW_NAME $1"
        ],
        "description": "DRW_NAME"
    },
    "DRW_TABLE_FORMAT": {
        "prefix": "DRW_TABLE_FORMAT",
        "body": [
            "DRW_TABLE_FORMAT $1"
        ],
        "description": "DRW_TABLE_FORMAT"
    },
    "DTM_PNT_OFFSET_CSYS": {
        "prefix": "DTM_PNT_OFFSET_CSYS",
        "body": [
            "DTM_PNT_OFFSET_CSYS $1"
        ],
        "description": "DTM_PNT_OFFSET_CSYS"
    },
    "DWG": {
        "prefix": "DWG",
        "body": [
            "DWG $1"
        ],
        "description": "DWG"
    },
    "DXF": {
        "prefix": "DXF",
        "body": [
            "DXF $1"
        ],
        "description": "DXF"
    },
    "EDGE_ON_SRF_ANGLE_OFF": {
        "prefix": "EDGE_ON_SRF_ANGLE_OFF",
        "body": [
            "EDGE_ON_SRF_ANGLE_OFF $1"
        ],
        "description": "EDGE_ON_SRF_ANGLE_OFF"
    },
    "EDGE_ON_SRF_NORMAL": {
        "prefix": "EDGE_ON_SRF_NORMAL",
        "body": [
            "EDGE_ON_SRF_NORMAL $1"
        ],
        "description": "EDGE_ON_SRF_NORMAL"
    },
    "EDGE_ON_SRF_OFF": {
        "prefix": "EDGE_ON_SRF_OFF",
        "body": [
            "EDGE_ON_SRF_OFF $1"
        ],
        "description": "EDGE_ON_SRF_OFF"
    },
    "EDGE_ON_SRF_PARALLEL": {
        "prefix": "EDGE_ON_SRF_PARALLEL",
        "body": [
            "EDGE_ON_SRF_PARALLEL $1"
        ],
        "description": "EDGE_ON_SRF_PARALLEL"
    },
    "EDIT_CONSTRAINTS": {
        "prefix": "EDIT_CONSTRAINTS",
        "body": [
            "EDIT_CONSTRAINTS $1"
        ],
        "description": "EDIT_CONSTRAINTS"
    },
    "ELEM_COPY_EXIST": {
        "prefix": "ELEM_COPY_EXIST",
        "body": [
            "ELEM_COPY_EXIST $1"
        ],
        "description": "ELEM_COPY_EXIST"
    },
    "ELEM_CREATE_EXIST": {
        "prefix": "ELEM_CREATE_EXIST",
        "body": [
            "ELEM_CREATE_EXIST $1"
        ],
        "description": "ELEM_CREATE_EXIST"
    },
    "ELEM_EXIST": {
        "prefix": "ELEM_EXIST",
        "body": [
            "ELEM_EXIST $1"
        ],
        "description": "ELEM_EXIST"
    },
    "ELEM_NEW": {
        "prefix": "ELEM_NEW",
        "body": [
            "ELEM_NEW $1"
        ],
        "description": "ELEM_NEW"
    },
    "ELEM_REDEFINE": {
        "prefix": "ELEM_REDEFINE",
        "body": [
            "ELEM_REDEFINE $1"
        ],
        "description": "ELEM_REDEFINE"
    },
    "ENABLE_CHECKBOX1": {
        "prefix": "ENABLE_CHECKBOX1",
        "body": [
            "ENABLE_CHECKBOX1 $1"
        ],
        "description": "ENABLE_CHECKBOX1"
    },
    "ENABLE_CHECKBOX2": {
        "prefix": "ENABLE_CHECKBOX2",
        "body": [
            "ENABLE_CHECKBOX2 $1"
        ],
        "description": "ENABLE_CHECKBOX2"
    },
    "ENVIRONMENT": {
        "prefix": "ENVIRONMENT",
        "body": [
            "ENVIRONMENT $1"
        ],
        "description": "ENVIRONMENT"
    },
    "EOL_BREAK": {
        "prefix": "EOL_BREAK",
        "body": [
            "EOL_BREAK $1"
        ],
        "description": "EOL_BREAK"
    },
    "ERROR": {
        "prefix": "ERROR",
        "body": [
            "ERROR $1"
        ],
        "description": "ERROR"
    },
    "ERROR_MESSAGE": {
        "prefix": "ERROR_MESSAGE",
        "body": [
            "ERROR_MESSAGE $1"
        ],
        "description": "ERROR_MESSAGE"
    },
    "EXCEL_CONNECTED": {
        "prefix": "EXCEL_CONNECTED",
        "body": [
            "EXCEL_CONNECTED $1"
        ],
        "description": "EXCEL_CONNECTED"
    },
    "EXCEL_HAS_DOCUMENT": {
        "prefix": "EXCEL_HAS_DOCUMENT",
        "body": [
            "EXCEL_HAS_DOCUMENT $1"
        ],
        "description": "EXCEL_HAS_DOCUMENT"
    },
    "EXCEL_TO_BUFFER": {
        "prefix": "EXCEL_TO_BUFFER",
        "body": [
            "EXCEL_TO_BUFFER $1"
        ],
        "description": "EXCEL_TO_BUFFER"
    },
    "EXCLUDE": {
        "prefix": "EXCLUDE",
        "body": [
            "EXCLUDE $1"
        ],
        "description": "EXCLUDE"
    },
    "EXCLUDE_FOOTER": {
        "prefix": "EXCLUDE_FOOTER",
        "body": [
            "EXCLUDE_FOOTER $1"
        ],
        "description": "EXCLUDE_FOOTER"
    },
    "EXCLUDE_INHERITED": {
        "prefix": "EXCLUDE_INHERITED",
        "body": [
            "EXCLUDE_INHERITED $1"
        ],
        "description": "EXCLUDE_INHERITED"
    },
    "EXCLUSIVE": {
        "prefix": "EXCLUSIVE",
        "body": [
            "EXCLUSIVE $1"
        ],
        "description": "EXCLUSIVE"
    },
    "EXEC_AT_END": {
        "prefix": "EXEC_AT_END",
        "body": [
            "EXEC_AT_END $1"
        ],
        "description": "EXEC_AT_END"
    },
    "EXISTING_SNAPLINES": {
        "prefix": "EXISTING_SNAPLINES",
        "body": [
            "EXISTING_SNAPLINES $1"
        ],
        "description": "EXISTING_SNAPLINES"
    },
    "EXPAND_DEFAULT": {
        "prefix": "EXPAND_DEFAULT",
        "body": [
            "EXPAND_DEFAULT $1"
        ],
        "description": "EXPAND_DEFAULT"
    },
    "EXPLODE_OPTION": {
        "prefix": "EXPLODE_OPTION",
        "body": [
            "EXPLODE_OPTION $1"
        ],
        "description": "EXPLODE_OPTION"
    },
    "EXPORT_AS_QUILTS": {
        "prefix": "EXPORT_AS_QUILTS",
        "body": [
            "EXPORT_AS_QUILTS $1"
        ],
        "description": "EXPORT_AS_QUILTS"
    },
    "EXPORT_AS_SOLID": {
        "prefix": "EXPORT_AS_SOLID",
        "body": [
            "EXPORT_AS_SOLID $1"
        ],
        "description": "EXPORT_AS_SOLID"
    },
    "EXPORT_AS_SURFACES": {
        "prefix": "EXPORT_AS_SURFACES",
        "body": [
            "EXPORT_AS_SURFACES $1"
        ],
        "description": "EXPORT_AS_SURFACES"
    },
    "EXPORT_AS_WIREFRAME": {
        "prefix": "EXPORT_AS_WIREFRAME",
        "body": [
            "EXPORT_AS_WIREFRAME $1"
        ],
        "description": "EXPORT_AS_WIREFRAME"
    },
    "EXPORT_CONFIG_PARAMS": {
        "prefix": "EXPORT_CONFIG_PARAMS",
        "body": [
            "EXPORT_CONFIG_PARAMS $1"
        ],
        "description": "EXPORT_CONFIG_PARAMS"
    },
    "EXPORT_SHEETS": {
        "prefix": "EXPORT_SHEETS",
        "body": [
            "EXPORT_SHEETS $1"
        ],
        "description": "EXPORT_SHEETS"
    },
    "EXPORT_WITH_PROFILE": {
        "prefix": "EXPORT_WITH_PROFILE",
        "body": [
            "EXPORT_WITH_PROFILE $1"
        ],
        "description": "EXPORT_WITH_PROFILE"
    },
    "EXTERNAL": {
        "prefix": "EXTERNAL",
        "body": [
            "EXTERNAL $1"
        ],
        "description": "EXTERNAL"
    },
    "EXTREMUM": {
        "prefix": "EXTREMUM",
        "body": [
            "EXTREMUM $1"
        ],
        "description": "EXTREMUM"
    },
    "EXTRUDING": {
        "prefix": "EXTRUDING",
        "body": [
            "EXTRUDING $1"
        ],
        "description": "EXTRUDING"
    },
    "FAMINSTANCES": {
        "prefix": "FAMINSTANCES",
        "body": [
            "FAMINSTANCES $1"
        ],
        "description": "FAMINSTANCES"
    },
    "FEAT_EXIST": {
        "prefix": "FEAT_EXIST",
        "body": [
            "FEAT_EXIST $1"
        ],
        "description": "FEAT_EXIST"
    },
    "FEAT_NOT_EXIST": {
        "prefix": "FEAT_NOT_EXIST",
        "body": [
            "FEAT_NOT_EXIST $1"
        ],
        "description": "FEAT_NOT_EXIST"
    },
    "FID:": {
        "prefix": "FID:",
        "body": [
            "FID: $1"
        ],
        "description": "FID:"
    },
    "FILE_END": {
        "prefix": "FILE_END",
        "body": [
            "FILE_END $1"
        ],
        "description": "FILE_END"
    },
    "FILE_VALID": {
        "prefix": "FILE_VALID",
        "body": [
            "FILE_VALID $1"
        ],
        "description": "FILE_VALID"
    },
    "FILTER_COLUMN": {
        "prefix": "FILTER_COLUMN",
        "body": [
            "FILTER_COLUMN $1"
        ],
        "description": "FILTER_COLUMN"
    },
    "FILTER_FEAT": {
        "prefix": "FILTER_FEAT",
        "body": [
            "FILTER_FEAT $1"
        ],
        "description": "FILTER_FEAT"
    },
    "FILTER_GEOM": {
        "prefix": "FILTER_GEOM",
        "body": [
            "FILTER_GEOM $1"
        ],
        "description": "FILTER_GEOM"
    },
    "FILTER_IDENTIFIER": {
        "prefix": "FILTER_IDENTIFIER",
        "body": [
            "FILTER_IDENTIFIER $1"
        ],
        "description": "FILTER_IDENTIFIER"
    },
    "FILTER_MDL": {
        "prefix": "FILTER_MDL",
        "body": [
            "FILTER_MDL $1"
        ],
        "description": "FILTER_MDL"
    },
    "FILTER_ONLY_COLUMN": {
        "prefix": "FILTER_ONLY_COLUMN",
        "body": [
            "FILTER_ONLY_COLUMN $1"
        ],
        "description": "FILTER_ONLY_COLUMN"
    },
    "FILTER_ORIENT": {
        "prefix": "FILTER_ORIENT",
        "body": [
            "FILTER_ORIENT $1"
        ],
        "description": "FILTER_ORIENT"
    },
    "FILTER_REF": {
        "prefix": "FILTER_REF",
        "body": [
            "FILTER_REF $1"
        ],
        "description": "FILTER_REF"
    },
    "FILTER_RIGID": {
        "prefix": "FILTER_RIGID",
        "body": [
            "FILTER_RIGID $1"
        ],
        "description": "FILTER_RIGID"
    },
    "FIX": {
        "prefix": "FIX",
        "body": [
            "FIX $1"
        ],
        "description": "FIX"
    },
    "FIX_FAIL_COMPONENT": {
        "prefix": "FIX_FAIL_COMPONENT",
        "body": [
            "FIX_FAIL_COMPONENT $1"
        ],
        "description": "FIX_FAIL_COMPONENT"
    },
    "FIX_FAIL_UDF": {
        "prefix": "FIX_FAIL_UDF",
        "body": [
            "FIX_FAIL_UDF $1"
        ],
        "description": "FIX_FAIL_UDF"
    },
    "FLIP": {
        "prefix": "FLIP",
        "body": [
            "FLIP $1"
        ],
        "description": "FLIP"
    },
    "FLIP_DIRECTION": {
        "prefix": "FLIP_DIRECTION",
        "body": [
            "FLIP_DIRECTION $1"
        ],
        "description": "FLIP_DIRECTION"
    },
    "FONT": {
        "prefix": "FONT",
        "body": [
            "FONT $1"
        ],
        "description": "FONT"
    },
    "FORCE": {
        "prefix": "FORCE",
        "body": [
            "FORCE $1"
        ],
        "description": "FORCE"
    },
    "FORMAT": {
        "prefix": "FORMAT",
        "body": [
            "FORMAT $1"
        ],
        "description": "FORMAT"
    },
    "FORMAT_SHEET": {
        "prefix": "FORMAT_SHEET",
        "body": [
            "FORMAT_SHEET $1"
        ],
        "description": "FORMAT_SHEET"
    },
    "FRACTION": {
        "prefix": "FRACTION",
        "body": [
            "FRACTION $1"
        ],
        "description": "FRACTION"
    },
    "FREEZE_DEPENDENT": {
        "prefix": "FREEZE_DEPENDENT",
        "body": [
            "FREEZE_DEPENDENT $1"
        ],
        "description": "FREEZE_DEPENDENT"
    },
    "FREEZE_FAILED": {
        "prefix": "FREEZE_FAILED",
        "body": [
            "FREEZE_FAILED $1"
        ],
        "description": "FREEZE_FAILED"
    },
    "FRONT": {
        "prefix": "FRONT",
        "body": [
            "FRONT $1"
        ],
        "description": "FRONT"
    },
    "FTP_CONNECTED": {
        "prefix": "FTP_CONNECTED",
        "body": [
            "FTP_CONNECTED $1"
        ],
        "description": "FTP_CONNECTED"
    },
    "GALLERY_DISPLAY": {
        "prefix": "GALLERY_DISPLAY",
        "body": [
            "GALLERY_DISPLAY $1"
        ],
        "description": "GALLERY_DISPLAY"
    },
    "GENERAL_POINT_DATA": {
        "prefix": "GENERAL_POINT_DATA",
        "body": [
            "GENERAL_POINT_DATA $1"
        ],
        "description": "GENERAL_POINT_DATA"
    },
    "GENERAL_POINT_DIMENSION": {
        "prefix": "GENERAL_POINT_DIMENSION",
        "body": [
            "GENERAL_POINT_DIMENSION $1"
        ],
        "description": "GENERAL_POINT_DIMENSION"
    },
    "GENERAL_POINT_PLACEMENT": {
        "prefix": "GENERAL_POINT_PLACEMENT",
        "body": [
            "GENERAL_POINT_PLACEMENT $1"
        ],
        "description": "GENERAL_POINT_PLACEMENT"
    },
    "GID:": {
        "prefix": "GID:",
        "body": [
            "GID: $1"
        ],
        "description": "GID:"
    },
    "GOOGLESHEET_TO_BUFFER": {
        "prefix": "GOOGLESHEET_TO_BUFFER",
        "body": [
            "GOOGLESHEET_TO_BUFFER $1"
        ],
        "description": "GOOGLESHEET_TO_BUFFER"
    },
    "GREEN_FACE": {
        "prefix": "GREEN_FACE",
        "body": [
            "GREEN_FACE $1"
        ],
        "description": "GREEN_FACE"
    },
    "GTOL_CREO4_DATA": {
        "prefix": "GTOL_CREO4_DATA",
        "body": [
            "GTOL_CREO4_DATA $1"
        ],
        "description": "GTOL_CREO4_DATA"
    },
    "GTOL_CREO4_DATUM_REF": {
        "prefix": "GTOL_CREO4_DATUM_REF",
        "body": [
            "GTOL_CREO4_DATUM_REF $1"
        ],
        "description": "GTOL_CREO4_DATUM_REF"
    },
    "GTOL_CREO4_INDICATOR": {
        "prefix": "GTOL_CREO4_INDICATOR",
        "body": [
            "GTOL_CREO4_INDICATOR $1"
        ],
        "description": "GTOL_CREO4_INDICATOR"
    },
    "GTOL_CREO4_LEADER": {
        "prefix": "GTOL_CREO4_LEADER",
        "body": [
            "GTOL_CREO4_LEADER $1"
        ],
        "description": "GTOL_CREO4_LEADER"
    },
    "GTOL_CREO4_MODIFIERS": {
        "prefix": "GTOL_CREO4_MODIFIERS",
        "body": [
            "GTOL_CREO4_MODIFIERS $1"
        ],
        "description": "GTOL_CREO4_MODIFIERS"
    },
    "GTOL_CREO4_PLACEMENT": {
        "prefix": "GTOL_CREO4_PLACEMENT",
        "body": [
            "GTOL_CREO4_PLACEMENT $1"
        ],
        "description": "GTOL_CREO4_PLACEMENT"
    },
    "GTOL_CREO4_TEXT": {
        "prefix": "GTOL_CREO4_TEXT",
        "body": [
            "GTOL_CREO4_TEXT $1"
        ],
        "description": "GTOL_CREO4_TEXT"
    },
    "GTOL_DATA": {
        "prefix": "GTOL_DATA",
        "body": [
            "GTOL_DATA $1"
        ],
        "description": "GTOL_DATA"
    },
    "GTOL_DATUM_REF": {
        "prefix": "GTOL_DATUM_REF",
        "body": [
            "GTOL_DATUM_REF $1"
        ],
        "description": "GTOL_DATUM_REF"
    },
    "GTOL_DATUM_REFS": {
        "prefix": "GTOL_DATUM_REFS",
        "body": [
            "GTOL_DATUM_REFS $1"
        ],
        "description": "GTOL_DATUM_REFS"
    },
    "GTOL_MDL_REFS": {
        "prefix": "GTOL_MDL_REFS",
        "body": [
            "GTOL_MDL_REFS $1"
        ],
        "description": "GTOL_MDL_REFS"
    },
    "GTOL_SYMBOLS": {
        "prefix": "GTOL_SYMBOLS",
        "body": [
            "GTOL_SYMBOLS $1"
        ],
        "description": "GTOL_SYMBOLS"
    },
    "GTOL_TEXT": {
        "prefix": "GTOL_TEXT",
        "body": [
            "GTOL_TEXT $1"
        ],
        "description": "GTOL_TEXT"
    },
    "GTOL_VALUE": {
        "prefix": "GTOL_VALUE",
        "body": [
            "GTOL_VALUE $1"
        ],
        "description": "GTOL_VALUE"
    },
    "GUI_CANCELLED": {
        "prefix": "GUI_CANCELLED",
        "body": [
            "GUI_CANCELLED $1"
        ],
        "description": "GUI_CANCELLED"
    },
    "HAS_GEOMCHK": {
        "prefix": "HAS_GEOMCHK",
        "body": [
            "HAS_GEOMCHK $1"
        ],
        "description": "HAS_GEOMCHK"
    },
    "HEART_BEAT": {
        "prefix": "HEART_BEAT",
        "body": [
            "HEART_BEAT $1"
        ],
        "description": "HEART_BEAT"
    },
    "HEIGHT": {
        "prefix": "HEIGHT",
        "body": [
            "HEIGHT $1"
        ],
        "description": "HEIGHT"
    },
    "HIDDEN_LINE": {
        "prefix": "HIDDEN_LINE",
        "body": [
            "HIDDEN_LINE $1"
        ],
        "description": "HIDDEN_LINE"
    },
    "HOLE_BODY": {
        "prefix": "HOLE_BODY",
        "body": [
            "HOLE_BODY $1"
        ],
        "description": "HOLE_BODY"
    },
    "HOLE_CUSTOM": {
        "prefix": "HOLE_CUSTOM",
        "body": [
            "HOLE_CUSTOM $1"
        ],
        "description": "HOLE_CUSTOM"
    },
    "HOLE_DATA": {
        "prefix": "HOLE_DATA",
        "body": [
            "HOLE_DATA $1"
        ],
        "description": "HOLE_DATA"
    },
    "HOLE_PLACEMENT": {
        "prefix": "HOLE_PLACEMENT",
        "body": [
            "HOLE_PLACEMENT $1"
        ],
        "description": "HOLE_PLACEMENT"
    },
    "HOLE_SKETCHED": {
        "prefix": "HOLE_SKETCHED",
        "body": [
            "HOLE_SKETCHED $1"
        ],
        "description": "HOLE_SKETCHED"
    },
    "HOLE_STANDARD": {
        "prefix": "HOLE_STANDARD",
        "body": [
            "HOLE_STANDARD $1"
        ],
        "description": "HOLE_STANDARD"
    },
    "HOLE_STRAIGHT": {
        "prefix": "HOLE_STRAIGHT",
        "body": [
            "HOLE_STRAIGHT $1"
        ],
        "description": "HOLE_STRAIGHT"
    },
    "HORIZONTAL": {
        "prefix": "HORIZONTAL",
        "body": [
            "HORIZONTAL $1"
        ],
        "description": "HORIZONTAL"
    },
    "HTTP_HEADER": {
        "prefix": "HTTP_HEADER",
        "body": [
            "HTTP_HEADER $1"
        ],
        "description": "HTTP_HEADER"
    },
    "HTTP_HEADER_REQUEST": {
        "prefix": "HTTP_HEADER_REQUEST",
        "body": [
            "HTTP_HEADER_REQUEST $1"
        ],
        "description": "HTTP_HEADER_REQUEST"
    },
    "HTTP_HEADER_RESPONSE": {
        "prefix": "HTTP_HEADER_RESPONSE",
        "body": [
            "HTTP_HEADER_RESPONSE $1"
        ],
        "description": "HTTP_HEADER_RESPONSE"
    },
    "IGES": {
        "prefix": "IGES",
        "body": [
            "IGES $1"
        ],
        "description": "IGES"
    },
    "IMAGE": {
        "prefix": "IMAGE",
        "body": [
            "IMAGE $1"
        ],
        "description": "IMAGE"
    },
    "IMAGE_DEPTH": {
        "prefix": "IMAGE_DEPTH",
        "body": [
            "IMAGE_DEPTH $1"
        ],
        "description": "IMAGE_DEPTH"
    },
    "IMMEDIATE": {
        "prefix": "IMMEDIATE",
        "body": [
            "IMMEDIATE $1"
        ],
        "description": "IMMEDIATE"
    },
    "IMPORT_CONFIG_PARAMS": {
        "prefix": "IMPORT_CONFIG_PARAMS",
        "body": [
            "IMPORT_CONFIG_PARAMS $1"
        ],
        "description": "IMPORT_CONFIG_PARAMS"
    },
    "IMPORT_FLEX_DESIGN": {
        "prefix": "IMPORT_FLEX_DESIGN",
        "body": [
            "IMPORT_FLEX_DESIGN $1"
        ],
        "description": "IMPORT_FLEX_DESIGN"
    },
    "IMPORT_PROFILE": {
        "prefix": "IMPORT_PROFILE",
        "body": [
            "IMPORT_PROFILE $1"
        ],
        "description": "IMPORT_PROFILE"
    },
    "INCH": {
        "prefix": "INCH",
        "body": [
            "INCH $1"
        ],
        "description": "INCH"
    },
    "INCLUDE_ATTRIBUTES": {
        "prefix": "INCLUDE_ATTRIBUTES",
        "body": [
            "INCLUDE_ATTRIBUTES $1"
        ],
        "description": "INCLUDE_ATTRIBUTES"
    },
    "INCLUDE_BLANKED_LAYERS": {
        "prefix": "INCLUDE_BLANKED_LAYERS",
        "body": [
            "INCLUDE_BLANKED_LAYERS $1"
        ],
        "description": "INCLUDE_BLANKED_LAYERS"
    },
    "INCLUDE_CHILDREN": {
        "prefix": "INCLUDE_CHILDREN",
        "body": [
            "INCLUDE_CHILDREN $1"
        ],
        "description": "INCLUDE_CHILDREN"
    },
    "INCLUDE_CURVES": {
        "prefix": "INCLUDE_CURVES",
        "body": [
            "INCLUDE_CURVES $1"
        ],
        "description": "INCLUDE_CURVES"
    },
    "INCLUDE_DATUMS": {
        "prefix": "INCLUDE_DATUMS",
        "body": [
            "INCLUDE_DATUMS $1"
        ],
        "description": "INCLUDE_DATUMS"
    },
    "INCLUDE_DEFAULT_PARAMS": {
        "prefix": "INCLUDE_DEFAULT_PARAMS",
        "body": [
            "INCLUDE_DEFAULT_PARAMS $1"
        ],
        "description": "INCLUDE_DEFAULT_PARAMS"
    },
    "INCLUDE_DRAWINGS": {
        "prefix": "INCLUDE_DRAWINGS",
        "body": [
            "INCLUDE_DRAWINGS $1"
        ],
        "description": "INCLUDE_DRAWINGS"
    },
    "INCLUDE_ERASED": {
        "prefix": "INCLUDE_ERASED",
        "body": [
            "INCLUDE_ERASED $1"
        ],
        "description": "INCLUDE_ERASED"
    },
    "INCLUDE_FACETS": {
        "prefix": "INCLUDE_FACETS",
        "body": [
            "INCLUDE_FACETS $1"
        ],
        "description": "INCLUDE_FACETS"
    },
    "INCLUDE_IDX": {
        "prefix": "INCLUDE_IDX",
        "body": [
            "INCLUDE_IDX $1"
        ],
        "description": "INCLUDE_IDX"
    },
    "INCLUDE_MASS_PROPS": {
        "prefix": "INCLUDE_MASS_PROPS",
        "body": [
            "INCLUDE_MASS_PROPS $1"
        ],
        "description": "INCLUDE_MASS_PROPS"
    },
    "INCLUDE_MULTI_CAD": {
        "prefix": "INCLUDE_MULTI_CAD",
        "body": [
            "INCLUDE_MULTI_CAD $1"
        ],
        "description": "INCLUDE_MULTI_CAD"
    },
    "INCLUDE_NONSOLID": {
        "prefix": "INCLUDE_NONSOLID",
        "body": [
            "INCLUDE_NONSOLID $1"
        ],
        "description": "INCLUDE_NONSOLID"
    },
    "INCLUDE_QUILTS": {
        "prefix": "INCLUDE_QUILTS",
        "body": [
            "INCLUDE_QUILTS $1"
        ],
        "description": "INCLUDE_QUILTS"
    },
    "INCREMENT": {
        "prefix": "INCREMENT",
        "body": [
            "INCREMENT $1"
        ],
        "description": "INCREMENT"
    },
    "INDEPENDENT": {
        "prefix": "INDEPENDENT",
        "body": [
            "INDEPENDENT $1"
        ],
        "description": "INDEPENDENT"
    },
    "INDIV_GP_MEMBERS": {
        "prefix": "INDIV_GP_MEMBERS",
        "body": [
            "INDIV_GP_MEMBERS $1"
        ],
        "description": "INDIV_GP_MEMBERS"
    },
    "INHERITED": {
        "prefix": "INHERITED",
        "body": [
            "INHERITED $1"
        ],
        "description": "INHERITED"
    },
    "INITIAL": {
        "prefix": "INITIAL",
        "body": [
            "INITIAL $1"
        ],
        "description": "INITIAL"
    },
    "INNER_INTERSECTIONS": {
        "prefix": "INNER_INTERSECTIONS",
        "body": [
            "INNER_INTERSECTIONS $1"
        ],
        "description": "INNER_INTERSECTIONS"
    },
    "INSERT": {
        "prefix": "INSERT",
        "body": [
            "INSERT $1"
        ],
        "description": "INSERT"
    },
    "INSERT_AS_ABSOLUTE": {
        "prefix": "INSERT_AS_ABSOLUTE",
        "body": [
            "INSERT_AS_ABSOLUTE $1"
        ],
        "description": "INSERT_AS_ABSOLUTE"
    },
    "INSERT_AS_EXT_REF": {
        "prefix": "INSERT_AS_EXT_REF",
        "body": [
            "INSERT_AS_EXT_REF $1"
        ],
        "description": "INSERT_AS_EXT_REF"
    },
    "INSERT_AS_PATTERN": {
        "prefix": "INSERT_AS_PATTERN",
        "body": [
            "INSERT_AS_PATTERN $1"
        ],
        "description": "INSERT_AS_PATTERN"
    },
    "INSERT_NORMAL": {
        "prefix": "INSERT_NORMAL",
        "body": [
            "INSERT_NORMAL $1"
        ],
        "description": "INSERT_NORMAL"
    },
    "INSERT_PARALLEL": {
        "prefix": "INSERT_PARALLEL",
        "body": [
            "INSERT_PARALLEL $1"
        ],
        "description": "INSERT_PARALLEL"
    },
    "INSPECTION": {
        "prefix": "INSPECTION",
        "body": [
            "INSPECTION $1"
        ],
        "description": "INSPECTION"
    },
    "INTERACTIVE": {
        "prefix": "INTERACTIVE",
        "body": [
            "INTERACTIVE $1"
        ],
        "description": "INTERACTIVE"
    },
    "INTERF": {
        "prefix": "INTERF",
        "body": [
            "INTERF $1"
        ],
        "description": "INTERF"
    },
    "INTERFERENCE": {
        "prefix": "INTERFERENCE",
        "body": [
            "INTERFERENCE $1"
        ],
        "description": "INTERFERENCE"
    },
    "INTERF_BODY": {
        "prefix": "INTERF_BODY",
        "body": [
            "INTERF_BODY $1"
        ],
        "description": "INTERF_BODY"
    },
    "INTERF_MDL": {
        "prefix": "INTERF_MDL",
        "body": [
            "INTERF_MDL $1"
        ],
        "description": "INTERF_MDL"
    },
    "INTERF_QUILT": {
        "prefix": "INTERF_QUILT",
        "body": [
            "INTERF_QUILT $1"
        ],
        "description": "INTERF_QUILT"
    },
    "INTERF_QUILT_SOLID": {
        "prefix": "INTERF_QUILT_SOLID",
        "body": [
            "INTERF_QUILT_SOLID $1"
        ],
        "description": "INTERF_QUILT_SOLID"
    },
    "INTERF_REC": {
        "prefix": "INTERF_REC",
        "body": [
            "INTERF_REC $1"
        ],
        "description": "INTERF_REC"
    },
    "INTERF_SURF": {
        "prefix": "INTERF_SURF",
        "body": [
            "INTERF_SURF $1"
        ],
        "description": "INTERF_SURF"
    },
    "INTERNAL": {
        "prefix": "INTERNAL",
        "body": [
            "INTERNAL $1"
        ],
        "description": "INTERNAL"
    },
    "INTERPRET": {
        "prefix": "INTERPRET",
        "body": [
            "INTERPRET $1"
        ],
        "description": "INTERPRET"
    },
    "INTERSECT": {
        "prefix": "INTERSECT",
        "body": [
            "INTERSECT $1"
        ],
        "description": "INTERSECT"
    },
    "INTMIT_LWW_HIDDEN": {
        "prefix": "INTMIT_LWW_HIDDEN",
        "body": [
            "INTMIT_LWW_HIDDEN $1"
        ],
        "description": "INTMIT_LWW_HIDDEN"
    },
    "INTRUDING": {
        "prefix": "INTRUDING",
        "body": [
            "INTRUDING $1"
        ],
        "description": "INTRUDING"
    },
    "INTRUDING_EXTRUDING": {
        "prefix": "INTRUDING_EXTRUDING",
        "body": [
            "INTRUDING_EXTRUDING $1"
        ],
        "description": "INTRUDING_EXTRUDING"
    },
    "INVALIDATE_ON_UNSELECT": {
        "prefix": "INVALIDATE_ON_UNSELECT",
        "body": [
            "INVALIDATE_ON_UNSELECT $1"
        ],
        "description": "INVALIDATE_ON_UNSELECT"
    },
    "INVISIBLE": {
        "prefix": "INVISIBLE",
        "body": [
            "INVISIBLE $1"
        ],
        "description": "INVISIBLE"
    },
    "ISOLATE": {
        "prefix": "ISOLATE",
        "body": [
            "ISOLATE $1"
        ],
        "description": "ISOLATE"
    },
    "IS_CONCAVE_SURFACE": {
        "prefix": "IS_CONCAVE_SURFACE",
        "body": [
            "IS_CONCAVE_SURFACE $1"
        ],
        "description": "IS_CONCAVE_SURFACE"
    },
    "IS_CONVEX_SURFACE": {
        "prefix": "IS_CONVEX_SURFACE",
        "body": [
            "IS_CONVEX_SURFACE $1"
        ],
        "description": "IS_CONVEX_SURFACE"
    },
    "IS_DESIGN_SERVER_SESSION": {
        "prefix": "IS_DESIGN_SERVER_SESSION",
        "body": [
            "IS_DESIGN_SERVER_SESSION $1"
        ],
        "description": "IS_DESIGN_SERVER_SESSION"
    },
    "IS_EMBEDDED": {
        "prefix": "IS_EMBEDDED",
        "body": [
            "IS_EMBEDDED $1"
        ],
        "description": "IS_EMBEDDED"
    },
    "IS_EXPLODED": {
        "prefix": "IS_EXPLODED",
        "body": [
            "IS_EXPLODED $1"
        ],
        "description": "IS_EXPLODED"
    },
    "IS_FAILED": {
        "prefix": "IS_FAILED",
        "body": [
            "IS_FAILED $1"
        ],
        "description": "IS_FAILED"
    },
    "IS_FLEXIBLE": {
        "prefix": "IS_FLEXIBLE",
        "body": [
            "IS_FLEXIBLE $1"
        ],
        "description": "IS_FLEXIBLE"
    },
    "IS_FLEXIBLE_PREDEFINED": {
        "prefix": "IS_FLEXIBLE_PREDEFINED",
        "body": [
            "IS_FLEXIBLE_PREDEFINED $1"
        ],
        "description": "IS_FLEXIBLE_PREDEFINED"
    },
    "IS_FROM_SEARCH_PATH": {
        "prefix": "IS_FROM_SEARCH_PATH",
        "body": [
            "IS_FROM_SEARCH_PATH $1"
        ],
        "description": "IS_FROM_SEARCH_PATH"
    },
    "IS_FROZEN": {
        "prefix": "IS_FROZEN",
        "body": [
            "IS_FROZEN $1"
        ],
        "description": "IS_FROZEN"
    },
    "IS_HIDDEN": {
        "prefix": "IS_HIDDEN",
        "body": [
            "IS_HIDDEN $1"
        ],
        "description": "IS_HIDDEN"
    },
    "IS_INSERT_MODE_ACTIVE": {
        "prefix": "IS_INSERT_MODE_ACTIVE",
        "body": [
            "IS_INSERT_MODE_ACTIVE $1"
        ],
        "description": "IS_INSERT_MODE_ACTIVE"
    },
    "IS_PACKAGED": {
        "prefix": "IS_PACKAGED",
        "body": [
            "IS_PACKAGED $1"
        ],
        "description": "IS_PACKAGED"
    },
    "IS_PLACED": {
        "prefix": "IS_PLACED",
        "body": [
            "IS_PLACED $1"
        ],
        "description": "IS_PLACED"
    },
    "IS_READONLY": {
        "prefix": "IS_READONLY",
        "body": [
            "IS_READONLY $1"
        ],
        "description": "IS_READONLY"
    },
    "IS_SKELETON": {
        "prefix": "IS_SKELETON",
        "body": [
            "IS_SKELETON $1"
        ],
        "description": "IS_SKELETON"
    },
    "IS_SMT_BEND_SURFACE": {
        "prefix": "IS_SMT_BEND_SURFACE",
        "body": [
            "IS_SMT_BEND_SURFACE $1"
        ],
        "description": "IS_SMT_BEND_SURFACE"
    },
    "IS_TLA_ACTIVE": {
        "prefix": "IS_TLA_ACTIVE",
        "body": [
            "IS_TLA_ACTIVE $1"
        ],
        "description": "IS_TLA_ACTIVE"
    },
    "IS_UNDERCONSTRAINED": {
        "prefix": "IS_UNDERCONSTRAINED",
        "body": [
            "IS_UNDERCONSTRAINED $1"
        ],
        "description": "IS_UNDERCONSTRAINED"
    },
    "JLINK_APP_REGISTRY": {
        "prefix": "JLINK_APP_REGISTRY",
        "body": [
            "JLINK_APP_REGISTRY $1"
        ],
        "description": "JLINK_APP_REGISTRY"
    },
    "JLINK_HANDLE_VALID": {
        "prefix": "JLINK_HANDLE_VALID",
        "body": [
            "JLINK_HANDLE_VALID $1"
        ],
        "description": "JLINK_HANDLE_VALID"
    },
    "LAYER_EXIST": {
        "prefix": "LAYER_EXIST",
        "body": [
            "LAYER_EXIST $1"
        ],
        "description": "LAYER_EXIST"
    },
    "LEADER": {
        "prefix": "LEADER",
        "body": [
            "LEADER $1"
        ],
        "description": "LEADER"
    },
    "LINEAR": {
        "prefix": "LINEAR",
        "body": [
            "LINEAR $1"
        ],
        "description": "LINEAR"
    },
    "LINE_ANGLE_OFF": {
        "prefix": "LINE_ANGLE_OFF",
        "body": [
            "LINE_ANGLE_OFF $1"
        ],
        "description": "LINE_ANGLE_OFF"
    },
    "LINE_COPLANAR": {
        "prefix": "LINE_COPLANAR",
        "body": [
            "LINE_COPLANAR $1"
        ],
        "description": "LINE_COPLANAR"
    },
    "LINE_NORMAL": {
        "prefix": "LINE_NORMAL",
        "body": [
            "LINE_NORMAL $1"
        ],
        "description": "LINE_NORMAL"
    },
    "LINE_OFF": {
        "prefix": "LINE_OFF",
        "body": [
            "LINE_OFF $1"
        ],
        "description": "LINE_OFF"
    },
    "LINE_PARALLEL": {
        "prefix": "LINE_PARALLEL",
        "body": [
            "LINE_PARALLEL $1"
        ],
        "description": "LINE_PARALLEL"
    },
    "LIST": {
        "prefix": "LIST",
        "body": [
            "LIST $1"
        ],
        "description": "LIST"
    },
    "LWW_HIDDEN": {
        "prefix": "LWW_HIDDEN",
        "body": [
            "LWW_HIDDEN $1"
        ],
        "description": "LWW_HIDDEN"
    },
    "MAP_ELEM": {
        "prefix": "MAP_ELEM",
        "body": [
            "MAP_ELEM $1"
        ],
        "description": "MAP_ELEM"
    },
    "MASS_PROPERTIES": {
        "prefix": "MASS_PROPERTIES",
        "body": [
            "MASS_PROPERTIES $1"
        ],
        "description": "MASS_PROPERTIES"
    },
    "MATE": {
        "prefix": "MATE",
        "body": [
            "MATE $1"
        ],
        "description": "MATE"
    },
    "MATE_ANGLE_OFF": {
        "prefix": "MATE_ANGLE_OFF",
        "body": [
            "MATE_ANGLE_OFF $1"
        ],
        "description": "MATE_ANGLE_OFF"
    },
    "MATE_ANGLE_OFF_FLIP": {
        "prefix": "MATE_ANGLE_OFF_FLIP",
        "body": [
            "MATE_ANGLE_OFF_FLIP $1"
        ],
        "description": "MATE_ANGLE_OFF_FLIP"
    },
    "MATE_FLIP": {
        "prefix": "MATE_FLIP",
        "body": [
            "MATE_FLIP $1"
        ],
        "description": "MATE_FLIP"
    },
    "MATE_OFF": {
        "prefix": "MATE_OFF",
        "body": [
            "MATE_OFF $1"
        ],
        "description": "MATE_OFF"
    },
    "MATE_OFF_FLIP": {
        "prefix": "MATE_OFF_FLIP",
        "body": [
            "MATE_OFF_FLIP $1"
        ],
        "description": "MATE_OFF_FLIP"
    },
    "MATE_ORIENT": {
        "prefix": "MATE_ORIENT",
        "body": [
            "MATE_ORIENT $1"
        ],
        "description": "MATE_ORIENT"
    },
    "MAX_DISTANCE": {
        "prefix": "MAX_DISTANCE",
        "body": [
            "MAX_DISTANCE $1"
        ],
        "description": "MAX_DISTANCE"
    },
    "MDL_NAME": {
        "prefix": "MDL_NAME",
        "body": [
            "MDL_NAME $1"
        ],
        "description": "MDL_NAME"
    },
    "MDL_TYPES": {
        "prefix": "MDL_TYPES",
        "body": [
            "MDL_TYPES $1"
        ],
        "description": "MDL_TYPES"
    },
    "MECHANISM": {
        "prefix": "MECHANISM",
        "body": [
            "MECHANISM $1"
        ],
        "description": "MECHANISM"
    },
    "MERGE": {
        "prefix": "MERGE",
        "body": [
            "MERGE $1"
        ],
        "description": "MERGE"
    },
    "MERGED_SOLID": {
        "prefix": "MERGED_SOLID",
        "body": [
            "MERGED_SOLID $1"
        ],
        "description": "MERGED_SOLID"
    },
    "MIDDLE": {
        "prefix": "MIDDLE",
        "body": [
            "MIDDLE $1"
        ],
        "description": "MIDDLE"
    },
    "MINIMUM_SPACING": {
        "prefix": "MINIMUM_SPACING",
        "body": [
            "MINIMUM_SPACING $1"
        ],
        "description": "MINIMUM_SPACING"
    },
    "MM": {
        "prefix": "MM",
        "body": [
            "MM $1"
        ],
        "description": "MM"
    },
    "MODEL_SPACE_SHEET": {
        "prefix": "MODEL_SPACE_SHEET",
        "body": [
            "MODEL_SPACE_SHEET $1"
        ],
        "description": "MODEL_SPACE_SHEET"
    },
    "NAME_TEMPLATE": {
        "prefix": "NAME_TEMPLATE",
        "body": [
            "NAME_TEMPLATE $1"
        ],
        "description": "NAME_TEMPLATE"
    },
    "NC_RETRACT_SURFACE": {
        "prefix": "NC_RETRACT_SURFACE",
        "body": [
            "NC_RETRACT_SURFACE $1"
        ],
        "description": "NC_RETRACT_SURFACE"
    },
    "NC_STEP": {
        "prefix": "NC_STEP",
        "body": [
            "NC_STEP $1"
        ],
        "description": "NC_STEP"
    },
    "NC_TOOL_SETUP": {
        "prefix": "NC_TOOL_SETUP",
        "body": [
            "NC_TOOL_SETUP $1"
        ],
        "description": "NC_TOOL_SETUP"
    },
    "NC_TOOL_TIP": {
        "prefix": "NC_TOOL_TIP",
        "body": [
            "NC_TOOL_TIP $1"
        ],
        "description": "NC_TOOL_TIP"
    },
    "NEGATIVE": {
        "prefix": "NEGATIVE",
        "body": [
            "NEGATIVE $1"
        ],
        "description": "NEGATIVE"
    },
    "NETWORK_CONNECTION": {
        "prefix": "NETWORK_CONNECTION",
        "body": [
            "NETWORK_CONNECTION $1"
        ],
        "description": "NETWORK_CONNECTION"
    },
    "NODE_COMPOUND": {
        "prefix": "NODE_COMPOUND",
        "body": [
            "NODE_COMPOUND $1"
        ],
        "description": "NODE_COMPOUND"
    },
    "NODE_COMPOUND_TEXT": {
        "prefix": "NODE_COMPOUND_TEXT",
        "body": [
            "NODE_COMPOUND_TEXT $1"
        ],
        "description": "NODE_COMPOUND_TEXT"
    },
    "NODE_EMPTY": {
        "prefix": "NODE_EMPTY",
        "body": [
            "NODE_EMPTY $1"
        ],
        "description": "NODE_EMPTY"
    },
    "NODE_TEXT": {
        "prefix": "NODE_TEXT",
        "body": [
            "NODE_TEXT $1"
        ],
        "description": "NODE_TEXT"
    },
    "NOMINAL": {
        "prefix": "NOMINAL",
        "body": [
            "NOMINAL $1"
        ],
        "description": "NOMINAL"
    },
    "NONE": {
        "prefix": "NONE",
        "body": [
            "NONE $1"
        ],
        "description": "NONE"
    },
    "NON_SMT_SURFACE": {
        "prefix": "NON_SMT_SURFACE",
        "body": [
            "NON_SMT_SURFACE $1"
        ],
        "description": "NON_SMT_SURFACE"
    },
    "NORMAL": {
        "prefix": "NORMAL",
        "body": [
            "NORMAL $1"
        ],
        "description": "NORMAL"
    },
    "NORM_ENTITY": {
        "prefix": "NORM_ENTITY",
        "body": [
            "NORM_ENTITY $1"
        ],
        "description": "NORM_ENTITY"
    },
    "NOTE_LINE": {
        "prefix": "NOTE_LINE",
        "body": [
            "NOTE_LINE $1"
        ],
        "description": "NOTE_LINE"
    },
    "NOTE_OPTION": {
        "prefix": "NOTE_OPTION",
        "body": [
            "NOTE_OPTION $1"
        ],
        "description": "NOTE_OPTION"
    },
    "NOTE_TEXT": {
        "prefix": "NOTE_TEXT",
        "body": [
            "NOTE_TEXT $1"
        ],
        "description": "NOTE_TEXT"
    },
    "NOTIFICATION": {
        "prefix": "NOTIFICATION",
        "body": [
            "NOTIFICATION $1"
        ],
        "description": "NOTIFICATION"
    },
    "NOTIFICATION_OFF": {
        "prefix": "NOTIFICATION_OFF",
        "body": [
            "NOTIFICATION_OFF $1"
        ],
        "description": "NOTIFICATION_OFF"
    },
    "NOTIFICATION_ON": {
        "prefix": "NOTIFICATION_ON",
        "body": [
            "NOTIFICATION_ON $1"
        ],
        "description": "NOTIFICATION_ON"
    },
    "NOT_INHERITED": {
        "prefix": "NOT_INHERITED",
        "body": [
            "NOT_INHERITED $1"
        ],
        "description": "NOT_INHERITED"
    },
    "NO_AUTOSEL": {
        "prefix": "NO_AUTOSEL",
        "body": [
            "NO_AUTOSEL $1"
        ],
        "description": "NO_AUTOSEL"
    },
    "NO_AUTO_LAYERS": {
        "prefix": "NO_AUTO_LAYERS",
        "body": [
            "NO_AUTO_LAYERS $1"
        ],
        "description": "NO_AUTO_LAYERS"
    },
    "NO_AUTO_UPDATE": {
        "prefix": "NO_AUTO_UPDATE",
        "body": [
            "NO_AUTO_UPDATE $1"
        ],
        "description": "NO_AUTO_UPDATE"
    },
    "NO_DEL_IDENT": {
        "prefix": "NO_DEL_IDENT",
        "body": [
            "NO_DEL_IDENT $1"
        ],
        "description": "NO_DEL_IDENT"
    },
    "NO_DEPENDENCY": {
        "prefix": "NO_DEPENDENCY",
        "body": [
            "NO_DEPENDENCY $1"
        ],
        "description": "NO_DEPENDENCY"
    },
    "NO_DIMENSION": {
        "prefix": "NO_DIMENSION",
        "body": [
            "NO_DIMENSION $1"
        ],
        "description": "NO_DIMENSION"
    },
    "NO_DIM_SIGN": {
        "prefix": "NO_DIM_SIGN",
        "body": [
            "NO_DIM_SIGN $1"
        ],
        "description": "NO_DIM_SIGN"
    },
    "NO_FILTER": {
        "prefix": "NO_FILTER",
        "body": [
            "NO_FILTER $1"
        ],
        "description": "NO_FILTER"
    },
    "NO_FLIP": {
        "prefix": "NO_FLIP",
        "body": [
            "NO_FLIP $1"
        ],
        "description": "NO_FLIP"
    },
    "NO_GUI": {
        "prefix": "NO_GUI",
        "body": [
            "NO_GUI $1"
        ],
        "description": "NO_GUI"
    },
    "NO_HIDDEN": {
        "prefix": "NO_HIDDEN",
        "body": [
            "NO_HIDDEN $1"
        ],
        "description": "NO_HIDDEN"
    },
    "NO_LEADER": {
        "prefix": "NO_LEADER",
        "body": [
            "NO_LEADER $1"
        ],
        "description": "NO_LEADER"
    },
    "NO_POSITION": {
        "prefix": "NO_POSITION",
        "body": [
            "NO_POSITION $1"
        ],
        "description": "NO_POSITION"
    },
    "NO_POST_PROCESSING": {
        "prefix": "NO_POST_PROCESSING",
        "body": [
            "NO_POST_PROCESSING $1"
        ],
        "description": "NO_POST_PROCESSING"
    },
    "NO_POS_CLEAN": {
        "prefix": "NO_POS_CLEAN",
        "body": [
            "NO_POS_CLEAN $1"
        ],
        "description": "NO_POS_CLEAN"
    },
    "NO_REGEN": {
        "prefix": "NO_REGEN",
        "body": [
            "NO_REGEN $1"
        ],
        "description": "NO_REGEN"
    },
    "NO_TABLESSUBT": {
        "prefix": "NO_TABLESSUBT",
        "body": [
            "NO_TABLESSUBT $1"
        ],
        "description": "NO_TABLESSUBT"
    },
    "NO_UPDATE": {
        "prefix": "NO_UPDATE",
        "body": [
            "NO_UPDATE $1"
        ],
        "description": "NO_UPDATE"
    },
    "NO_VALUE": {
        "prefix": "NO_VALUE",
        "body": [
            "NO_VALUE $1"
        ],
        "description": "NO_VALUE"
    },
    "ODBC_CONNECTED": {
        "prefix": "ODBC_CONNECTED",
        "body": [
            "ODBC_CONNECTED $1"
        ],
        "description": "ODBC_CONNECTED"
    },
    "OFFSET": {
        "prefix": "OFFSET",
        "body": [
            "OFFSET $1"
        ],
        "description": "OFFSET"
    },
    "OFFSET_FROM": {
        "prefix": "OFFSET_FROM",
        "body": [
            "OFFSET_FROM $1"
        ],
        "description": "OFFSET_FROM"
    },
    "OFFSET_VIEW_OUTLINE": {
        "prefix": "OFFSET_VIEW_OUTLINE",
        "body": [
            "OFFSET_VIEW_OUTLINE $1"
        ],
        "description": "OFFSET_VIEW_OUTLINE"
    },
    "ONLY_TRANSLATION_INVARIANT": {
        "prefix": "ONLY_TRANSLATION_INVARIANT",
        "body": [
            "ONLY_TRANSLATION_INVARIANT $1"
        ],
        "description": "ONLY_TRANSLATION_INVARIANT"
    },
    "ON_ENTITY": {
        "prefix": "ON_ENTITY",
        "body": [
            "ON_ENTITY $1"
        ],
        "description": "ON_ENTITY"
    },
    "ON_PICTURE": {
        "prefix": "ON_PICTURE",
        "body": [
            "ON_PICTURE $1"
        ],
        "description": "ON_PICTURE"
    },
    "OPTIONAL": {
        "prefix": "OPTIONAL",
        "body": [
            "OPTIONAL $1"
        ],
        "description": "OPTIONAL"
    },
    "ORIENT": {
        "prefix": "ORIENT",
        "body": [
            "ORIENT $1"
        ],
        "description": "ORIENT"
    },
    "ORIENTATION": {
        "prefix": "ORIENTATION",
        "body": [
            "ORIENTATION $1"
        ],
        "description": "ORIENTATION"
    },
    "ORIENT_FLIP": {
        "prefix": "ORIENT_FLIP",
        "body": [
            "ORIENT_FLIP $1"
        ],
        "description": "ORIENT_FLIP"
    },
    "ORIGIN": {
        "prefix": "ORIGIN",
        "body": [
            "ORIGIN $1"
        ],
        "description": "ORIGIN"
    },
    "OTHER_INSTANCES": {
        "prefix": "OTHER_INSTANCES",
        "body": [
            "OTHER_INSTANCES $1"
        ],
        "description": "OTHER_INSTANCES"
    },
    "OTHER_REFS_IN_FEAT": {
        "prefix": "OTHER_REFS_IN_FEAT",
        "body": [
            "OTHER_REFS_IN_FEAT $1"
        ],
        "description": "OTHER_REFS_IN_FEAT"
    },
    "OUTPUT": {
        "prefix": "OUTPUT",
        "body": [
            "OUTPUT $1"
        ],
        "description": "OUTPUT"
    },
    "PACKAGED": {
        "prefix": "PACKAGED",
        "body": [
            "PACKAGED $1"
        ],
        "description": "PACKAGED"
    },
    "PAPER_SPACE_SHEETS": {
        "prefix": "PAPER_SPACE_SHEETS",
        "body": [
            "PAPER_SPACE_SHEETS $1"
        ],
        "description": "PAPER_SPACE_SHEETS"
    },
    "PARAM_EQUAL": {
        "prefix": "PARAM_EQUAL",
        "body": [
            "PARAM_EQUAL $1"
        ],
        "description": "PARAM_EQUAL"
    },
    "PARAM_EXIST": {
        "prefix": "PARAM_EXIST",
        "body": [
            "PARAM_EXIST $1"
        ],
        "description": "PARAM_EXIST"
    },
    "PARAM_FALSE": {
        "prefix": "PARAM_FALSE",
        "body": [
            "PARAM_FALSE $1"
        ],
        "description": "PARAM_FALSE"
    },
    "PARAM_TRUE": {
        "prefix": "PARAM_TRUE",
        "body": [
            "PARAM_TRUE $1"
        ],
        "description": "PARAM_TRUE"
    },
    "PARAM_UNEQUAL": {
        "prefix": "PARAM_UNEQUAL",
        "body": [
            "PARAM_UNEQUAL $1"
        ],
        "description": "PARAM_UNEQUAL"
    },
    "PARAM_VALID": {
        "prefix": "PARAM_VALID",
        "body": [
            "PARAM_VALID $1"
        ],
        "description": "PARAM_VALID"
    },
    "PARASOLID": {
        "prefix": "PARASOLID",
        "body": [
            "PARASOLID $1"
        ],
        "description": "PARASOLID"
    },
    "PART_CLEARANCE": {
        "prefix": "PART_CLEARANCE",
        "body": [
            "PART_CLEARANCE $1"
        ],
        "description": "PART_CLEARANCE"
    },
    "PART_INCL_QUILT_CLEARANCE": {
        "prefix": "PART_INCL_QUILT_CLEARANCE",
        "body": [
            "PART_INCL_QUILT_CLEARANCE $1"
        ],
        "description": "PART_INCL_QUILT_CLEARANCE"
    },
    "PART_LEVEL": {
        "prefix": "PART_LEVEL",
        "body": [
            "PART_LEVEL $1"
        ],
        "description": "PART_LEVEL"
    },
    "PATTERN_AXIS_DATA": {
        "prefix": "PATTERN_AXIS_DATA",
        "body": [
            "PATTERN_AXIS_DATA $1"
        ],
        "description": "PATTERN_AXIS_DATA"
    },
    "PATTERN_CURVE_DATA": {
        "prefix": "PATTERN_CURVE_DATA",
        "body": [
            "PATTERN_CURVE_DATA $1"
        ],
        "description": "PATTERN_CURVE_DATA"
    },
    "PATTERN_DATA": {
        "prefix": "PATTERN_DATA",
        "body": [
            "PATTERN_DATA $1"
        ],
        "description": "PATTERN_DATA"
    },
    "PATTERN_DIMENSION": {
        "prefix": "PATTERN_DIMENSION",
        "body": [
            "PATTERN_DIMENSION $1"
        ],
        "description": "PATTERN_DIMENSION"
    },
    "PATTERN_DIRECTION": {
        "prefix": "PATTERN_DIRECTION",
        "body": [
            "PATTERN_DIRECTION $1"
        ],
        "description": "PATTERN_DIRECTION"
    },
    "PATTERN_DIRECTION_DATA": {
        "prefix": "PATTERN_DIRECTION_DATA",
        "body": [
            "PATTERN_DIRECTION_DATA $1"
        ],
        "description": "PATTERN_DIRECTION_DATA"
    },
    "PATTERN_FILL_DATA": {
        "prefix": "PATTERN_FILL_DATA",
        "body": [
            "PATTERN_FILL_DATA $1"
        ],
        "description": "PATTERN_FILL_DATA"
    },
    "PATTERN_TABLE": {
        "prefix": "PATTERN_TABLE",
        "body": [
            "PATTERN_TABLE $1"
        ],
        "description": "PATTERN_TABLE"
    },
    "PATTERN_TABLE_DATA": {
        "prefix": "PATTERN_TABLE_DATA",
        "body": [
            "PATTERN_TABLE_DATA $1"
        ],
        "description": "PATTERN_TABLE_DATA"
    },
    "PATTERN_TABLE_INSTANCE": {
        "prefix": "PATTERN_TABLE_INSTANCE",
        "body": [
            "PATTERN_TABLE_INSTANCE $1"
        ],
        "description": "PATTERN_TABLE_INSTANCE"
    },
    "PDFHIDDEN_FONT": {
        "prefix": "PDFHIDDEN_FONT",
        "body": [
            "PDFHIDDEN_FONT $1"
        ],
        "description": "PDFHIDDEN_FONT"
    },
    "PDF_OPTION": {
        "prefix": "PDF_OPTION",
        "body": [
            "PDF_OPTION $1"
        ],
        "description": "PDF_OPTION"
    },
    "PDM_CONNECTED": {
        "prefix": "PDM_CONNECTED",
        "body": [
            "PDM_CONNECTED $1"
        ],
        "description": "PDM_CONNECTED"
    },
    "PLUS_MINUS": {
        "prefix": "PLUS_MINUS",
        "body": [
            "PLUS_MINUS $1"
        ],
        "description": "PLUS_MINUS"
    },
    "PLUS_MINUS_SYM": {
        "prefix": "PLUS_MINUS_SYM",
        "body": [
            "PLUS_MINUS_SYM $1"
        ],
        "description": "PLUS_MINUS_SYM"
    },
    "PLUS_MINUS_SYM_SUPERSCRIPT": {
        "prefix": "PLUS_MINUS_SYM_SUPERSCRIPT",
        "body": [
            "PLUS_MINUS_SYM_SUPERSCRIPT $1"
        ],
        "description": "PLUS_MINUS_SYM_SUPERSCRIPT"
    },
    "PNT_OFF": {
        "prefix": "PNT_OFF",
        "body": [
            "PNT_OFF $1"
        ],
        "description": "PNT_OFF"
    },
    "PNT_ON_LINE": {
        "prefix": "PNT_ON_LINE",
        "body": [
            "PNT_ON_LINE $1"
        ],
        "description": "PNT_ON_LINE"
    },
    "PNT_ON_LINE_OFF": {
        "prefix": "PNT_ON_LINE_OFF",
        "body": [
            "PNT_ON_LINE_OFF $1"
        ],
        "description": "PNT_ON_LINE_OFF"
    },
    "PNT_ON_SRF": {
        "prefix": "PNT_ON_SRF",
        "body": [
            "PNT_ON_SRF $1"
        ],
        "description": "PNT_ON_SRF"
    },
    "PNT_ON_SRF_OFF": {
        "prefix": "PNT_ON_SRF_OFF",
        "body": [
            "PNT_ON_SRF_OFF $1"
        ],
        "description": "PNT_ON_SRF_OFF"
    },
    "POCKET_NR": {
        "prefix": "POCKET_NR",
        "body": [
            "POCKET_NR $1"
        ],
        "description": "POCKET_NR"
    },
    "POSITIVE": {
        "prefix": "POSITIVE",
        "body": [
            "POSITIVE $1"
        ],
        "description": "POSITIVE"
    },
    "POST_REGEN": {
        "prefix": "POST_REGEN",
        "body": [
            "POST_REGEN $1"
        ],
        "description": "POST_REGEN"
    },
    "PRECISION": {
        "prefix": "PRECISION",
        "body": [
            "PRECISION $1"
        ],
        "description": "PRECISION"
    },
    "PRODVIEW": {
        "prefix": "PRODVIEW",
        "body": [
            "PRODVIEW $1"
        ],
        "description": "PRODVIEW"
    },
    "PRODVIEW_FORMAT": {
        "prefix": "PRODVIEW_FORMAT",
        "body": [
            "PRODVIEW_FORMAT $1"
        ],
        "description": "PRODVIEW_FORMAT"
    },
    "PROJECT_SHORT": {
        "prefix": "PROJECT_SHORT",
        "body": [
            "PROJECT_SHORT $1"
        ],
        "description": "PROJECT_SHORT"
    },
    "PURGEMODE": {
        "prefix": "PURGEMODE",
        "body": [
            "PURGEMODE $1"
        ],
        "description": "PURGEMODE"
    },
    "QUESTION": {
        "prefix": "QUESTION",
        "body": [
            "QUESTION $1"
        ],
        "description": "QUESTION"
    },
    "RADIUS": {
        "prefix": "RADIUS",
        "body": [
            "RADIUS $1"
        ],
        "description": "RADIUS"
    },
    "RAY_INTERSECTION": {
        "prefix": "RAY_INTERSECTION",
        "body": [
            "RAY_INTERSECTION $1"
        ],
        "description": "RAY_INTERSECTION"
    },
    "RAY_LENGTH": {
        "prefix": "RAY_LENGTH",
        "body": [
            "RAY_LENGTH $1"
        ],
        "description": "RAY_LENGTH"
    },
    "RAY_RADIUS": {
        "prefix": "RAY_RADIUS",
        "body": [
            "RAY_RADIUS $1"
        ],
        "description": "RAY_RADIUS"
    },
    "RECURSIVE": {
        "prefix": "RECURSIVE",
        "body": [
            "RECURSIVE $1"
        ],
        "description": "RECURSIVE"
    },
    "REF": {
        "prefix": "REF",
        "body": [
            "REF $1"
        ],
        "description": "REF"
    },
    "REF_ACTIVE": {
        "prefix": "REF_ACTIVE",
        "body": [
            "REF_ACTIVE $1"
        ],
        "description": "REF_ACTIVE"
    },
    "REF_ALTERNATE": {
        "prefix": "REF_ALTERNATE",
        "body": [
            "REF_ALTERNATE $1"
        ],
        "description": "REF_ALTERNATE"
    },
    "REF_EQUAL": {
        "prefix": "REF_EQUAL",
        "body": [
            "REF_EQUAL $1"
        ],
        "description": "REF_EQUAL"
    },
    "REF_EXCLUDED": {
        "prefix": "REF_EXCLUDED",
        "body": [
            "REF_EXCLUDED $1"
        ],
        "description": "REF_EXCLUDED"
    },
    "REF_FROZEN": {
        "prefix": "REF_FROZEN",
        "body": [
            "REF_FROZEN $1"
        ],
        "description": "REF_FROZEN"
    },
    "REF_FROZEN_PLACE": {
        "prefix": "REF_FROZEN_PLACE",
        "body": [
            "REF_FROZEN_PLACE $1"
        ],
        "description": "REF_FROZEN_PLACE"
    },
    "REF_GENERIC": {
        "prefix": "REF_GENERIC",
        "body": [
            "REF_GENERIC $1"
        ],
        "description": "REF_GENERIC"
    },
    "REF_GROUP_HEAD": {
        "prefix": "REF_GROUP_HEAD",
        "body": [
            "REF_GROUP_HEAD $1"
        ],
        "description": "REF_GROUP_HEAD"
    },
    "REF_GROUP_MEMBER": {
        "prefix": "REF_GROUP_MEMBER",
        "body": [
            "REF_GROUP_MEMBER $1"
        ],
        "description": "REF_GROUP_MEMBER"
    },
    "REF_INSTANCE": {
        "prefix": "REF_INSTANCE",
        "body": [
            "REF_INSTANCE $1"
        ],
        "description": "REF_INSTANCE"
    },
    "REF_INVALID": {
        "prefix": "REF_INVALID",
        "body": [
            "REF_INVALID $1"
        ],
        "description": "REF_INVALID"
    },
    "REF_MISSING": {
        "prefix": "REF_MISSING",
        "body": [
            "REF_MISSING $1"
        ],
        "description": "REF_MISSING"
    },
    "REF_NOT_FOUND": {
        "prefix": "REF_NOT_FOUND",
        "body": [
            "REF_NOT_FOUND $1"
        ],
        "description": "REF_NOT_FOUND"
    },
    "REF_PATTERN_HEAD": {
        "prefix": "REF_PATTERN_HEAD",
        "body": [
            "REF_PATTERN_HEAD $1"
        ],
        "description": "REF_PATTERN_HEAD"
    },
    "REF_PATTERN_LEADER": {
        "prefix": "REF_PATTERN_LEADER",
        "body": [
            "REF_PATTERN_LEADER $1"
        ],
        "description": "REF_PATTERN_LEADER"
    },
    "REF_PATTERN_MEMBER": {
        "prefix": "REF_PATTERN_MEMBER",
        "body": [
            "REF_PATTERN_MEMBER $1"
        ],
        "description": "REF_PATTERN_MEMBER"
    },
    "REF_SUPPRESSED": {
        "prefix": "REF_SUPPRESSED",
        "body": [
            "REF_SUPPRESSED $1"
        ],
        "description": "REF_SUPPRESSED"
    },
    "REF_TYPE": {
        "prefix": "REF_TYPE",
        "body": [
            "REF_TYPE $1"
        ],
        "description": "REF_TYPE"
    },
    "REF_UNEQUAL": {
        "prefix": "REF_UNEQUAL",
        "body": [
            "REF_UNEQUAL $1"
        ],
        "description": "REF_UNEQUAL"
    },
    "REF_VALID": {
        "prefix": "REF_VALID",
        "body": [
            "REF_VALID $1"
        ],
        "description": "REF_VALID"
    },
    "REGULAR": {
        "prefix": "REGULAR",
        "body": [
            "REGULAR $1"
        ],
        "description": "REGULAR"
    },
    "RELATION_EXIST": {
        "prefix": "RELATION_EXIST",
        "body": [
            "RELATION_EXIST $1"
        ],
        "description": "RELATION_EXIST"
    },
    "RELATION_LINE": {
        "prefix": "RELATION_LINE",
        "body": [
            "RELATION_LINE $1"
        ],
        "description": "RELATION_LINE"
    },
    "RELATIVE": {
        "prefix": "RELATIVE",
        "body": [
            "RELATIVE $1"
        ],
        "description": "RELATIVE"
    },
    "REMEMBER_COMPONENT": {
        "prefix": "REMEMBER_COMPONENT",
        "body": [
            "REMEMBER_COMPONENT $1"
        ],
        "description": "REMEMBER_COMPONENT"
    },
    "REMOVE_TABLES": {
        "prefix": "REMOVE_TABLES",
        "body": [
            "REMOVE_TABLES $1"
        ],
        "description": "REMOVE_TABLES"
    },
    "REMOVE_UDF_RELATIONS": {
        "prefix": "REMOVE_UDF_RELATIONS",
        "body": [
            "REMOVE_UDF_RELATIONS $1"
        ],
        "description": "REMOVE_UDF_RELATIONS"
    },
    "RENAME_DRAWING": {
        "prefix": "RENAME_DRAWING",
        "body": [
            "RENAME_DRAWING $1"
        ],
        "description": "RENAME_DRAWING"
    },
    "REPLACE_ALL": {
        "prefix": "REPLACE_ALL",
        "body": [
            "REPLACE_ALL $1"
        ],
        "description": "REPLACE_ALL"
    },
    "REQUIRED": {
        "prefix": "REQUIRED",
        "body": [
            "REQUIRED $1"
        ],
        "description": "REQUIRED"
    },
    "RESUMED": {
        "prefix": "RESUMED",
        "body": [
            "RESUMED $1"
        ],
        "description": "RESUMED"
    },
    "REVERSE_ARRAY": {
        "prefix": "REVERSE_ARRAY",
        "body": [
            "REVERSE_ARRAY $1"
        ],
        "description": "REVERSE_ARRAY"
    },
    "REVERSE_MAP": {
        "prefix": "REVERSE_MAP",
        "body": [
            "REVERSE_MAP $1"
        ],
        "description": "REVERSE_MAP"
    },
    "RIGHT": {
        "prefix": "RIGHT",
        "body": [
            "RIGHT $1"
        ],
        "description": "RIGHT"
    },
    "RIGHT_HALF": {
        "prefix": "RIGHT_HALF",
        "body": [
            "RIGHT_HALF $1"
        ],
        "description": "RIGHT_HALF"
    },
    "SAT": {
        "prefix": "SAT",
        "body": [
            "SAT $1"
        ],
        "description": "SAT"
    },
    "SAVE_CHANGES": {
        "prefix": "SAVE_CHANGES",
        "body": [
            "SAVE_CHANGES $1"
        ],
        "description": "SAVE_CHANGES"
    },
    "SAVE_OBJECTS": {
        "prefix": "SAVE_OBJECTS",
        "body": [
            "SAVE_OBJECTS $1"
        ],
        "description": "SAVE_OBJECTS"
    },
    "SCREEN_LOCATION": {
        "prefix": "SCREEN_LOCATION",
        "body": [
            "SCREEN_LOCATION $1"
        ],
        "description": "SCREEN_LOCATION"
    },
    "SEARCH_FORWARD": {
        "prefix": "SEARCH_FORWARD",
        "body": [
            "SEARCH_FORWARD $1"
        ],
        "description": "SEARCH_FORWARD"
    },
    "SEARCH_METHOD": {
        "prefix": "SEARCH_METHOD",
        "body": [
            "SEARCH_METHOD $1"
        ],
        "description": "SEARCH_METHOD"
    },
    "SELECT_BY_BOX": {
        "prefix": "SELECT_BY_BOX",
        "body": [
            "SELECT_BY_BOX $1"
        ],
        "description": "SELECT_BY_BOX"
    },
    "SELECT_BY_MENU": {
        "prefix": "SELECT_BY_MENU",
        "body": [
            "SELECT_BY_MENU $1"
        ],
        "description": "SELECT_BY_MENU"
    },
    "SERVER_NAME": {
        "prefix": "SERVER_NAME",
        "body": [
            "SERVER_NAME $1"
        ],
        "description": "SERVER_NAME"
    },
    "SHADED": {
        "prefix": "SHADED",
        "body": [
            "SHADED $1"
        ],
        "description": "SHADED"
    },
    "SHADED_WITH_EDGES": {
        "prefix": "SHADED_WITH_EDGES",
        "body": [
            "SHADED_WITH_EDGES $1"
        ],
        "description": "SHADED_WITH_EDGES"
    },
    "SHEET_BY_INDEX": {
        "prefix": "SHEET_BY_INDEX",
        "body": [
            "SHEET_BY_INDEX $1"
        ],
        "description": "SHEET_BY_INDEX"
    },
    "SHEET_BY_NAME": {
        "prefix": "SHEET_BY_NAME",
        "body": [
            "SHEET_BY_NAME $1"
        ],
        "description": "SHEET_BY_NAME"
    },
    "SHOW": {
        "prefix": "SHOW",
        "body": [
            "SHOW $1"
        ],
        "description": "SHOW"
    },
    "SHOWN": {
        "prefix": "SHOWN",
        "body": [
            "SHOWN $1"
        ],
        "description": "SHOWN"
    },
    "SHOW_AUTOSEL": {
        "prefix": "SHOW_AUTOSEL",
        "body": [
            "SHOW_AUTOSEL $1"
        ],
        "description": "SHOW_AUTOSEL"
    },
    "SHOW_GROUP": {
        "prefix": "SHOW_GROUP",
        "body": [
            "SHOW_GROUP $1"
        ],
        "description": "SHOW_GROUP"
    },
    "SHOW_GUI_FOR_EXISTING": {
        "prefix": "SHOW_GUI_FOR_EXISTING",
        "body": [
            "SHOW_GUI_FOR_EXISTING $1"
        ],
        "description": "SHOW_GUI_FOR_EXISTING"
    },
    "SHOW_TITLE": {
        "prefix": "SHOW_TITLE",
        "body": [
            "SHOW_TITLE $1"
        ],
        "description": "SHOW_TITLE"
    },
    "SHRINKWRAP": {
        "prefix": "SHRINKWRAP",
        "body": [
            "SHRINKWRAP $1"
        ],
        "description": "SHRINKWRAP"
    },
    "SHRINKWRAP_ADD_COMPONENTS": {
        "prefix": "SHRINKWRAP_ADD_COMPONENTS",
        "body": [
            "SHRINKWRAP_ADD_COMPONENTS $1"
        ],
        "description": "SHRINKWRAP_ADD_COMPONENTS"
    },
    "SHRINKWRAP_ADD_DATUMS": {
        "prefix": "SHRINKWRAP_ADD_DATUMS",
        "body": [
            "SHRINKWRAP_ADD_DATUMS $1"
        ],
        "description": "SHRINKWRAP_ADD_DATUMS"
    },
    "SHRINKWRAP_ADD_SURFACES": {
        "prefix": "SHRINKWRAP_ADD_SURFACES",
        "body": [
            "SHRINKWRAP_ADD_SURFACES $1"
        ],
        "description": "SHRINKWRAP_ADD_SURFACES"
    },
    "SHRINKWRAP_ASSIGN_MASS_PROPERTIES": {
        "prefix": "SHRINKWRAP_ASSIGN_MASS_PROPERTIES",
        "body": [
            "SHRINKWRAP_ASSIGN_MASS_PROPERTIES $1"
        ],
        "description": "SHRINKWRAP_ASSIGN_MASS_PROPERTIES"
    },
    "SHRINKWRAP_FILL_HOLES": {
        "prefix": "SHRINKWRAP_FILL_HOLES",
        "body": [
            "SHRINKWRAP_FILL_HOLES $1"
        ],
        "description": "SHRINKWRAP_FILL_HOLES"
    },
    "SHRINKWRAP_IGNORE_QUILTS": {
        "prefix": "SHRINKWRAP_IGNORE_QUILTS",
        "body": [
            "SHRINKWRAP_IGNORE_QUILTS $1"
        ],
        "description": "SHRINKWRAP_IGNORE_QUILTS"
    },
    "SHRINKWRAP_IGNORE_SMALL_SURFACES": {
        "prefix": "SHRINKWRAP_IGNORE_SMALL_SURFACES",
        "body": [
            "SHRINKWRAP_IGNORE_SMALL_SURFACES $1"
        ],
        "description": "SHRINKWRAP_IGNORE_SMALL_SURFACES"
    },
    "SHRINKWRAP_IGNORE_SMALL_SURFACES_THRESHOLD": {
        "prefix": "SHRINKWRAP_IGNORE_SMALL_SURFACES_THRESHOLD",
        "body": [
            "SHRINKWRAP_IGNORE_SMALL_SURFACES_THRESHOLD $1"
        ],
        "description": "SHRINKWRAP_IGNORE_SMALL_SURFACES_THRESHOLD"
    },
    "SHRINKWRAP_METHOD": {
        "prefix": "SHRINKWRAP_METHOD",
        "body": [
            "SHRINKWRAP_METHOD $1"
        ],
        "description": "SHRINKWRAP_METHOD"
    },
    "SHRINKWRAP_OPTION": {
        "prefix": "SHRINKWRAP_OPTION",
        "body": [
            "SHRINKWRAP_OPTION $1"
        ],
        "description": "SHRINKWRAP_OPTION"
    },
    "SHRINKWRAP_QUALITY": {
        "prefix": "SHRINKWRAP_QUALITY",
        "body": [
            "SHRINKWRAP_QUALITY $1"
        ],
        "description": "SHRINKWRAP_QUALITY"
    },
    "SIDE_FACE": {
        "prefix": "SIDE_FACE",
        "body": [
            "SIDE_FACE $1"
        ],
        "description": "SIDE_FACE"
    },
    "SINGLE_TAB_PATTERN_INSTANCE": {
        "prefix": "SINGLE_TAB_PATTERN_INSTANCE",
        "body": [
            "SINGLE_TAB_PATTERN_INSTANCE $1"
        ],
        "description": "SINGLE_TAB_PATTERN_INSTANCE"
    },
    "SMT_BEND_SURFACE": {
        "prefix": "SMT_BEND_SURFACE",
        "body": [
            "SMT_BEND_SURFACE $1"
        ],
        "description": "SMT_BEND_SURFACE"
    },
    "SMT_BEND_SURFACE_PROPS": {
        "prefix": "SMT_BEND_SURFACE_PROPS",
        "body": [
            "SMT_BEND_SURFACE_PROPS $1"
        ],
        "description": "SMT_BEND_SURFACE_PROPS"
    },
    "SMT_FORM_OPTION": {
        "prefix": "SMT_FORM_OPTION",
        "body": [
            "SMT_FORM_OPTION $1"
        ],
        "description": "SMT_FORM_OPTION"
    },
    "SOLIDFONT": {
        "prefix": "SOLIDFONT",
        "body": [
            "SOLIDFONT $1"
        ],
        "description": "SOLIDFONT"
    },
    "SOLID_ONLY": {
        "prefix": "SOLID_ONLY",
        "body": [
            "SOLID_ONLY $1"
        ],
        "description": "SOLID_ONLY"
    },
    "SORT_SKETCH": {
        "prefix": "SORT_SKETCH",
        "body": [
            "SORT_SKETCH $1"
        ],
        "description": "SORT_SKETCH"
    },
    "SORT_TO_OUT": {
        "prefix": "SORT_TO_OUT",
        "body": [
            "SORT_TO_OUT $1"
        ],
        "description": "SORT_TO_OUT"
    },
    "SPLIT_CHAR": {
        "prefix": "SPLIT_CHAR",
        "body": [
            "SPLIT_CHAR $1"
        ],
        "description": "SPLIT_CHAR"
    },
    "SRF_NORMAL": {
        "prefix": "SRF_NORMAL",
        "body": [
            "SRF_NORMAL $1"
        ],
        "description": "SRF_NORMAL"
    },
    "STAGGER": {
        "prefix": "STAGGER",
        "body": [
            "STAGGER $1"
        ],
        "description": "STAGGER"
    },
    "STAGGER_INCREMENT": {
        "prefix": "STAGGER_INCREMENT",
        "body": [
            "STAGGER_INCREMENT $1"
        ],
        "description": "STAGGER_INCREMENT"
    },
    "START": {
        "prefix": "START",
        "body": [
            "START $1"
        ],
        "description": "START"
    },
    "STEP": {
        "prefix": "STEP",
        "body": [
            "STEP $1"
        ],
        "description": "STEP"
    },
    "STEP_SIZE": {
        "prefix": "STEP_SIZE",
        "body": [
            "STEP_SIZE $1"
        ],
        "description": "STEP_SIZE"
    },
    "STL": {
        "prefix": "STL",
        "body": [
            "STL $1"
        ],
        "description": "STL"
    },
    "STRAIGHT": {
        "prefix": "STRAIGHT",
        "body": [
            "STRAIGHT $1"
        ],
        "description": "STRAIGHT"
    },
    "STRENGTHEN": {
        "prefix": "STRENGTHEN",
        "body": [
            "STRENGTHEN $1"
        ],
        "description": "STRENGTHEN"
    },
    "SUPPRESSED": {
        "prefix": "SUPPRESSED",
        "body": [
            "SUPPRESSED $1"
        ],
        "description": "SUPPRESSED"
    },
    "SURFACE_ALLOW_ALL": {
        "prefix": "SURFACE_ALLOW_ALL",
        "body": [
            "SURFACE_ALLOW_ALL $1"
        ],
        "description": "SURFACE_ALLOW_ALL"
    },
    "SURFACE_CLEARANCE": {
        "prefix": "SURFACE_CLEARANCE",
        "body": [
            "SURFACE_CLEARANCE $1"
        ],
        "description": "SURFACE_CLEARANCE"
    },
    "SURFACE_DISALLOW_INTEND": {
        "prefix": "SURFACE_DISALLOW_INTEND",
        "body": [
            "SURFACE_DISALLOW_INTEND $1"
        ],
        "description": "SURFACE_DISALLOW_INTEND"
    },
    "SURFACE_DISALLOW_QLT": {
        "prefix": "SURFACE_DISALLOW_QLT",
        "body": [
            "SURFACE_DISALLOW_QLT $1"
        ],
        "description": "SURFACE_DISALLOW_QLT"
    },
    "SURFACE_DISALLOW_SLD": {
        "prefix": "SURFACE_DISALLOW_SLD",
        "body": [
            "SURFACE_DISALLOW_SLD $1"
        ],
        "description": "SURFACE_DISALLOW_SLD"
    },
    "SURFACE_DONT_MIX": {
        "prefix": "SURFACE_DONT_MIX",
        "body": [
            "SURFACE_DONT_MIX $1"
        ],
        "description": "SURFACE_DONT_MIX"
    },
    "SURFACE_PARAM": {
        "prefix": "SURFACE_PARAM",
        "body": [
            "SURFACE_PARAM $1"
        ],
        "description": "SURFACE_PARAM"
    },
    "SURFACE_SAME_SRF_LST": {
        "prefix": "SURFACE_SAME_SRF_LST",
        "body": [
            "SURFACE_SAME_SRF_LST $1"
        ],
        "description": "SURFACE_SAME_SRF_LST"
    },
    "SURFACE_TYPE": {
        "prefix": "SURFACE_TYPE",
        "body": [
            "SURFACE_TYPE $1"
        ],
        "description": "SURFACE_TYPE"
    },
    "SURF_EXIST": {
        "prefix": "SURF_EXIST",
        "body": [
            "SURF_EXIST $1"
        ],
        "description": "SURF_EXIST"
    },
    "SURF_NOT_EXIST": {
        "prefix": "SURF_NOT_EXIST",
        "body": [
            "SURF_NOT_EXIST $1"
        ],
        "description": "SURF_NOT_EXIST"
    },
    "SURF_SUBSET": {
        "prefix": "SURF_SUBSET",
        "body": [
            "SURF_SUBSET $1"
        ],
        "description": "SURF_SUBSET"
    },
    "SURF_TYPE": {
        "prefix": "SURF_TYPE",
        "body": [
            "SURF_TYPE $1"
        ],
        "description": "SURF_TYPE"
    },
    "SUSPEND_DEPENDENT": {
        "prefix": "SUSPEND_DEPENDENT",
        "body": [
            "SUSPEND_DEPENDENT $1"
        ],
        "description": "SUSPEND_DEPENDENT"
    },
    "SYMBOLIC": {
        "prefix": "SYMBOLIC",
        "body": [
            "SYMBOLIC $1"
        ],
        "description": "SYMBOLIC"
    },
    "SYMBOLIC_MODE": {
        "prefix": "SYMBOLIC_MODE",
        "body": [
            "SYMBOLIC_MODE $1"
        ],
        "description": "SYMBOLIC_MODE"
    },
    "SYMBOL_OPTION": {
        "prefix": "SYMBOL_OPTION",
        "body": [
            "SYMBOL_OPTION $1"
        ],
        "description": "SYMBOL_OPTION"
    },
    "SYNC": {
        "prefix": "SYNC",
        "body": [
            "SYNC $1"
        ],
        "description": "SYNC"
    },
    "S_CURVE": {
        "prefix": "S_CURVE",
        "body": [
            "S_CURVE $1"
        ],
        "description": "S_CURVE"
    },
    "TABLE_FROM_PART": {
        "prefix": "TABLE_FROM_PART",
        "body": [
            "TABLE_FROM_PART $1"
        ],
        "description": "TABLE_FROM_PART"
    },
    "TABLE_HEIGHT": {
        "prefix": "TABLE_HEIGHT",
        "body": [
            "TABLE_HEIGHT $1"
        ],
        "description": "TABLE_HEIGHT"
    },
    "TABLE_OPTION": {
        "prefix": "TABLE_OPTION",
        "body": [
            "TABLE_OPTION $1"
        ],
        "description": "TABLE_OPTION"
    },
    "TANGENT": {
        "prefix": "TANGENT",
        "body": [
            "TANGENT $1"
        ],
        "description": "TANGENT"
    },
    "TEMPLATE": {
        "prefix": "TEMPLATE",
        "body": [
            "TEMPLATE $1"
        ],
        "description": "TEMPLATE"
    },
    "TEXTURE_PROPS": {
        "prefix": "TEXTURE_PROPS",
        "body": [
            "TEXTURE_PROPS $1"
        ],
        "description": "TEXTURE_PROPS"
    },
    "TEXT_COLOR": {
        "prefix": "TEXT_COLOR",
        "body": [
            "TEXT_COLOR $1"
        ],
        "description": "TEXT_COLOR"
    },
    "TEXT_MATCH": {
        "prefix": "TEXT_MATCH",
        "body": [
            "TEXT_MATCH $1"
        ],
        "description": "TEXT_MATCH"
    },
    "TEXT_STYLE": {
        "prefix": "TEXT_STYLE",
        "body": [
            "TEXT_STYLE $1"
        ],
        "description": "TEXT_STYLE"
    },
    "TEXT_SUB_MATCH": {
        "prefix": "TEXT_SUB_MATCH",
        "body": [
            "TEXT_SUB_MATCH $1"
        ],
        "description": "TEXT_SUB_MATCH"
    },
    "THICKNESS": {
        "prefix": "THICKNESS",
        "body": [
            "THICKNESS $1"
        ],
        "description": "THICKNESS"
    },
    "THIS": {
        "prefix": "THIS",
        "body": [
            "THIS $1"
        ],
        "description": "THIS"
    },
    "THIS_MEASURECOPY": {
        "prefix": "THIS_MEASURECOPY",
        "body": [
            "THIS_MEASURECOPY $1"
        ],
        "description": "THIS_MEASURECOPY"
    },
    "TIFF": {
        "prefix": "TIFF",
        "body": [
            "TIFF $1"
        ],
        "description": "TIFF"
    },
    "TIMEOUT": {
        "prefix": "TIMEOUT",
        "body": [
            "TIMEOUT $1"
        ],
        "description": "TIMEOUT"
    },
    "TOLERANCE_ONLY": {
        "prefix": "TOLERANCE_ONLY",
        "body": [
            "TOLERANCE_ONLY $1"
        ],
        "description": "TOLERANCE_ONLY"
    },
    "TOOLKIT_DLL": {
        "prefix": "TOOLKIT_DLL",
        "body": [
            "TOOLKIT_DLL $1"
        ],
        "description": "TOOLKIT_DLL"
    },
    "TOOLKIT_HANDLE_VALID": {
        "prefix": "TOOLKIT_HANDLE_VALID",
        "body": [
            "TOOLKIT_HANDLE_VALID $1"
        ],
        "description": "TOOLKIT_HANDLE_VALID"
    },
    "TOOLTIP": {
        "prefix": "TOOLTIP",
        "body": [
            "TOOLTIP $1"
        ],
        "description": "TOOLTIP"
    },
    "TOP": {
        "prefix": "TOP",
        "body": [
            "TOP $1"
        ],
        "description": "TOP"
    },
    "TOPLEVEL": {
        "prefix": "TOPLEVEL",
        "body": [
            "TOPLEVEL $1"
        ],
        "description": "TOPLEVEL"
    },
    "TOP_CENTER": {
        "prefix": "TOP_CENTER",
        "body": [
            "TOP_CENTER $1"
        ],
        "description": "TOP_CENTER"
    },
    "TOP_LEFT": {
        "prefix": "TOP_LEFT",
        "body": [
            "TOP_LEFT $1"
        ],
        "description": "TOP_LEFT"
    },
    "TOP_LEVEL": {
        "prefix": "TOP_LEVEL",
        "body": [
            "TOP_LEVEL $1"
        ],
        "description": "TOP_LEVEL"
    },
    "TOP_RIGHT": {
        "prefix": "TOP_RIGHT",
        "body": [
            "TOP_RIGHT $1"
        ],
        "description": "TOP_RIGHT"
    },
    "TO_ENTITY": {
        "prefix": "TO_ENTITY",
        "body": [
            "TO_ENTITY $1"
        ],
        "description": "TO_ENTITY"
    },
    "TRIM_SKETCH": {
        "prefix": "TRIM_SKETCH",
        "body": [
            "TRIM_SKETCH $1"
        ],
        "description": "TRIM_SKETCH"
    },
    "UDF_CHECK_FOR_SURFACE_FEATURES": {
        "prefix": "UDF_CHECK_FOR_SURFACE_FEATURES",
        "body": [
            "UDF_CHECK_FOR_SURFACE_FEATURES $1"
        ],
        "description": "UDF_CHECK_FOR_SURFACE_FEATURES"
    },
    "UDF_CONSTRAINT": {
        "prefix": "UDF_CONSTRAINT",
        "body": [
            "UDF_CONSTRAINT $1"
        ],
        "description": "UDF_CONSTRAINT"
    },
    "UDF_DATA": {
        "prefix": "UDF_DATA",
        "body": [
            "UDF_DATA $1"
        ],
        "description": "UDF_DATA"
    },
    "UDF_DEFAULT_BODY": {
        "prefix": "UDF_DEFAULT_BODY",
        "body": [
            "UDF_DEFAULT_BODY $1"
        ],
        "description": "UDF_DEFAULT_BODY"
    },
    "UDF_DIM": {
        "prefix": "UDF_DIM",
        "body": [
            "UDF_DIM $1"
        ],
        "description": "UDF_DIM"
    },
    "UDF_DIM_ANGLE": {
        "prefix": "UDF_DIM_ANGLE",
        "body": [
            "UDF_DIM_ANGLE $1"
        ],
        "description": "UDF_DIM_ANGLE"
    },
    "UDF_EXP_DIM_NAME": {
        "prefix": "UDF_EXP_DIM_NAME",
        "body": [
            "UDF_EXP_DIM_NAME $1"
        ],
        "description": "UDF_EXP_DIM_NAME"
    },
    "UDF_EXP_DIM_REF": {
        "prefix": "UDF_EXP_DIM_REF",
        "body": [
            "UDF_EXP_DIM_REF $1"
        ],
        "description": "UDF_EXP_DIM_REF"
    },
    "UDF_EXP_PARAM": {
        "prefix": "UDF_EXP_PARAM",
        "body": [
            "UDF_EXP_PARAM $1"
        ],
        "description": "UDF_EXP_PARAM"
    },
    "UDF_EXP_REF": {
        "prefix": "UDF_EXP_REF",
        "body": [
            "UDF_EXP_REF $1"
        ],
        "description": "UDF_EXP_REF"
    },
    "UDF_INSTANCE": {
        "prefix": "UDF_INSTANCE",
        "body": [
            "UDF_INSTANCE $1"
        ],
        "description": "UDF_INSTANCE"
    },
    "UDF_INTERSECTION": {
        "prefix": "UDF_INTERSECTION",
        "body": [
            "UDF_INTERSECTION $1"
        ],
        "description": "UDF_INTERSECTION"
    },
    "UDF_NUMBER": {
        "prefix": "UDF_NUMBER",
        "body": [
            "UDF_NUMBER $1"
        ],
        "description": "UDF_NUMBER"
    },
    "UDF_ORIENTATION": {
        "prefix": "UDF_ORIENTATION",
        "body": [
            "UDF_ORIENTATION $1"
        ],
        "description": "UDF_ORIENTATION"
    },
    "UDF_PARAM": {
        "prefix": "UDF_PARAM",
        "body": [
            "UDF_PARAM $1"
        ],
        "description": "UDF_PARAM"
    },
    "UDF_REF": {
        "prefix": "UDF_REF",
        "body": [
            "UDF_REF $1"
        ],
        "description": "UDF_REF"
    },
    "UDF_REORDER_NR": {
        "prefix": "UDF_REORDER_NR",
        "body": [
            "UDF_REORDER_NR $1"
        ],
        "description": "UDF_REORDER_NR"
    },
    "UDF_UNIT_PARAM": {
        "prefix": "UDF_UNIT_PARAM",
        "body": [
            "UDF_UNIT_PARAM $1"
        ],
        "description": "UDF_UNIT_PARAM"
    },
    "UNIQUE_IDENT": {
        "prefix": "UNIQUE_IDENT",
        "body": [
            "UNIQUE_IDENT $1"
        ],
        "description": "UNIQUE_IDENT"
    },
    "UNIT": {
        "prefix": "UNIT",
        "body": [
            "UNIT $1"
        ],
        "description": "UNIT"
    },
    "UNLOCKED": {
        "prefix": "UNLOCKED",
        "body": [
            "UNLOCKED $1"
        ],
        "description": "UNLOCKED"
    },
    "UPDATE_COMMON_NAME": {
        "prefix": "UPDATE_COMMON_NAME",
        "body": [
            "UPDATE_COMMON_NAME $1"
        ],
        "description": "UPDATE_COMMON_NAME"
    },
    "UPDATE_CONSTRAINTS": {
        "prefix": "UPDATE_CONSTRAINTS",
        "body": [
            "UPDATE_CONSTRAINTS $1"
        ],
        "description": "UPDATE_CONSTRAINTS"
    },
    "UPDATE_ON_REGEN": {
        "prefix": "UPDATE_ON_REGEN",
        "body": [
            "UPDATE_ON_REGEN $1"
        ],
        "description": "UPDATE_ON_REGEN"
    },
    "UPDATE_STRINGS": {
        "prefix": "UPDATE_STRINGS",
        "body": [
            "UPDATE_STRINGS $1"
        ],
        "description": "UPDATE_STRINGS"
    },
    "UPDATE_VECTOR": {
        "prefix": "UPDATE_VECTOR",
        "body": [
            "UPDATE_VECTOR $1"
        ],
        "description": "UPDATE_VECTOR"
    },
    "USER_DEFINED": {
        "prefix": "USER_DEFINED",
        "body": [
            "USER_DEFINED $1"
        ],
        "description": "USER_DEFINED"
    },
    "USE_32BIT_DRIVER": {
        "prefix": "USE_32BIT_DRIVER",
        "body": [
            "USE_32BIT_DRIVER $1"
        ],
        "description": "USE_32BIT_DRIVER"
    },
    "USE_COLOR_OWNER": {
        "prefix": "USE_COLOR_OWNER",
        "body": [
            "USE_COLOR_OWNER $1"
        ],
        "description": "USE_COLOR_OWNER"
    },
    "USE_COMMONSPACE": {
        "prefix": "USE_COMMONSPACE",
        "body": [
            "USE_COMMONSPACE $1"
        ],
        "description": "USE_COMMONSPACE"
    },
    "USE_COMPONENT_COLOR": {
        "prefix": "USE_COMPONENT_COLOR",
        "body": [
            "USE_COMPONENT_COLOR $1"
        ],
        "description": "USE_COMPONENT_COLOR"
    },
    "USE_COMPONENT_TEXTURE": {
        "prefix": "USE_COMPONENT_TEXTURE",
        "body": [
            "USE_COMPONENT_TEXTURE $1"
        ],
        "description": "USE_COMPONENT_TEXTURE"
    },
    "USE_DRAWING_UNITS": {
        "prefix": "USE_DRAWING_UNITS",
        "body": [
            "USE_DRAWING_UNITS $1"
        ],
        "description": "USE_DRAWING_UNITS"
    },
    "USE_GENERIC": {
        "prefix": "USE_GENERIC",
        "body": [
            "USE_GENERIC $1"
        ],
        "description": "USE_GENERIC"
    },
    "USE_INDEX": {
        "prefix": "USE_INDEX",
        "body": [
            "USE_INDEX $1"
        ],
        "description": "USE_INDEX"
    },
    "USE_INDICES": {
        "prefix": "USE_INDICES",
        "body": [
            "USE_INDICES $1"
        ],
        "description": "USE_INDICES"
    },
    "USE_INSERT_MODE": {
        "prefix": "USE_INSERT_MODE",
        "body": [
            "USE_INSERT_MODE $1"
        ],
        "description": "USE_INSERT_MODE"
    },
    "USE_INTERNAL_BROWSER": {
        "prefix": "USE_INTERNAL_BROWSER",
        "body": [
            "USE_INTERNAL_BROWSER $1"
        ],
        "description": "USE_INTERNAL_BROWSER"
    },
    "USE_MDL_UNITS": {
        "prefix": "USE_MDL_UNITS",
        "body": [
            "USE_MDL_UNITS $1"
        ],
        "description": "USE_MDL_UNITS"
    },
    "USE_QUILTS": {
        "prefix": "USE_QUILTS",
        "body": [
            "USE_QUILTS $1"
        ],
        "description": "USE_QUILTS"
    },
    "USE_SIMPREP": {
        "prefix": "USE_SIMPREP",
        "body": [
            "USE_SIMPREP $1"
        ],
        "description": "USE_SIMPREP"
    },
    "USE_TEXTURE_OWNER": {
        "prefix": "USE_TEXTURE_OWNER",
        "body": [
            "USE_TEXTURE_OWNER $1"
        ],
        "description": "USE_TEXTURE_OWNER"
    },
    "USE_UTC": {
        "prefix": "USE_UTC",
        "body": [
            "USE_UTC $1"
        ],
        "description": "USE_UTC"
    },
    "VARIABLE_SIZE": {
        "prefix": "VARIABLE_SIZE",
        "body": [
            "VARIABLE_SIZE $1"
        ],
        "description": "VARIABLE_SIZE"
    },
    "VAR_IN": {
        "prefix": "VAR_IN",
        "body": [
            "VAR_IN $1"
        ],
        "description": "VAR_IN"
    },
    "VAR_INOUT": {
        "prefix": "VAR_INOUT",
        "body": [
            "VAR_INOUT $1"
        ],
        "description": "VAR_INOUT"
    },
    "VAR_OUT": {
        "prefix": "VAR_OUT",
        "body": [
            "VAR_OUT $1"
        ],
        "description": "VAR_OUT"
    },
    "VAR_TEXT": {
        "prefix": "VAR_TEXT",
        "body": [
            "VAR_TEXT $1"
        ],
        "description": "VAR_TEXT"
    },
    "VERBOSE": {
        "prefix": "VERBOSE",
        "body": [
            "VERBOSE $1"
        ],
        "description": "VERBOSE"
    },
    "VERSION": {
        "prefix": "VERSION",
        "body": [
            "VERSION $1"
        ],
        "description": "VERSION"
    },
    "VERTICAL": {
        "prefix": "VERTICAL",
        "body": [
            "VERTICAL $1"
        ],
        "description": "VERTICAL"
    },
    "VIEW_NAME": {
        "prefix": "VIEW_NAME",
        "body": [
            "VIEW_NAME $1"
        ],
        "description": "VIEW_NAME"
    },
    "VISIBLE_COLUMNS": {
        "prefix": "VISIBLE_COLUMNS",
        "body": [
            "VISIBLE_COLUMNS $1"
        ],
        "description": "VISIBLE_COLUMNS"
    },
    "VISIBLE_LINES": {
        "prefix": "VISIBLE_LINES",
        "body": [
            "VISIBLE_LINES $1"
        ],
        "description": "VISIBLE_LINES"
    },
    "WARNING": {
        "prefix": "WARNING",
        "body": [
            "WARNING $1"
        ],
        "description": "WARNING"
    },
    "WHITE_FACE": {
        "prefix": "WHITE_FACE",
        "body": [
            "WHITE_FACE $1"
        ],
        "description": "WHITE_FACE"
    },
    "WHOLE_WORD_MATCH": {
        "prefix": "WHOLE_WORD_MATCH",
        "body": [
            "WHOLE_WORD_MATCH $1"
        ],
        "description": "WHOLE_WORD_MATCH"
    },
    "WIDTH": {
        "prefix": "WIDTH",
        "body": [
            "WIDTH $1"
        ],
        "description": "WIDTH"
    },
    "WIDTH_FACTOR": {
        "prefix": "WIDTH_FACTOR",
        "body": [
            "WIDTH_FACTOR $1"
        ],
        "description": "WIDTH_FACTOR"
    },
    "WINWORD_CONNECTED": {
        "prefix": "WINWORD_CONNECTED",
        "body": [
            "WINWORD_CONNECTED $1"
        ],
        "description": "WINWORD_CONNECTED"
    },
    "WIREFRAME": {
        "prefix": "WIREFRAME",
        "body": [
            "WIREFRAME $1"
        ],
        "description": "WIREFRAME"
    },
    "WITH_CONTENT": {
        "prefix": "WITH_CONTENT",
        "body": [
            "WITH_CONTENT $1"
        ],
        "description": "WITH_CONTENT"
    },
    "WITH_CONTENT_NOT": {
        "prefix": "WITH_CONTENT_NOT",
        "body": [
            "WITH_CONTENT_NOT $1"
        ],
        "description": "WITH_CONTENT_NOT"
    },
    "WITH_IDENTIFIER": {
        "prefix": "WITH_IDENTIFIER",
        "body": [
            "WITH_IDENTIFIER $1"
        ],
        "description": "WITH_IDENTIFIER"
    },
    "WITH_IDENTIFIER_NOT": {
        "prefix": "WITH_IDENTIFIER_NOT",
        "body": [
            "WITH_IDENTIFIER_NOT $1"
        ],
        "description": "WITH_IDENTIFIER_NOT"
    },
    "WITH_LEADER": {
        "prefix": "WITH_LEADER",
        "body": [
            "WITH_LEADER $1"
        ],
        "description": "WITH_LEADER"
    },
    "WITH_SESSION_ID": {
        "prefix": "WITH_SESSION_ID",
        "body": [
            "WITH_SESSION_ID $1"
        ],
        "description": "WITH_SESSION_ID"
    },
    "WITH_TIMESTAMP": {
        "prefix": "WITH_TIMESTAMP",
        "body": [
            "WITH_TIMESTAMP $1"
        ],
        "description": "WITH_TIMESTAMP"
    },
    "WRAP_TEXT": {
        "prefix": "WRAP_TEXT",
        "body": [
            "WRAP_TEXT $1"
        ],
        "description": "WRAP_TEXT"
    },
    "XSEC_OPTION": {
        "prefix": "XSEC_OPTION",
        "body": [
            "XSEC_OPTION $1"
        ],
        "description": "XSEC_OPTION"
    },
    "X_MAX": {
        "prefix": "X_MAX",
        "body": [
            "X_MAX $1"
        ],
        "description": "X_MAX"
    },
    "X_MIN": {
        "prefix": "X_MIN",
        "body": [
            "X_MIN $1"
        ],
        "description": "X_MIN"
    },
    "X_POS_CENTER": {
        "prefix": "X_POS_CENTER",
        "body": [
            "X_POS_CENTER $1"
        ],
        "description": "X_POS_CENTER"
    },
    "X_SIZE": {
        "prefix": "X_SIZE",
        "body": [
            "X_SIZE $1"
        ],
        "description": "X_SIZE"
    },
    "Y_MAX": {
        "prefix": "Y_MAX",
        "body": [
            "Y_MAX $1"
        ],
        "description": "Y_MAX"
    },
    "Y_MIN": {
        "prefix": "Y_MIN",
        "body": [
            "Y_MIN $1"
        ],
        "description": "Y_MIN"
    },
    "Y_POS_CENTER": {
        "prefix": "Y_POS_CENTER",
        "body": [
            "Y_POS_CENTER $1"
        ],
        "description": "Y_POS_CENTER"
    },
    "Y_SIZE": {
        "prefix": "Y_SIZE",
        "body": [
            "Y_SIZE $1"
        ],
        "description": "Y_SIZE"
    },
    "Z_MAX": {
        "prefix": "Z_MAX",
        "body": [
            "Z_MAX $1"
        ],
        "description": "Z_MAX"
    },
    "Z_MIN": {
        "prefix": "Z_MIN",
        "body": [
            "Z_MIN $1"
        ],
        "description": "Z_MIN"
    },
    "Z_POS_CENTER": {
        "prefix": "Z_POS_CENTER",
        "body": [
            "Z_POS_CENTER $1"
        ],
        "description": "Z_POS_CENTER"
    },
    "Z_SIZE": {
        "prefix": "Z_SIZE",
        "body": [
            "Z_SIZE $1"
        ],
        "description": "Z_SIZE"
    },
    "ANNOTATION": {
        "prefix": "ANNOTATION",
        "body": [
            "ANNOTATION $1"
        ],
        "description": "ANNOTATION"
    },
    "ANNOTATION_DIMENSION": {
        "prefix": "ANNOTATION_DIMENSION",
        "body": [
            "ANNOTATION_DIMENSION $1"
        ],
        "description": "ANNOTATION_DIMENSION"
    },
    "ANNOTATION_ELEMENT": {
        "prefix": "ANNOTATION_ELEMENT",
        "body": [
            "ANNOTATION_ELEMENT $1"
        ],
        "description": "ANNOTATION_ELEMENT"
    },
    "ANNOTATION_ELEMENT_REF_TYPE": {
        "prefix": "ANNOTATION_ELEMENT_REF_TYPE",
        "body": [
            "ANNOTATION_ELEMENT_REF_TYPE $1"
        ],
        "description": "ANNOTATION_ELEMENT_REF_TYPE"
    },
    "ANSI": {
        "prefix": "ANSI",
        "body": [
            "ANSI $1"
        ],
        "description": "ANSI"
    },
    "ARC": {
        "prefix": "ARC",
        "body": [
            "ARC $1"
        ],
        "description": "ARC"
    },
    "ARC_ANGLE": {
        "prefix": "ARC_ANGLE",
        "body": [
            "ARC_ANGLE $1"
        ],
        "description": "ARC_ANGLE"
    },
    "ARC_LENGTH": {
        "prefix": "ARC_LENGTH",
        "body": [
            "ARC_LENGTH $1"
        ],
        "description": "ARC_LENGTH"
    },
    "ARROW_HEAD": {
        "prefix": "ARROW_HEAD",
        "body": [
            "ARROW_HEAD $1"
        ],
        "description": "ARROW_HEAD"
    },
    "ASCENDING": {
        "prefix": "ASCENDING",
        "body": [
            "ASCENDING $1"
        ],
        "description": "ASCENDING"
    },
    "ASSEMBLY": {
        "prefix": "ASSEMBLY",
        "body": [
            "ASSEMBLY $1"
        ],
        "description": "ASSEMBLY"
    },
    "ASSEMBLY_LEVEL": {
        "prefix": "ASSEMBLY_LEVEL",
        "body": [
            "ASSEMBLY_LEVEL $1"
        ],
        "description": "ASSEMBLY_LEVEL"
    },
    "ATTACH_LEADER": {
        "prefix": "ATTACH_LEADER",
        "body": [
            "ATTACH_LEADER $1"
        ],
        "description": "ATTACH_LEADER"
    },
    "AUDIT_TRAIL": {
        "prefix": "AUDIT_TRAIL",
        "body": [
            "AUDIT_TRAIL $1"
        ],
        "description": "AUDIT_TRAIL"
    },
    "AXES": {
        "prefix": "AXES",
        "body": [
            "AXES $1"
        ],
        "description": "AXES"
    },
    "AXIS": {
        "prefix": "AXIS",
        "body": [
            "AXIS $1"
        ],
        "description": "AXIS"
    },
    "AXIS_FACE": {
        "prefix": "AXIS_FACE",
        "body": [
            "AXIS_FACE $1"
        ],
        "description": "AXIS_FACE"
    },
    "AXIS_POINT": {
        "prefix": "AXIS_POINT",
        "body": [
            "AXIS_POINT $1"
        ],
        "description": "AXIS_POINT"
    },
    "AXIS_TAGS": {
        "prefix": "AXIS_TAGS",
        "body": [
            "AXIS_TAGS $1"
        ],
        "description": "AXIS_TAGS"
    },
    "B_SPLINE": {
        "prefix": "B_SPLINE",
        "body": [
            "B_SPLINE $1"
        ],
        "description": "B_SPLINE"
    },
    "BACK": {
        "prefix": "BACK",
        "body": [
            "BACK $1"
        ],
        "description": "BACK"
    },
    "BALL": {
        "prefix": "BALL",
        "body": [
            "BALL $1"
        ],
        "description": "BALL"
    },
    "BEARING": {
        "prefix": "BEARING",
        "body": [
            "BEARING $1"
        ],
        "description": "BEARING"
    },
    "BMP": {
        "prefix": "BMP",
        "body": [
            "BMP $1"
        ],
        "description": "BMP"
    },
    "BOOL": {
        "prefix": "BOOL",
        "body": [
            "BOOL $1"
        ],
        "description": "BOOL"
    },
    "CATIA": {
        "prefix": "CATIA",
        "body": [
            "CATIA $1"
        ],
        "description": "CATIA"
    },
    "CENTERLINE": {
        "prefix": "CENTERLINE",
        "body": [
            "CENTERLINE $1"
        ],
        "description": "CENTERLINE"
    },
    "CLEARANCE": {
        "prefix": "CLEARANCE",
        "body": [
            "CLEARANCE $1"
        ],
        "description": "CLEARANCE"
    },
    "COARSE": {
        "prefix": "COARSE",
        "body": [
            "COARSE $1"
        ],
        "description": "COARSE"
    },
    "COLOR": {
        "prefix": "COLOR",
        "body": [
            "COLOR $1"
        ],
        "description": "COLOR"
    },
    "COLOR_PROPS": {
        "prefix": "COLOR_PROPS",
        "body": [
            "COLOR_PROPS $1"
        ],
        "description": "COLOR_PROPS"
    },
    "COMP_CURVE": {
        "prefix": "COMP_CURVE",
        "body": [
            "COMP_CURVE $1"
        ],
        "description": "COMP_CURVE"
    },
    "COMPONENT": {
        "prefix": "COMPONENT",
        "body": [
            "COMPONENT $1"
        ],
        "description": "COMPONENT"
    },
    "COMPONENT_MODEL_PARAM": {
        "prefix": "COMPONENT_MODEL_PARAM",
        "body": [
            "COMPONENT_MODEL_PARAM $1"
        ],
        "description": "COMPONENT_MODEL_PARAM"
    },
    "COMPONENT_PARAM": {
        "prefix": "COMPONENT_PARAM",
        "body": [
            "COMPONENT_PARAM $1"
        ],
        "description": "COMPONENT_PARAM"
    },
    "COMPOSITE_CURVE": {
        "prefix": "COMPOSITE_CURVE",
        "body": [
            "COMPOSITE_CURVE $1"
        ],
        "description": "COMPOSITE_CURVE"
    },
    "COMPOSITE_CURVE_PARAM": {
        "prefix": "COMPOSITE_CURVE_PARAM",
        "body": [
            "COMPOSITE_CURVE_PARAM $1"
        ],
        "description": "COMPOSITE_CURVE_PARAM"
    },
    "CONCAVE_EDGE": {
        "prefix": "CONCAVE_EDGE",
        "body": [
            "CONCAVE_EDGE $1"
        ],
        "description": "CONCAVE_EDGE"
    },
    "CONCAVE_SURFACE": {
        "prefix": "CONCAVE_SURFACE",
        "body": [
            "CONCAVE_SURFACE $1"
        ],
        "description": "CONCAVE_SURFACE"
    },
    "CONE": {
        "prefix": "CONE",
        "body": [
            "CONE $1"
        ],
        "description": "CONE"
    },
    "CONFIG_STATE": {
        "prefix": "CONFIG_STATE",
        "body": [
            "CONFIG_STATE $1"
        ],
        "description": "CONFIG_STATE"
    },
    "CONSTRAINT": {
        "prefix": "CONSTRAINT",
        "body": [
            "CONSTRAINT $1"
        ],
        "description": "CONSTRAINT"
    },
    "CONSTRAINT_SET": {
        "prefix": "CONSTRAINT_SET",
        "body": [
            "CONSTRAINT_SET $1"
        ],
        "description": "CONSTRAINT_SET"
    },
    "CONVEX_EDGE": {
        "prefix": "CONVEX_EDGE",
        "body": [
            "CONVEX_EDGE $1"
        ],
        "description": "CONVEX_EDGE"
    },
    "CONVEX_SURFACE": {
        "prefix": "CONVEX_SURFACE",
        "body": [
            "CONVEX_SURFACE $1"
        ],
        "description": "CONVEX_SURFACE"
    },
    "COONS": {
        "prefix": "COONS",
        "body": [
            "COONS $1"
        ],
        "description": "COONS"
    },
    "CROSS": {
        "prefix": "CROSS",
        "body": [
            "CROSS $1"
        ],
        "description": "CROSS"
    },
    "CSV": {
        "prefix": "CSV",
        "body": [
            "CSV $1"
        ],
        "description": "CSV"
    },
    "CSYS": {
        "prefix": "CSYS",
        "body": [
            "CSYS $1"
        ],
        "description": "CSYS"
    },
    "CSYS_AXIS": {
        "prefix": "CSYS_AXIS",
        "body": [
            "CSYS_AXIS $1"
        ],
        "description": "CSYS_AXIS"
    },
    "CSYS_AXIS_X": {
        "prefix": "CSYS_AXIS_X",
        "body": [
            "CSYS_AXIS_X $1"
        ],
        "description": "CSYS_AXIS_X"
    },
    "CSYS_AXIS_Y": {
        "prefix": "CSYS_AXIS_Y",
        "body": [
            "CSYS_AXIS_Y $1"
        ],
        "description": "CSYS_AXIS_Y"
    },
    "CSYS_AXIS_Z": {
        "prefix": "CSYS_AXIS_Z",
        "body": [
            "CSYS_AXIS_Z $1"
        ],
        "description": "CSYS_AXIS_Z"
    },
    "CSYS_TAGS": {
        "prefix": "CSYS_TAGS",
        "body": [
            "CSYS_TAGS $1"
        ],
        "description": "CSYS_TAGS"
    },
    "CURRENT_MDL_AVAILABLE": {
        "prefix": "CURRENT_MDL_AVAILABLE",
        "body": [
            "CURRENT_MDL_AVAILABLE $1"
        ],
        "description": "CURRENT_MDL_AVAILABLE"
    },
    "CURVE": {
        "prefix": "CURVE",
        "body": [
            "CURVE $1"
        ],
        "description": "CURVE"
    },
    "CURVE_END": {
        "prefix": "CURVE_END",
        "body": [
            "CURVE_END $1"
        ],
        "description": "CURVE_END"
    },
    "CURVE_PARAM": {
        "prefix": "CURVE_PARAM",
        "body": [
            "CURVE_PARAM $1"
        ],
        "description": "CURVE_PARAM"
    },
    "CURVE_START": {
        "prefix": "CURVE_START",
        "body": [
            "CURVE_START $1"
        ],
        "description": "CURVE_START"
    },
    "CYL": {
        "prefix": "CYL",
        "body": [
            "CYL $1"
        ],
        "description": "CYL"
    },
    "CYL_SPLINE": {
        "prefix": "CYL_SPLINE",
        "body": [
            "CYL_SPLINE $1"
        ],
        "description": "CYL_SPLINE"
    },
    "CYLINDER": {
        "prefix": "CYLINDER",
        "body": [
            "CYLINDER $1"
        ],
        "description": "CYLINDER"
    },
    "DATUM": {
        "prefix": "DATUM",
        "body": [
            "DATUM $1"
        ],
        "description": "DATUM"
    },
    "DATUM_TAG": {
        "prefix": "DATUM_TAG",
        "body": [
            "DATUM_TAG $1"
        ],
        "description": "DATUM_TAG"
    },
    "DECAL_TEXTURE": {
        "prefix": "DECAL_TEXTURE",
        "body": [
            "DECAL_TEXTURE $1"
        ],
        "description": "DECAL_TEXTURE"
    },
    "DEFAULT_ENVELOPE": {
        "prefix": "DEFAULT_ENVELOPE",
        "body": [
            "DEFAULT_ENVELOPE $1"
        ],
        "description": "DEFAULT_ENVELOPE"
    },
    "DESCENDING": {
        "prefix": "DESCENDING",
        "body": [
            "DESCENDING $1"
        ],
        "description": "DESCENDING"
    },
    "DIMENSION": {
        "prefix": "DIMENSION",
        "body": [
            "DIMENSION $1"
        ],
        "description": "DIMENSION"
    },
    "DOT": {
        "prefix": "DOT",
        "body": [
            "DOT $1"
        ],
        "description": "DOT"
    },
    "DOUBLE": {
        "prefix": "DOUBLE",
        "body": [
            "DOUBLE $1"
        ],
        "description": "DOUBLE"
    },
    "DOUBLE_ARROW": {
        "prefix": "DOUBLE_ARROW",
        "body": [
            "DOUBLE_ARROW $1"
        ],
        "description": "DOUBLE_ARROW"
    },
    "DOWNLEFT": {
        "prefix": "DOWNLEFT",
        "body": [
            "DOWNLEFT $1"
        ],
        "description": "DOWNLEFT"
    },
    "DOWNRIGHT": {
        "prefix": "DOWNRIGHT",
        "body": [
            "DOWNRIGHT $1"
        ],
        "description": "DOWNRIGHT"
    },
    "DPI": {
        "prefix": "DPI",
        "body": [
            "DPI $1"
        ],
        "description": "DPI"
    },
    "DRAWING": {
        "prefix": "DRAWING",
        "body": [
            "DRAWING $1"
        ],
        "description": "DRAWING"
    },
    "DRAWING_ENTITY": {
        "prefix": "DRAWING_ENTITY",
        "body": [
            "DRAWING_ENTITY $1"
        ],
        "description": "DRAWING_ENTITY"
    },
    "DRAWING_GTOL": {
        "prefix": "DRAWING_GTOL",
        "body": [
            "DRAWING_GTOL $1"
        ],
        "description": "DRAWING_GTOL"
    },
    "DRAWING_NOTE": {
        "prefix": "DRAWING_NOTE",
        "body": [
            "DRAWING_NOTE $1"
        ],
        "description": "DRAWING_NOTE"
    },
    "DRAWING_OPTIONS": {
        "prefix": "DRAWING_OPTIONS",
        "body": [
            "DRAWING_OPTIONS $1"
        ],
        "description": "DRAWING_OPTIONS"
    },
    "DRAWING_SYMBOL": {
        "prefix": "DRAWING_SYMBOL",
        "body": [
            "DRAWING_SYMBOL $1"
        ],
        "description": "DRAWING_SYMBOL"
    },
    "DRAWING_TABLE": {
        "prefix": "DRAWING_TABLE",
        "body": [
            "DRAWING_TABLE $1"
        ],
        "description": "DRAWING_TABLE"
    },
    "DRAWING_VIEW": {
        "prefix": "DRAWING_VIEW",
        "body": [
            "DRAWING_VIEW $1"
        ],
        "description": "DRAWING_VIEW"
    },
    "DRAWING_VIEW_AXIS": {
        "prefix": "DRAWING_VIEW_AXIS",
        "body": [
            "DRAWING_VIEW_AXIS $1"
        ],
        "description": "DRAWING_VIEW_AXIS"
    },
    "ECAD": {
        "prefix": "ECAD",
        "body": [
            "ECAD $1"
        ],
        "description": "ECAD"
    },
    "EDGE": {
        "prefix": "EDGE",
        "body": [
            "EDGE $1"
        ],
        "description": "EDGE"
    },
    "EDGE_END": {
        "prefix": "EDGE_END",
        "body": [
            "EDGE_END $1"
        ],
        "description": "EDGE_END"
    },
    "EDGE_ON_SRF": {
        "prefix": "EDGE_ON_SRF",
        "body": [
            "EDGE_ON_SRF $1"
        ],
        "description": "EDGE_ON_SRF"
    },
    "EDGE_PARAM": {
        "prefix": "EDGE_PARAM",
        "body": [
            "EDGE_PARAM $1"
        ],
        "description": "EDGE_PARAM"
    },
    "EDGE_START": {
        "prefix": "EDGE_START",
        "body": [
            "EDGE_START $1"
        ],
        "description": "EDGE_START"
    },
    "END": {
        "prefix": "END",
        "body": [
            "END $1"
        ],
        "description": "END"
    },
    "EXISTING_SNAP_LINES": {
        "prefix": "EXISTING_SNAP_LINES",
        "body": [
            "EXISTING_SNAP_LINES $1"
        ],
        "description": "EXISTING_SNAP_LINES"
    },
    "EXPLODE_STATE": {
        "prefix": "EXPLODE_STATE",
        "body": [
            "EXPLODE_STATE $1"
        ],
        "description": "EXPLODE_STATE"
    },
    "EXT_REF": {
        "prefix": "EXT_REF",
        "body": [
            "EXT_REF $1"
        ],
        "description": "EXT_REF"
    },
    "FACE": {
        "prefix": "FACE",
        "body": [
            "FACE $1"
        ],
        "description": "FACE"
    },
    "FACETED_SOLID": {
        "prefix": "FACETED_SOLID",
        "body": [
            "FACETED_SOLID $1"
        ],
        "description": "FACETED_SOLID"
    },
    "FEATURE": {
        "prefix": "FEATURE",
        "body": [
            "FEATURE $1"
        ],
        "description": "FEATURE"
    },
    "FEATURE_PARAM": {
        "prefix": "FEATURE_PARAM",
        "body": [
            "FEATURE_PARAM $1"
        ],
        "description": "FEATURE_PARAM"
    },
    "FEATURE_TYPE": {
        "prefix": "FEATURE_TYPE",
        "body": [
            "FEATURE_TYPE $1"
        ],
        "description": "FEATURE_TYPE"
    },
    "FEMMESH_OPTION": {
        "prefix": "FEMMESH_OPTION",
        "body": [
            "FEMMESH_OPTION $1"
        ],
        "description": "FEMMESH_OPTION"
    },
    "FILLED_BOX": {
        "prefix": "FILLED_BOX",
        "body": [
            "FILLED_BOX $1"
        ],
        "description": "FILLED_BOX"
    },
    "FILLED_DOT": {
        "prefix": "FILLED_DOT",
        "body": [
            "FILLED_DOT $1"
        ],
        "description": "FILLED_DOT"
    },
    "FILLET": {
        "prefix": "FILLET",
        "body": [
            "FILLET $1"
        ],
        "description": "FILLET"
    },
    "FINE": {
        "prefix": "FINE",
        "body": [
            "FINE $1"
        ],
        "description": "FINE"
    },
    "FOREIGN": {
        "prefix": "FOREIGN",
        "body": [
            "FOREIGN $1"
        ],
        "description": "FOREIGN"
    },
    "GENERAL": {
        "prefix": "GENERAL",
        "body": [
            "GENERAL $1"
        ],
        "description": "GENERAL"
    },
    "GENERAL_CSYS_DATA": {
        "prefix": "GENERAL_CSYS_DATA",
        "body": [
            "GENERAL_CSYS_DATA $1"
        ],
        "description": "GENERAL_CSYS_DATA"
    },
    "GENERAL_MERGE_OPTION": {
        "prefix": "GENERAL_MERGE_OPTION",
        "body": [
            "GENERAL_MERGE_OPTION $1"
        ],
        "description": "GENERAL_MERGE_OPTION"
    },
    "GEOMETRY": {
        "prefix": "GEOMETRY",
        "body": [
            "GEOMETRY $1"
        ],
        "description": "GEOMETRY"
    },
    "GRAPHICS": {
        "prefix": "GRAPHICS",
        "body": [
            "GRAPHICS $1"
        ],
        "description": "GRAPHICS"
    },
    "GTOL": {
        "prefix": "GTOL",
        "body": [
            "GTOL $1"
        ],
        "description": "GTOL"
    },
    "HOLE": {
        "prefix": "HOLE",
        "body": [
            "HOLE $1"
        ],
        "description": "HOLE"
    },
    "IDENTIFIER": {
        "prefix": "IDENTIFIER",
        "body": [
            "IDENTIFIER $1"
        ],
        "description": "IDENTIFIER"
    },
    "IDENTIFIER_COMPONENT": {
        "prefix": "IDENTIFIER_COMPONENT",
        "body": [
            "IDENTIFIER_COMPONENT $1"
        ],
        "description": "IDENTIFIER_COMPONENT"
    },
    "IDENTIFIER_FEATURE": {
        "prefix": "IDENTIFIER_FEATURE",
        "body": [
            "IDENTIFIER_FEATURE $1"
        ],
        "description": "IDENTIFIER_FEATURE"
    },
    "INPUT_PARAM": {
        "prefix": "INPUT_PARAM",
        "body": [
            "INPUT_PARAM $1"
        ],
        "description": "INPUT_PARAM"
    },
    "INPUT_REFERENCE": {
        "prefix": "INPUT_REFERENCE",
        "body": [
            "INPUT_REFERENCE $1"
        ],
        "description": "INPUT_REFERENCE"
    },
    "INTEGER": {
        "prefix": "INTEGER",
        "body": [
            "INTEGER $1"
        ],
        "description": "INTEGER"
    },
    "INTEGRAL": {
        "prefix": "INTEGRAL",
        "body": [
            "INTEGRAL $1"
        ],
        "description": "INTEGRAL"
    },
    "INTENT_EDGE": {
        "prefix": "INTENT_EDGE",
        "body": [
            "INTENT_EDGE $1"
        ],
        "description": "INTENT_EDGE"
    },
    "INTENT_SURFACE": {
        "prefix": "INTENT_SURFACE",
        "body": [
            "INTENT_SURFACE $1"
        ],
        "description": "INTENT_SURFACE"
    },
    "INVENTOR": {
        "prefix": "INVENTOR",
        "body": [
            "INVENTOR $1"
        ],
        "description": "INVENTOR"
    },
    "ISO": {
        "prefix": "ISO",
        "body": [
            "ISO $1"
        ],
        "description": "ISO"
    },
    "JPEG": {
        "prefix": "JPEG",
        "body": [
            "JPEG $1"
        ],
        "description": "JPEG"
    },
    "JT": {
        "prefix": "JT",
        "body": [
            "JT $1"
        ],
        "description": "JT"
    },
    "LAYER": {
        "prefix": "LAYER",
        "body": [
            "LAYER $1"
        ],
        "description": "LAYER"
    },
    "LAYOUT": {
        "prefix": "LAYOUT",
        "body": [
            "LAYOUT $1"
        ],
        "description": "LAYOUT"
    },
    "LEFT": {
        "prefix": "LEFT",
        "body": [
            "LEFT $1"
        ],
        "description": "LEFT"
    },
    "LEFT_HALF": {
        "prefix": "LEFT_HALF",
        "body": [
            "LEFT_HALF $1"
        ],
        "description": "LEFT_HALF"
    },
    "LIGHT_GRAPHICS": {
        "prefix": "LIGHT_GRAPHICS",
        "body": [
            "LIGHT_GRAPHICS $1"
        ],
        "description": "LIGHT_GRAPHICS"
    },
    "LIMITED": {
        "prefix": "LIMITED",
        "body": [
            "LIMITED $1"
        ],
        "description": "LIMITED"
    },
    "LIMITS": {
        "prefix": "LIMITS",
        "body": [
            "LIMITS $1"
        ],
        "description": "LIMITS"
    },
    "LINE": {
        "prefix": "LINE",
        "body": [
            "LINE $1"
        ],
        "description": "LINE"
    },
    "LOCKED": {
        "prefix": "LOCKED",
        "body": [
            "LOCKED $1"
        ],
        "description": "LOCKED"
    },
    "MAIL_ADDR": {
        "prefix": "MAIL_ADDR",
        "body": [
            "MAIL_ADDR $1"
        ],
        "description": "MAIL_ADDR"
    },
    "MAIL_OPTION": {
        "prefix": "MAIL_OPTION",
        "body": [
            "MAIL_OPTION $1"
        ],
        "description": "MAIL_OPTION"
    },
    "MAP": {
        "prefix": "MAP",
        "body": [
            "MAP $1"
        ],
        "description": "MAP"
    },
    "MASTER": {
        "prefix": "MASTER",
        "body": [
            "MASTER $1"
        ],
        "description": "MASTER"
    },
    "MATERIAL": {
        "prefix": "MATERIAL",
        "body": [
            "MATERIAL $1"
        ],
        "description": "MATERIAL"
    },
    "MATRIX": {
        "prefix": "MATRIX",
        "body": [
            "MATRIX $1"
        ],
        "description": "MATRIX"
    },
    "MAX_VALUE": {
        "prefix": "MAX_VALUE",
        "body": [
            "MAX_VALUE $1"
        ],
        "description": "MAX_VALUE"
    },
    "MDLCHECK_OPTION": {
        "prefix": "MDLCHECK_OPTION",
        "body": [
            "MDLCHECK_OPTION $1"
        ],
        "description": "MDLCHECK_OPTION"
    },
    "MDLCHECK_RESULT": {
        "prefix": "MDLCHECK_RESULT",
        "body": [
            "MDLCHECK_RESULT $1"
        ],
        "description": "MDLCHECK_RESULT"
    },
    "MEDIUM": {
        "prefix": "MEDIUM",
        "body": [
            "MEDIUM $1"
        ],
        "description": "MEDIUM"
    },
    "MIDPOINT": {
        "prefix": "MIDPOINT",
        "body": [
            "MIDPOINT $1"
        ],
        "description": "MIDPOINT"
    },
    "MIN_VALUE": {
        "prefix": "MIN_VALUE",
        "body": [
            "MIN_VALUE $1"
        ],
        "description": "MIN_VALUE"
    },
    "MODEL": {
        "prefix": "MODEL",
        "body": [
            "MODEL $1"
        ],
        "description": "MODEL"
    },
    "MODEL_COMPONENT_PARAM": {
        "prefix": "MODEL_COMPONENT_PARAM",
        "body": [
            "MODEL_COMPONENT_PARAM $1"
        ],
        "description": "MODEL_COMPONENT_PARAM"
    },
    "MODEL_PARAM": {
        "prefix": "MODEL_PARAM",
        "body": [
            "MODEL_PARAM $1"
        ],
        "description": "MODEL_PARAM"
    },
    "MULTIPLE_SELECT": {
        "prefix": "MULTIPLE_SELECT",
        "body": [
            "MULTIPLE_SELECT $1"
        ],
        "description": "MULTIPLE_SELECT"
    },
    "NO_ARROW": {
        "prefix": "NO_ARROW",
        "body": [
            "NO_ARROW $1"
        ],
        "description": "NO_ARROW"
    },
    "NOTE": {
        "prefix": "NOTE",
        "body": [
            "NOTE $1"
        ],
        "description": "NOTE"
    },
    "NULL": {
        "prefix": "NULL",
        "body": [
            "NULL $1"
        ],
        "description": "NULL"
    },
    "NX": {
        "prefix": "NX",
        "body": [
            "NX $1"
        ],
        "description": "NX"
    },
    "ORDINATE": {
        "prefix": "ORDINATE",
        "body": [
            "ORDINATE $1"
        ],
        "description": "ORDINATE"
    },
    "ORDINATE_REFERENCE": {
        "prefix": "ORDINATE_REFERENCE",
        "body": [
            "ORDINATE_REFERENCE $1"
        ],
        "description": "ORDINATE_REFERENCE"
    },
    "OUTPUT_PARAM": {
        "prefix": "OUTPUT_PARAM",
        "body": [
            "OUTPUT_PARAM $1"
        ],
        "description": "OUTPUT_PARAM"
    },
    "OUTPUT_REFERENCE": {
        "prefix": "OUTPUT_REFERENCE",
        "body": [
            "OUTPUT_REFERENCE $1"
        ],
        "description": "OUTPUT_REFERENCE"
    },
    "OVERRIDE": {
        "prefix": "OVERRIDE",
        "body": [
            "OVERRIDE $1"
        ],
        "description": "OVERRIDE"
    },
    "PART": {
        "prefix": "PART",
        "body": [
            "PART $1"
        ],
        "description": "PART"
    },
    "PERSISTENT": {
        "prefix": "PERSISTENT",
        "body": [
            "PERSISTENT $1"
        ],
        "description": "PERSISTENT"
    },
    "PHANTOM": {
        "prefix": "PHANTOM",
        "body": [
            "PHANTOM $1"
        ],
        "description": "PHANTOM"
    },
    "PHANTOMFONT": {
        "prefix": "PHANTOMFONT",
        "body": [
            "PHANTOMFONT $1"
        ],
        "description": "PHANTOMFONT"
    },
    "PHANTOMFONT_S_S": {
        "prefix": "PHANTOMFONT_S_S",
        "body": [
            "PHANTOMFONT_S_S $1"
        ],
        "description": "PHANTOMFONT_S_S"
    },
    "PIN": {
        "prefix": "PIN",
        "body": [
            "PIN $1"
        ],
        "description": "PIN"
    },
    "PIPELINE_MEMBER": {
        "prefix": "PIPELINE_MEMBER",
        "body": [
            "PIPELINE_MEMBER $1"
        ],
        "description": "PIPELINE_MEMBER"
    },
    "PLANAR": {
        "prefix": "PLANAR",
        "body": [
            "PLANAR $1"
        ],
        "description": "PLANAR"
    },
    "PLANE": {
        "prefix": "PLANE",
        "body": [
            "PLANE $1"
        ],
        "description": "PLANE"
    },
    "PLANE_TAGS": {
        "prefix": "PLANE_TAGS",
        "body": [
            "PLANE_TAGS $1"
        ],
        "description": "PLANE_TAGS"
    },
    "PLANES": {
        "prefix": "PLANES",
        "body": [
            "PLANES $1"
        ],
        "description": "PLANES"
    },
    "POINT": {
        "prefix": "POINT",
        "body": [
            "POINT $1"
        ],
        "description": "POINT"
    },
    "POINT_TAGS": {
        "prefix": "POINT_TAGS",
        "body": [
            "POINT_TAGS $1"
        ],
        "description": "POINT_TAGS"
    },
    "POINTS": {
        "prefix": "POINTS",
        "body": [
            "POINTS $1"
        ],
        "description": "POINTS"
    },
    "QUILT": {
        "prefix": "QUILT",
        "body": [
            "QUILT $1"
        ],
        "description": "QUILT"
    },
    "QUILT_PARAM": {
        "prefix": "QUILT_PARAM",
        "body": [
            "QUILT_PARAM $1"
        ],
        "description": "QUILT_PARAM"
    },
    "QUILT_SURFACE": {
        "prefix": "QUILT_SURFACE",
        "body": [
            "QUILT_SURFACE $1"
        ],
        "description": "QUILT_SURFACE"
    },
    "REFERENCE": {
        "prefix": "REFERENCE",
        "body": [
            "REFERENCE $1"
        ],
        "description": "REFERENCE"
    },
    "REV_SRV": {
        "prefix": "REV_SRV",
        "body": [
            "REV_SRV $1"
        ],
        "description": "REV_SRV"
    },
    "RULED_SRF": {
        "prefix": "RULED_SRF",
        "body": [
            "RULED_SRF $1"
        ],
        "description": "RULED_SRF"
    },
    "SHAFT": {
        "prefix": "SHAFT",
        "body": [
            "SHAFT $1"
        ],
        "description": "SHAFT"
    },
    "SLANT": {
        "prefix": "SLANT",
        "body": [
            "SLANT $1"
        ],
        "description": "SLANT"
    },
    "SLANTED": {
        "prefix": "SLANTED",
        "body": [
            "SLANTED $1"
        ],
        "description": "SLANTED"
    },
    "SLASH": {
        "prefix": "SLASH",
        "body": [
            "SLASH $1"
        ],
        "description": "SLASH"
    },
    "SLIDER": {
        "prefix": "SLIDER",
        "body": [
            "SLIDER $1"
        ],
        "description": "SLIDER"
    },
    "SLOT": {
        "prefix": "SLOT",
        "body": [
            "SLOT $1"
        ],
        "description": "SLOT"
    },
    "SOLID": {
        "prefix": "SOLID",
        "body": [
            "SOLID $1"
        ],
        "description": "SOLID"
    },
    "SOLID_DIMENSION": {
        "prefix": "SOLID_DIMENSION",
        "body": [
            "SOLID_DIMENSION $1"
        ],
        "description": "SOLID_DIMENSION"
    },
    "SOLID_EDGE": {
        "prefix": "SOLID_EDGE",
        "body": [
            "SOLID_EDGE $1"
        ],
        "description": "SOLID_EDGE"
    },
    "SOLID_SURFACE": {
        "prefix": "SOLID_SURFACE",
        "body": [
            "SOLID_SURFACE $1"
        ],
        "description": "SOLID_SURFACE"
    },
    "SOLIDEDGE": {
        "prefix": "SOLIDEDGE",
        "body": [
            "SOLIDEDGE $1"
        ],
        "description": "SOLIDEDGE"
    },
    "SOLIDWORKS": {
        "prefix": "SOLIDWORKS",
        "body": [
            "SOLIDWORKS $1"
        ],
        "description": "SOLIDWORKS"
    },
    "SPIN_CENTER": {
        "prefix": "SPIN_CENTER",
        "body": [
            "SPIN_CENTER $1"
        ],
        "description": "SPIN_CENTER"
    },
    "SPLINE": {
        "prefix": "SPLINE",
        "body": [
            "SPLINE $1"
        ],
        "description": "SPLINE"
    },
    "STRING": {
        "prefix": "STRING",
        "body": [
            "STRING $1"
        ],
        "description": "STRING"
    },
    "SUBCOMP": {
        "prefix": "SUBCOMP",
        "body": [
            "SUBCOMP $1"
        ],
        "description": "SUBCOMP"
    },
    "SUBTABLE": {
        "prefix": "SUBTABLE",
        "body": [
            "SUBTABLE $1"
        ],
        "description": "SUBTABLE"
    },
    "SURFACE": {
        "prefix": "SURFACE",
        "body": [
            "SURFACE $1"
        ],
        "description": "SURFACE"
    },
    "SURFFINISH": {
        "prefix": "SURFFINISH",
        "body": [
            "SURFFINISH $1"
        ],
        "description": "SURFFINISH"
    },
    "SYMBOL": {
        "prefix": "SYMBOL",
        "body": [
            "SYMBOL $1"
        ],
        "description": "SYMBOL"
    },
    "TABCYL": {
        "prefix": "TABCYL",
        "body": [
            "TABCYL $1"
        ],
        "description": "TABCYL"
    },
    "TARGET": {
        "prefix": "TARGET",
        "body": [
            "TARGET $1"
        ],
        "description": "TARGET"
    },
    "TBL": {
        "prefix": "TBL",
        "body": [
            "TBL $1"
        ],
        "description": "TBL"
    },
    "TEXT": {
        "prefix": "TEXT",
        "body": [
            "TEXT $1"
        ],
        "description": "TEXT"
    },
    "TORUS": {
        "prefix": "TORUS",
        "body": [
            "TORUS $1"
        ],
        "description": "TORUS"
    },
    "TRANSFORMATION": {
        "prefix": "TRANSFORMATION",
        "body": [
            "TRANSFORMATION $1"
        ],
        "description": "TRANSFORMATION"
    },
    "TRIANGLE": {
        "prefix": "TRIANGLE",
        "body": [
            "TRIANGLE $1"
        ],
        "description": "TRIANGLE"
    },
    "TXT": {
        "prefix": "TXT",
        "body": [
            "TXT $1"
        ],
        "description": "TXT"
    },
    "UNICODE": {
        "prefix": "UNICODE",
        "body": [
            "UNICODE $1"
        ],
        "description": "UNICODE"
    },
    "UPLEFT": {
        "prefix": "UPLEFT",
        "body": [
            "UPLEFT $1"
        ],
        "description": "UPLEFT"
    },
    "UPRIGHT": {
        "prefix": "UPRIGHT",
        "body": [
            "UPRIGHT $1"
        ],
        "description": "UPRIGHT"
    },
    "VECTOR": {
        "prefix": "VECTOR",
        "body": [
            "VECTOR $1"
        ],
        "description": "VECTOR"
    },
    "VERY_COARSE": {
        "prefix": "VERY_COARSE",
        "body": [
            "VERY_COARSE $1"
        ],
        "description": "VERY_COARSE"
    },
    "VIEW_OUTLINE": {
        "prefix": "VIEW_OUTLINE",
        "body": [
            "VIEW_OUTLINE $1"
        ],
        "description": "VIEW_OUTLINE"
    },
    "WELD": {
        "prefix": "WELD",
        "body": [
            "WELD $1"
        ],
        "description": "WELD"
    },
    "VRML": {
        "prefix": "VRML",
        "body": [
            "VRML $1"
        ],
        "description": "VRML"
    },
    "ERASE_FAMINSTANCE": {
        "prefix": "ERASE_FAMINSTANCE",
        "body": [
            "ERASE_FAMINSTANCE $1"
        ],
        "description": "ERASE_FAMINSTANCE"
    },
    "KEEP_BODIES": {
        "prefix": "KEEP_BODIES",
        "body": [
            "KEEP_BODIES $1"
        ],
        "description": "KEEP_BODIES"
    },
    "OPTIMIZE_NETWORK_TRAFFIC": {
        "prefix": "OPTIMIZE_NETWORK_TRAFFIC",
        "body": [
            "OPTIMIZE_NETWORK_TRAFFIC $1"
        ],
        "description": "OPTIMIZE_NETWORK_TRAFFIC"
    },
    "SEARCH_DIRECTION": {
        "prefix": "SEARCH_DIRECTION",
        "body": [
            "SEARCH_DIRECTION $1"
        ],
        "description": "SEARCH_DIRECTION"
    },
    "SELECTED": {
        "prefix": "SELECTED",
        "body": [
            "SELECTED $1"
        ],
        "description": "SELECTED"
    },
    "UV_PARAM": {
        "prefix": "UV_PARAM",
        "body": [
            "UV_PARAM $1"
        ],
        "description": "UV_PARAM"
    },
    "WAVEFRONT": {
        "prefix": "WAVEFRONT",
        "body": [
            "WAVEFRONT $1"
        ],
        "description": "WAVEFRONT"
    },
    "SUBTRACT": {
        "prefix": "SUBTRACT",
        "body": [
            "SUBTRACT $1"
        ],
        "description": "SUBTRACT"
    },
    "MODEL_DEPENDENCIES": {
        "prefix": "MODEL_DEPENDENCIES",
        "body": [
            "MODEL_DEPENDENCIES $1"
        ],
        "description": "MODEL_DEPENDENCIES"
    },
    "MESSAGE_SYMBOL": {
        "prefix": "MESSAGE_SYMBOL",
        "body": [
            "MESSAGE_SYMBOL $1"
        ],
        "description": "MESSAGE_SYMBOL"
    },
    "USE_VALUE": {
        "prefix": "USE_VALUE",
        "body": [
            "USE_VALUE $1"
        ],
        "description": "USE_VALUE"
    },
    "USE_VALUES": {
        "prefix": "USE_VALUES",
        "body": [
            "USE_VALUES $1"
        ],
        "description": "USE_VALUES"
    },
    "ANNOTATION_ELEMENT_REF_OPTION": {
        "prefix": "ANNOTATION_ELEMENT_REF_OPTION",
        "body": [
            "ANNOTATION_ELEMENT_REF_OPTION $1"
        ],
        "description": "ANNOTATION_ELEMENT_REF_OPTION"
    },
    "ANNOTATION_REF_TYPE": {
        "prefix": "ANNOTATION_REF_TYPE",
        "body": [
            "ANNOTATION_REF_TYPE $1"
        ],
        "description": "ANNOTATION_REF_TYPE"
    },
    "UPPER": {
        "prefix": "UPPER",
        "body": [
            "UPPER $1"
        ],
        "description": "UPPER"
    },
    "LOWER": {
        "prefix": "LOWER",
        "body": [
            "LOWER $1"
        ],
        "description": "LOWER"
    },
    "GENERAL_CSYS_OFFSET_REFERENCE": {
        "prefix": "GENERAL_CSYS_OFFSET_REFERENCE",
        "body": [
            "GENERAL_CSYS_OFFSET_REFERENCE $1"
        ],
        "description": "GENERAL_CSYS_OFFSET_REFERENCE"
    },
    "asm": {
        "prefix": "asm",
        "body": [
            "asm $1"
        ],
        "description": "asm"
    },
    "asm_copy": {
        "prefix": "asm_copy",
        "body": [
            "asm_copy $1"
        ],
        "description": "asm_copy"
    },
    "mfg": {
        "prefix": "mfg",
        "body": [
            "mfg $1"
        ],
        "description": "mfg"
    },
    "mfg_copy": {
        "prefix": "mfg_copy",
        "body": [
            "mfg_copy $1"
        ],
        "description": "mfg_copy"
    },
    "mfg_asm": {
        "prefix": "mfg_asm",
        "body": [
            "mfg_asm $1"
        ],
        "description": "mfg_asm"
    },
    "mfg_asm_copy": {
        "prefix": "mfg_asm_copy",
        "body": [
            "mfg_asm_copy $1"
        ],
        "description": "mfg_asm_copy"
    },
    "part_copy": {
        "prefix": "part_copy",
        "body": [
            "part_copy $1"
        ],
        "description": "part_copy"
    },
    "PRT": {
        "prefix": "PRT",
        "body": [
            "PRT $1"
        ],
        "description": "PRT"
    },
    "24BIT": {
        "prefix": "24BIT",
        "body": [
            "24BIT $1"
        ],
        "description": "24BIT"
    },
    "6DOF": {
        "prefix": "6DOF",
        "body": [
            "6DOF $1"
        ],
        "description": "6DOF"
    },
    "8BIT": {
        "prefix": "8BIT",
        "body": [
            "8BIT $1"
        ],
        "description": "8BIT"
    },
    "CATIA_V5": {
        "prefix": "CATIA_V5",
        "body": [
            "CATIA_V5 $1"
        ],
        "description": "CATIA_V5"
    },
    "CATIA_V5_ASSEMBLY": {
        "prefix": "CATIA_V5_ASSEMBLY",
        "body": [
            "CATIA_V5_ASSEMBLY $1"
        ],
        "description": "CATIA_V5_ASSEMBLY"
    },
    "CATIA_V5_PART": {
        "prefix": "CATIA_V5_PART",
        "body": [
            "CATIA_V5_PART $1"
        ],
        "description": "CATIA_V5_PART"
    },
    "END1": {
        "prefix": "END1",
        "body": [
            "END1 $1"
        ],
        "description": "END1"
    },
    "END2": {
        "prefix": "END2",
        "body": [
            "END2 $1"
        ],
        "description": "END2"
    },
    "SPL2DER": {
        "prefix": "SPL2DER",
        "body": [
            "SPL2DER $1"
        ],
        "description": "SPL2DER"
    },
    "UTF16": {
        "prefix": "UTF16",
        "body": [
            "UTF16 $1"
        ],
        "description": "UTF16"
    },
    "UTF8": {
        "prefix": "UTF8",
        "body": [
            "UTF8 $1"
        ],
        "description": "UTF8"
    },
    "EXIT": {
        "prefix": "EXIT",
        "body": [
            "EXIT$1"
        ],
        "description": "Exist stops the execution of the current script file without causing an error. This option could be used for debugging techniques."
    },
    "STOP": {
        "prefix": "STOP",
        "body": [
            "STOP$1"
        ],
        "description": "Shows a string menu in Creo Elements/Pro. Creo Elements/Pro becomes active until is pressed in the string menu."
    },
    "STOP_EX": {
        "prefix": "STOP_EX",
        "body": [
            "STOP_EX$1"
        ],
        "description": "Shows a STOP dialog. Creo becomes active until pressed."
    },
    "WAIT": {
        "prefix": "WAIT",
        "body": [
            "WAIT$1"
        ],
        "description": "Shows a window with a button and waits until the user has clicked on it."
    },
    "BREAK": {
        "prefix": "BREAK",
        "body": [
            "BREAK$1"
        ],
        "description": "BREAK"
    },
    "CONTINUE": {
        "prefix": "CONTINUE",
        "body": [
            "CONTINUE$1"
        ],
        "description": "CONTINUE"
    },
    "TRUE": {
        "prefix": "TRUE",
        "body": [
            "TRUE$1"
        ],
        "description": "TRUE"
    },
    "FALSE": {
        "prefix": "FALSE",
        "body": [
            "FALSE$1"
        ],
        "description": "FALSE"
    },
    "NOT": {
        "prefix": "NOT ",
        "body": [
            "NOT $1"
        ],
        "description": "NOT "
    },
    "OR": {
        "prefix": "OR ",
        "body": [
            "OR $1"
        ],
        "description": "OR "
    },
    "SEL_STRING": {
        "prefix": "SEL_STRING",
        "body": [
            "SEL_STRING$1"
        ],
        "description": "SEL_STRING"
    },
    "ilcs:": {
        "prefix": "ilcs:",
        "body": [
            "ilcs:$1"
        ],
        "description": "ilcs:"
    },
    "ilws:": {
        "prefix": "ilws:",
        "body": [
            "ilws:$1"
        ],
        "description": "ilws:"
    },
    "lib:": {
        "prefix": "lib:",
        "body": [
            "lib:$1"
        ],
        "description": "lib:"
    },
    "working_dir:": {
        "prefix": "working_dir:",
        "body": [
            "working_dir:$1"
        ],
        "description": "working_dir:"
    },
    "wtpub:": {
        "prefix": "wtpub:",
        "body": [
            "wtpub:$1"
        ],
        "description": "wtpub:"
    },
    "wtws:": {
        "prefix": "wtws:",
        "body": [
            "wtws:$1"
        ],
        "description": "wtws:"
    },
    "abs": {
        "prefix": "abs",
        "body": [
            "abs($1)"
        ],
        "description": "abs"
    },
    "acos": {
        "prefix": "acos",
        "body": [
            "acos($1)"
        ],
        "description": "acos"
    },
    "asc": {
        "prefix": "asc",
        "body": [
            "asc($1)"
        ],
        "description": "asc"
    },
    "asin": {
        "prefix": "asin",
        "body": [
            "asin($1)"
        ],
        "description": "asin"
    },
    "atan": {
        "prefix": "atan",
        "body": [
            "atan($1)"
        ],
        "description": "atan"
    },
    "btos": {
        "prefix": "btos",
        "body": [
            "btos($1)"
        ],
        "description": "btos"
    },
    "ceil": {
        "prefix": "ceil",
        "body": [
            "ceil($1)"
        ],
        "description": "ceil"
    },
    "cos": {
        "prefix": "cos",
        "body": [
            "cos($1)"
        ],
        "description": "cos"
    },
    "cosh": {
        "prefix": "cosh",
        "body": [
            "cosh($1)"
        ],
        "description": "cosh"
    },
    "exp": {
        "prefix": "exp",
        "body": [
            "exp($1)"
        ],
        "description": "exp"
    },
    "floor": {
        "prefix": "floor",
        "body": [
            "floor($1)"
        ],
        "description": "floor"
    },
    "ftos": {
        "prefix": "ftos",
        "body": [
            "ftos($1)"
        ],
        "description": "ftos"
    },
    "isdouble": {
        "prefix": "isdouble",
        "body": [
            "isdouble($1)"
        ],
        "description": "isdouble"
    },
    "isinteger": {
        "prefix": "isinteger",
        "body": [
            "isinteger($1)"
        ],
        "description": "isinteger"
    },
    "isnumber": {
        "prefix": "isnumber",
        "body": [
            "isnumber($1)"
        ],
        "description": "isnumber"
    },
    "itos": {
        "prefix": "itos",
        "body": [
            "itos($1)"
        ],
        "description": "itos"
    },
    "ln": {
        "prefix": "ln",
        "body": [
            "ln($1)"
        ],
        "description": "ln"
    },
    "log": {
        "prefix": "log",
        "body": [
            "log($1)"
        ],
        "description": "log"
    },
    "mklower": {
        "prefix": "mklower",
        "body": [
            "mklower($1)"
        ],
        "description": "mklower"
    },
    "mkupper": {
        "prefix": "mkupper",
        "body": [
            "mkupper($1)"
        ],
        "description": "mkupper"
    },
    "mod": {
        "prefix": "mod",
        "body": [
            "mod($1)"
        ],
        "description": "mod"
    },
    "pow": {
        "prefix": "pow",
        "body": [
            "pow($1)"
        ],
        "description": "pow"
    },
    "round": {
        "prefix": "round",
        "body": [
            "round($1)"
        ],
        "description": "round"
    },
    "sin": {
        "prefix": "sin",
        "body": [
            "sin($1)"
        ],
        "description": "sin"
    },
    "sinh": {
        "prefix": "sinh",
        "body": [
            "sinh($1)"
        ],
        "description": "sinh"
    },
    "sqr": {
        "prefix": "sqr",
        "body": [
            "sqr($1)"
        ],
        "description": "sqr"
    },
    "sqrt": {
        "prefix": "sqrt",
        "body": [
            "sqrt($1)"
        ],
        "description": "sqrt"
    },
    "stob": {
        "prefix": "stob",
        "body": [
            "stob($1)"
        ],
        "description": "stob"
    },
    "stof": {
        "prefix": "stof",
        "body": [
            "stof($1)"
        ],
        "description": "stof"
    },
    "stoi": {
        "prefix": "stoi",
        "body": [
            "stoi($1)"
        ],
        "description": "stoi"
    },
    "strchr": {
        "prefix": "strchr",
        "body": [
            "strchr($1)"
        ],
        "description": "strchr"
    },
    "strcmp": {
        "prefix": "strcmp",
        "body": [
            "strcmp($1)"
        ],
        "description": "strcmp"
    },
    "strcmpcs": {
        "prefix": "strcmpcs",
        "body": [
            "strcmpcs($1)"
        ],
        "description": "strcmpcs"
    },
    "strfind": {
        "prefix": "strfind",
        "body": [
            "strfind($1)"
        ],
        "description": "strfind"
    },
    "strfindcs": {
        "prefix": "strfindcs",
        "body": [
            "strfindcs($1)"
        ],
        "description": "strfindcs"
    },
    "strleft": {
        "prefix": "strleft",
        "body": [
            "strleft($1)"
        ],
        "description": "strleft"
    },
    "strlen": {
        "prefix": "strlen",
        "body": [
            "strlen($1)"
        ],
        "description": "strlen"
    },
    "strmid": {
        "prefix": "strmid",
        "body": [
            "strmid($1)"
        ],
        "description": "strmid"
    },
    "strreplace": {
        "prefix": "strreplace",
        "body": [
            "strreplace($1)"
        ],
        "description": "strreplace"
    },
    "strreplacecs": {
        "prefix": "strreplacecs",
        "body": [
            "strreplacecs($1)"
        ],
        "description": "strreplacecs"
    },
    "strright": {
        "prefix": "strright",
        "body": [
            "strright($1)"
        ],
        "description": "strright"
    },
    "strtrunc": {
        "prefix": "strtrunc",
        "body": [
            "strtrunc($1)"
        ],
        "description": "strtrunc"
    },
    "tan": {
        "prefix": "tan",
        "body": [
            "tan($1)"
        ],
        "description": "tan"
    },
    "tanh": {
        "prefix": "tanh",
        "body": [
            "tanh($1)"
        ],
        "description": "tanh"
    },
    "BACKUP2F": {
        "prefix": "BACKUP2F ",
        "body": [
            "! -----------------------------------------------------------------",
            "! BACKUP A FOLDER ",
            "RESOLVE_PATH lib:work_dir backup_path",
            "PRINT \"%\" backup_path",
            "RESOLVE_PATH lib:models the_models_path",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+backup_path+\"\\\"\"+\" & del * /Q\"",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c xcopy /Y \\\"\"+the_models_path+\"\\\" \"+\"\\\"\"+backup_path+\"\\\"\" "
        ],
        "description": "BACKUP2F "
    },
    "BOMF": {
        "prefix": "BOMF ",
        "body": [
            "! Build a BOM ",
            "SEARCH_MDL_REFS current_mdl MODEL * all_models",
            "",
            "FOR a_model REF ARRAY all_models",
            "\tCLEAR_ARRAY tmp_array",
            "\t! Model Name",
            "\tGET_MDL_NAME a_model a_model_name",
            "\t! Qty",
            "\tSEARCH_MDL_REFS current_mdl COMPONENT a_model_name lst_comps",
            "\tGET_ARRAY_SIZE lst_comps nb_comps",
            "\tGET_ARRAY_ELEM lst_comps 0 first_comp",
            "\tCLEAR_ARRAY lst_comps ",
            "\t! Description",
            "\tCLEAR_CATCH_ERROR",
            "\tBEGIN_CATCH_ERROR",
            "\t\tSEARCH_MDL_PARAM a_model \"DESCRIPTION\" description",
            "\tEND_CATCH_ERROR",
            "\tIF ERROR",
            "\t\tdescription = \"-\"",
            "\tEND_IF",
            "\t",
            "\t! Storing results",
            "\tADD_ARRAY_ELEM tmp_array ftos(nb_comps)",
            "\tADD_ARRAY_ELEM tmp_array a_model_name",
            "\tADD_ARRAY_ELEM tmp_array description",
            "\tADD_ARRAY_ELEM tmp_array first_comp",
            "\t",
            "\tADD_ARRAY_ELEM rows_array tmp_array",
            "\t",
            "END_FOR "
        ],
        "description": "BOMF "
    },
    "COMMWF": {
        "prefix": "COMMWF ",
        "body": [
            "! ##################################################",
            "! ",
            "!    - CSTJOHN - $CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR",
            "! ################################################## "
        ],
        "description": "COMMWF "
    },
    "CONVERTTOFEATF": {
        "prefix": "CONVERTTOFEATF ",
        "body": [
            "! CONVERTING INTENT SURFS / LOG SURFS TO FEATURES",
            "IF strfind(ref_string,\"#625#\") > -1",
            "\t!FINDING A SIMPLE TOLERANCE MIXED WITH MODIFIERS",
            "\tDECLARE_VARIABLE STRING pattern",
            "\tpattern = @\"(.*?)_*(\\d+)(#625#)(.*)\"",
            "\tREG_EXP_MATCH ref_string pattern matches_bool arraySubMatches",
            "\tGET_ARRAY_SIZE arraySubMatches array_size",
            "\tGET_ARRAY_ELEM arraysubmatches array_size-1 the_id",
            "\tREG_EXP_REPLACE ref_string pattern \"$1#3#\"+itos(stoi(the_id)-1) ref_string",
            "END_IF  "
        ],
        "description": "CONVERTTOFEATF "
    },
    "CREATEDBf": {
        "prefix": "CREATEDBf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATING A NEW SQLITE DATABASE AND FOLDER STRUCTURE ",
            "! -----------------------------------------------------------------",
            "\t! -----------------------------------------------------------------",
            "\t! ESTABLISHING LOCAL DATABASE - SQLITE",
            "\t",
            "\t! DECLARATIONS",
            "\tDECLARE_VARIABLE STRING DB_FOLDER \"TEMP_DATABASES\"",
            "\tDECLARE_VARIABLE STRING database_file \"mbd_checker_rules.db\"",
            "\t",
            "\tGET_WORKING_DIRECTORY working_dir",
            "\tDECLARE_VARIABLE STRING db_path_and_name",
            "\tGET_ENVIRONMENT_VARIABLE \"ComSpec\" ComSpec",
            "\tRESOLVE_PATH lib:\\sigma_commands\\software sqlite_path",
            "\tDECLARE_VARIABLE STRING cmd_arg \"\"",
            "\t",
            "\t! -----------------------------------------------------------------",
            "\t! DB_FOLDER STRUCTURE FOR THE DB - make a temp_databases folder if not existing",
            "\tREAD_SUBDIRECTORIES working_dir sub_directories",
            "\tFIND_ARRAY_ELEM sub_directories DB_FOLDER index ",
            "\tIF index == -1 ",
            "\t\tPLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+working_dir+\"\\\"\"+\" & mkdir \"+DB_FOLDER",
            "\tEND_IF",
            "",
            "\t! process spaces and make it uri /unc style",
            "\tdb_path_and_name = \"file:///\" + strreplace(working_dir +db_folder+\\+database_file,\" \",\"%20\",TRUE)",
            "\tdb_path_and_name = strreplace(db_path_and_name,\\,/,TRUE)",
            "\t",
            "\t! -----------------------------------------------------------------",
            "\t! DELETE ANY DB CONTENTS ",
            "\t! PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+working_dir+\"\\\"\"+\" & del *.db /Q\"   !clear all db",
            "\tPLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+working_dir+DB_FOLDER+\"\\\"\"+\" & del \"+database_file+\" /Q\"   !clear just this specific one ",
            "\t",
            "\t! -----------------------------------------------------------------",
            "\t! CREATE THE DESIRED DB ",
            "\tcmd_arg  = \"/c cd \"+\"\\\"\"+sqlite_path+\"\\\"\"",
            "\tcmd_arg += \" & sqlite3 \"+db_path_and_name +\" \"",
            "\tcmd_arg += \"\\\"\"+\".save \"+db_path_and_name+\"\\\"\"",
            "\tPLUGIN SHOW SYNC ComSpec cmd_arg "
        ],
        "description": "CREATEDBf "
    },
    "CT": {
        "prefix": "CT ",
        "body": [
            "!COLE - TEST "
        ],
        "description": "CT "
    },
    "CVAPPSTATEF": {
        "prefix": "CVAPPSTATEF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CHANGE THE APPEARANCE STATE OF A COMB VIEW ",
            "DECLARE_VARIABLE STRING mapkey_string_variable ",
            "mapkey_string_variable  = @\"mapkey sdfdfdff ~ Command `ProCmdViewVisTool` ;\"",
            "mapkey_string_variable += @\"~ Select `visual_dlg0` `RadioSelApplMgr` 1 `combined`;\"",
            "mapkey_string_variable += @\"~ Arm `visual_dlg0` `Table` 2 `mbd_b` `name_column`;\"",
            "mapkey_string_variable += @\"~ Select `visual_dlg0` `Table` 2 `mbd_b` `name_column`;\"",
            "mapkey_string_variable += @\"~ Select `visual_dlg0` `EditCascBtn`;\"",
            "mapkey_string_variable += @\"~ Close `visual_dlg0` `EditCascBtn`;\"",
            "mapkey_string_variable += @\"~ Activate `visual_dlg0` `RedefineBtn`;\"",
            "mapkey_string_variable += @\"~ Open `presentation_dlg` `OptionMenuAppearance`;\"",
            "mapkey_string_variable += @\"~ Close `presentation_dlg` `OptionMenuAppearance`;\"",
            "mapkey_string_variable += @\"~ Select `presentation_dlg` `OptionMenuAppearance` 1 `C`;\"",
            "mapkey_string_variable += @\"~ Activate `presentation_dlg` `DoneBtn`;\"",
            "mapkey_string_variable += @\"~ Activate `visual_dlg0` `CloseBtn`;\"",
            "MAPKEY mapkey_string_variable "
        ],
        "description": "CVAPPSTATEF "
    },
    "DBVIEWF": {
        "prefix": "DBVIEWF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! OPENING DB VIEWER - REPLACE CONTENTS WITH PASSING ",
            "DECLARE_VARIABLE STRING db_name \"MDL_DASHBOARD.db\"",
            "GET_WORKING_DIRECTORY work_dir ",
            "BUILD_FILE_NAME work_dir+\"temp_databases\" db_name \"\" db_path",
            "DECLARE_VARIABLE STRING cmd_arg \"\"",
            "RESOLVE_PATH \"lib:\\GENERAL_TOOLS\\SQLITE\\SOFTWARE\\SQLiteDatabaseBrowserPortable\\SQLiteDatabaseBrowserPortable.exe\" software_path",
            "GET_ENVIRONMENT_VARIABLE \"ComSpec\" ComSpec",
            "software_path = strreplace(software_path,\" \",\"%20\",TRUE)",
            "software_path = \"file:\\\\\\\\\\\\\\\\\\\\\\\\\"+software_path",
            "cmd_arg = \"/c start \\\"\\\" \\\"\"+software_path+\"\\\" \\\"\"+db_path+\"\\\" \"",
            "PLUGIN SHOW SYNC ComSpec cmd_arg\t "
        ],
        "description": "DBVIEWF "
    },
    "DEFCSYSF": {
        "prefix": "DEFCSYSF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATE A DEFAULT CSYS REF AND FEAT ",
            "",
            "",
            "DISPLAY_DATUM CSYS TRUE",
            "",
            "! -----------------------------------------------------------------",
            "! Getting first CSYS",
            "SEARCH_MDL_REF THIS CSYS \"*\" first_csys",
            "",
            "! -----------------------------------------------------------------",
            "! CALC TRANSFORM FROM DEFAULT OR NULL TO THIS FIRST CSYS",
            "CALC_TRANSFORMATION THIS first_csys transform",
            "PRINT \"%\" transform ",
            "",
            "",
            "! -----------------------------------------------------------------",
            "! ADD SOME LOGIC TO CHECK THIS PROGRAMMATICALLY AND ASSIGN A BOOL",
            "IF transform.trans_x <> 0 OR transform.trans_y <> 0 OR transform.trans_z <> 0 OR transform.rot_x <> 0 OR transform.rot_y <> 0 OR transform.rot_z <> 0",
            "\tPRINT \"NON DEFAULT FIRST CSYS\"",
            "\t",
            "\t! Select the starting csys. Oriented csys will create oriented bounding box",
            "\t! Generate struct to generate csys",
            "\tDECLARE_STRUCT GENERAL_CSYS_DATA  a_csys_option",
            "\t",
            "\t! Generate starting point for csys",
            "\tADD_ARRAY_ELEM a_csys_option.array_origin_references first_csys",
            "\ta_csys_option.offset_type =  \"CARTESIAN\"",
            "\ta_csys_option.offset.x = transform.trans_x",
            "\ta_csys_option.offset.y = transform.trans_y",
            "\ta_csys_option.offset.z = transform.trans_z",
            "\ta_csys_option.orient.x = transform.rot_x",
            "\ta_csys_option.orient.y = transform.rot_y",
            "\ta_csys_option.orient.z = transform.rot_z",
            "\t",
            "\t! Create a csys and then get its geom",
            "\tCREATE_GENERAL_CSYS THIS a_csys_option default_csys_feat",
            "\tSET_FEATURE_NAME default_csys_feat \"default_csys\"",
            "\tGET_GEOM_FROM_FEATURE default_csys_feat CSYS default_csys",
            "\t",
            "ELSE ",
            "\tCOPY_REF first_csys default_csys",
            "\tGET_FEATURE_FROM_GEOM default_csys default_csys_feat",
            "\tSET_FEATURE_NAME default_csys_feat \"default_csys\"",
            "",
            "END_IF "
        ],
        "description": "DEFCSYSF "
    },
    "DFSREFSF": {
        "prefix": "DFSREFSF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! Purpose :GET DFS REFERENCES",
            "! -----------------------------------------------------------------",
            "",
            "! DECLARATIONS",
            "DECLARE_ARRAY dfs_surf_refs",
            "",
            "! SELECT A DATUM TAG",
            "USER_SELECT DATUM_TAG tag ",
            "",
            "!GET SHORT ID ",
            "GET_DATUM_TAG_LABEL tag label",
            "PRINT \"%\" label",
            "",
            "",
            "! first item - how attached",
            "GET_DATUM_TAG_ATTACHMENT tag tag_attachment",
            "PRINT \"GET ATTACH %\" tag_attachment",
            "",
            "IF REF_TYPE tag_attachment SURFACE",
            "\tADD_ARRAY_ELEM dfs_surf_refs surf_refs",
            "ELSE ",
            "\t! ESTABLISH CONNECTION SOMEHOW TO ITEM THAT IT SHOULD INHERIT FROM - AS FAR AS REFERENCES?",
            "END_IF",
            "",
            "!remaining refs after first item ",
            "GET_ANNOTATION_REFS tag refs1  ",
            "PRINT \"GET ANNO REFS %\" refs1",
            "",
            "",
            "! THIS METHOD DOES BRING A FULL LIST BUT PERHAPS NOT NEEDED FOR MOST THINGS",
            "\t! CREATE_ANNOTATION THIS new_af ",
            "\t! ADD_ANNOTATION_ELEMENT new_af tag ",
            "\t",
            "\t! both come out of this",
            "\t! GET_ANNOTATION_ELEMENT_REFS tag refs2",
            "\t! PRINT \"GET ANNO EL REFS %\" refs2",
            "",
            "! THIS DOESNT SEEM TO HELP WITH DFS BECAUSE THERE ARE NOT LEADERS",
            "\t! GET_ANNOTATION_LEADER_REFS tag leader_refs ",
            "\t! PRINT \"LEADER REFS %\" leader_refs "
        ],
        "description": "DFSREFSF "
    },
    "ELEGEXITF": {
        "prefix": "ELEGEXITF ",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!  ELEGANT EXIT IF NOT ASSEMBLY",
            "! -----------------------------------------------------------------------------------------------------",
            "GET_MDL_EXTENSION THIS mdl_ext",
            "IF mdl_ext <> ASM ",
            "\tDECLARE_ARRAY arrayButtons",
            "\tADD_ARRAY_ELEM arrayButtons \"EXIT\"",
            "\tMESSAGE_BOX_EX WARNING \"ERROR\" \"APPLICATION CURRENTLY VALID\\nONLY FOR ASSEMBLIES.\" arrayButtons paramChoice",
            "\tEXIT",
            "END_IF "
        ],
        "description": "ELEGEXITF "
    },
    "ERRORFULLF": {
        "prefix": "ERRORFULLF ",
        "body": [
            "CLEAR_CATCH_ERROR",
            "BEGIN_CATCH_ERROR",
            "$0",
            "END_CATCH_ERROR",
            "",
            "IF ERROR",
            "",
            "ELSE",
            "",
            "END_IF "
        ],
        "description": "ERRORFULLF "
    },
    "EXCELF": {
        "prefix": "EXCELF ",
        "body": [
            "",
            "IF EXCEL_CONNECTED",
            "\tEXCEL_DISCONNECT",
            "END_IF ",
            "",
            "EXCEL_START !INVISIBLE",
            "",
            "EXCEL_LOAD_DOCUMENT lib:models_database_ceiling.xlsx",
            "",
            "EXCEL_ACTIVATE_SHEET SHEET_BY_NAME \"model_information\"",
            "",
            "EXCEL_GET_ACTIVE_RANGE ROW_MIN ROW_MAX COL_MIN COL_MAX",
            "",
            "! PRINT \"RANGE % % % %\" ROW_MIN ROW_MAX COL_MIN COL_MAX",
            "",
            "WHILE ROW_MIN <= ROW_MAX",
            "\t! PRINT \"ROW_MIN = %\" ROW_MIN",
            "\tEXCEL_GET_STRING CELL_BY_INDEX ROW_MIN 0 FRACTION",
            "\t! PRINT \"FRACTION %\" FRACTION",
            "\tIF strfind(FRACTION, \"3/4\") > -1",
            "\t\tBREAK",
            "\tEND_IF",
            "\tROW_MIN++",
            "END_WHILE",
            "",
            "!Once found above - get value of that row ",
            "EXCEL_GET_VALUE CELL_BY_INDEX ROW_MIN 1 THICKNESS",
            "EXCEL_GET_VALUE CELL_BY_INDEX ROW_MIN 2 X_VALUE",
            "EXCEL_GET_VALUE CELL_BY_INDEX ROW_MIN 3 Y_VALUE",
            "PRINT \"THICKNESS = %\" THICKNESS",
            "PRINT \"X = %: Y=%\" X_VALUE Y_VALUE",
            "",
            "!Close the document",
            "EXCEL_CLOSE_DOCUMENT",
            "",
            "!Disconnect from Excel",
            "EXCEL_DISCONNECT",
            "",
            "$0 "
        ],
        "description": "EXCELF "
    },
    "FEMMESHF": {
        "prefix": "FEMMESHF ",
        "body": [
            "DECLARE_STRUCT FEMMESH_OPTION a_femmesh_option",
            "",
            "a_femmesh_option.mesh_type =  SOLID_MESH ",
            "a_femmesh_option.mesh_type =  SHELL_MESH ",
            "a_femmesh_option.mesh_type =  MIXED_MESH ",
            "a_femmesh_option.mesh_type =  QUILT_MESH ",
            "a_femmesh_option.mesh_type =  BOUNDARY_MESH ",
            "a_femmesh_option.mesh_type =  BAR_MESH ",
            "",
            "a_femmesh_option.shell_type = SHELL_MESH_TRIANGLE ",
            "a_femmesh_option.shell_type = SHELL_MESH_QUADRANGLE ",
            "\t",
            "a_femmesh_option.quilt_ref_arr",
            "",
            "a_femmesh_option.analysis = ANALYSIS_STRUCTURAL",
            "a_femmesh_option.analysis = ANALYSIS_MODAL ",
            "a_femmesh_option.analysis = ANALYSIS_THERMAL ",
            "",
            "a_femmesh_option.elem_shape = MIDPNT_LINEAR ",
            "a_femmesh_option.elem_shape = MIDPNT_PARABOLIC ",
            "a_femmesh_option.elem_shape = MIDPNT_PARABOLIC_FIXED ",
            "",
            "a_femmesh_option.solver = FEAS_NEUTRAL ",
            "a_femmesh_option.solver = FEAS_ANSYS ",
            "a_femmesh_option.solver = FEAS_NASTRAN ",
            "a_femmesh_option.solver = FEAS_ABAQUS ",
            "\t",
            "a_femmesh_option.csys_ref ",
            "",
            "a_femmesh_option.aux_csys_ref_arr  "
        ],
        "description": "FEMMESHF "
    },
    "FILEREADF": {
        "prefix": "FILEREADF ",
        "body": [
            "! READING A FILE AND PARSING TO ARRAYS",
            "RESOLVE_PATH @\"C:\\Users\\info\\OneDrive\\1.ddc\\3. SIGMAXIM\\Working_Directory\\points.txt\" points_file",
            "FILE_OPEN points_file \"r\" the_text",
            "DECLARE_VARIABLE INTEGER count 0 ",
            "WHILE NOT FILE_END the_text AND count < 1000",
            "\tFILE_READ_LINE the_text a_line",
            "\t! PRINT \"%\" a_line",
            "\tSPLIT_STRING a_line coords SPLIT_CHAR \" \"",
            "\tDECLARE_STRUCT POINT a_point",
            "\tGET_ARRAY_ELEM coords 0 a_point.x",
            "\tGET_ARRAY_ELEM coords 1 a_point.y",
            "\tGET_ARRAY_ELEM coords 2 a_point.z",
            "\tGET_SURFACES_AT_POS PRECISION 0.2  first_csys  all_surfaces a_point select_surfs",
            "\tFOR a_surf REF ARRAY select_surfs",
            "\t\tFIND_ARRAY_ELEM surfaces a_surf index ",
            "\t\tIF index == -1",
            "\t\t\tADD_ARRAY_ELEM surfaces a_surf",
            "\t\tEND_IF\t\t",
            "\tEND_FOR",
            "\tcount++",
            "END_WHILE",
            "FILE_CLOSE the_text "
        ],
        "description": "FILEREADF "
    },
    "FINDSURFPOINTF": {
        "prefix": "FINDSURFPOINTF ",
        "body": [
            "!*************************************************",
            "! FIND VALID SURFACE POINTS USING LOOP",
            "SEARCH_MDL_REFS RECURSIVE empty_asm SOLID_SURFACE \"*\" all_surfaces",
            "DECLARE_ARRAY surfaces",
            "SET_ACCURACY THIS ABSOLUTE 0.0001",
            "SEARCH_MDL_REF  empty_asm CSYS \"*\" first_csys",
            "",
            "",
            "",
            "! SHRINKWRAP",
            "FOR a_shrink_surf REF ARRAY surfs_from_shrink",
            "\t",
            "\tDECLARE_ARRAY select_surfs",
            "\t",
            "\tDECLARE_VARIABLE INTEGER while_count 0",
            "\tWHILE 1 == 1 AND while_count < 25",
            "\t\tGENERATE_RANDOM_INT 10 90 U",
            "\t\tGENERATE_RANDOM_INT 10 90 V",
            "\t\tu = u/10",
            "\t\tv = v/10",
            "\t\tCALC_PARAM_POS first_csys a_shrink_surf U V shrink_surf_pos",
            "\t\tPRINT \"%\" shrink_surf_pos",
            "\t\t",
            "\t\t",
            "\t\tGET_SURFACES_AT_POS PRECISION 0.2  first_csys  surfs_from_shrink shrink_surf_pos shrink_surfs_check",
            "\t\tPRINT \"%\" shrink_surfs_check",
            "\t\t",
            "\t\tFIND_ARRAY_ELEM shrink_surfs_check a_shrink_surf truth_check ",
            "\t\tIF a_shrink_surf == -1",
            "\t\t\tCONTINUE ",
            "\t\tEND_IF",
            "\t\t",
            "\t\tGET_SURFACES_AT_POS PRECISION 0.2  first_csys  all_surfaces shrink_surf_pos select_surfs",
            "\t\tIF NOT ARRAY_EMPTY select_surfs",
            "\t\t\tBREAK",
            "\t\tEND_IF",
            "\t\tPRINT \"COUNT %\" while_count",
            "\t\twhile_count++",
            "\tEND_WHILE",
            "\tIF while_count >= 24 OR ARRAY_EMPTY select_surfs",
            "\t\tCONTINUE",
            "\tEND_IF",
            "\t! GET_REF_POS first_csys a_shrink_surf shrink_surf_pos",
            "\t! GET_SURFACES_AT_POS PRECISION 0.2  first_csys  all_surfaces shrink_surf_pos select_surfs",
            "\tFOR a_surf REF ARRAY select_surfs",
            "\t\tFIND_ARRAY_ELEM surfaces a_surf index ",
            "\t\tIF index == -1",
            "\t\t\tADD_ARRAY_ELEM surfaces a_surf",
            "\t\tEND_IF\t\t",
            "\tEND_FOR\t\t\t\t",
            "END_FOR",
            "REPAINT ",
            "PRINT \"%\" surfaces",
            "FOR item REF ARRAY surfaces",
            "\tHIGHLIGHT_REF item",
            "\tSET_COLOR item 255 0 0 ",
            "END_FOR",
            "CLEAR_ARRAY surfaces "
        ],
        "description": "FINDSURFPOINTF "
    },
    "GRAPHSORT2F": {
        "prefix": "GRAPHSORT2F ",
        "body": [
            "! -----------------------------------------------------------------",
            "! GRAPH STYLE SORT RELYING ON DEPENDENCIES - MOVING THROUGH DEPENDENCIES - TAKES MULTIPLE LOOPS TO SORT / ARCHIVE THE DEPENDENCIES",
            "!PROCESS THE GTOL TO ARRAYS BASED ON ATTACHMENT REFERENCE",
            "FOR a_gtol REF ARRAY gtol_array",
            "\tADD_ARRAY_ELEM unsorted_anno a_gtol",
            "\tADD_ARRAY_ELEM unsorted_sheet  sheet_count",
            "",
            "\tREAD_GTOL_CREO4 a_gtol gtol_prop ",
            "\tIF gtol_prop.placement.placement_type == ANNOTATION OR gtol_prop.placement.placement_type == ANNOTATION_ELBOW",
            "\t\tADD_ARRAY_ELEM dependent_array a_gtol ",
            "\t\tADD_ARRAY_ELEM dependent_array gtol_prop.placement.placement_ref ",
            "\t\tADD_ARRAY_ELEM to_sort_array dependent_array",
            "\t\tCLEAR_ARRAY dependent_array",
            "\tELSE ",
            "\t\tADD_ARRAY_ELEM sorted_array a_gtol ",
            "\tEND_IF",
            "",
            "END_FOR",
            "",
            "",
            "! -----------------------------------------------------------------",
            "! SORTING THE DEPENDENT GTOLS TO ALIGN THEIR IDS WITH THE ATTACHMENT REFERENCE (DIM)",
            "GET_ARRAY_SIZE to_sort_array num_elements_to_sort",
            "",
            "WHILE num_elements_to_sort > 0",
            "\tcount = 0 ",
            "\t",
            "\tFOR sub_array REF ARRAY to_sort_array",
            "\t\t",
            "\t\t! PROCESS IF IT HAD AN ATTACHMENT",
            "\t\tGET_ARRAY_ELEM sub_array 0 gtol_ref",
            "\t\tGET_ARRAY_ELEM sub_array 1 dep_ref ",
            "",
            "\t\t! FIND THE ATTACHEMENT",
            "\t\tFIND_ARRAY_ELEM sorted_array dep_ref INDEX ",
            "\t\t",
            "\t\t! IF IT FINDS ONE - SORT THE GTOL IN BEHIND IT",
            "\t\tIF index == -1 ",
            "\t\t\tcount++",
            "\t\t\tCONTINUE ",
            "\t\tELSE",
            "\t\t\tINSERT_ARRAY_ELEM sorted_array index+1 gtol_ref",
            "\t\t\tADD_ARRAY_ELEM delete_index count",
            "\t\tEND_IF",
            "",
            "\t\tcount++",
            "\tEND_FOR",
            "\t",
            "\t! DELETE ITEMS AND EXAMINE REMAINING SIZE TO DETERMINE IF THE WHILE LOOP NEEDS FURTHER LOOPS TO PROCESS ALL ITEMS INTO THE SORTED ARRAY",
            "\tSORT_ARRAY DESCENDING delete_index\t",
            "\tFOR item REF ARRAY delete_index",
            "\t\tDELETE_ARRAY_ELEM to_sort_array item",
            "\tEND_FOR",
            "\tCLEAR_ARRAY delete_index",
            "\tGET_ARRAY_SIZE to_sort_array num_elements_to_sort",
            "END_WHILE "
        ],
        "description": "GRAPHSORT2F "
    },
    "GUITRIGGERF": {
        "prefix": "GUITRIGGERF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! ELEMENTS OF A GUI TRIGGER BASED ON A REFERENCE (BECAUSE YOU CAN INVALIDATE IT)",
            "! BEGIN_GUI_DESCR\t",
            "\tUSER_SELECT POINT trigger_ref REQUIRED ON_PICTURE 1000 1000",
            "\tIF HOLE_DIA < 1.5 OR HOLE_DIA > 8 ",
            "\t\tSUB_PICTURE lib:error.gif 100 300",
            "\t\tINVALIDATE_REF trigger_ref ",
            "\tELSE_IF HOLE_DIA >= 1.5 AND HOLE_DIA <= 8 ",
            "\t\ttrigger_ref = point_ref",
            "\tEND_IF",
            "! END_GUI_DESCR",
            "",
            "",
            "! BEGIN_ASM_DESCRQ",
            "",
            "\tDECLARE_REFERENCE trigger_ref",
            "\t",
            "\tCONFIG_ELEM  "
        ],
        "description": "GUITRIGGERF "
    },
    "INTERFERESURFSF": {
        "prefix": "INTERFERESURFSF ",
        "body": [
            "CHECKING INTERFERENCE SURFACES ",
            "",
            "USER_SELECT SURFACE the_check_surface",
            "",
            "! DECLARING AN ARRAY TO CARRY THE INTERFERENCE SURFACES",
            "DECLARE_ARRAY interfering_surfaces",
            "",
            "! Only for models with interference to this surface",
            "FOR interfering_mdl REF INTERF_SURF the_check_surface",
            "\tPRINT \"MDL: %\" initerfering_mdl",
            "\t! Gather all surfaces to be examined (from that interference model)",
            "\tSEARCH_MDL_REFS interfering_mdl SOLID_SURFACE \"*\" all_surfaces",
            "\t! SEARCH_MDL_REFS interfering_mdl SURFACE \"*\" all_surfaces",
            "\t",
            "\t! For each surface...",
            "\tFOR a_surface REF ARRAY all_surfaces",
            "\t\t",
            "\t\t! Check clearance / interference",
            "\t\tCALC_CLEARANCE SURFACE_CLEARANCE a_surface the_check_surface clear ",
            "\t\tPRINT \"-----------% %\" a_surface clear",
            "\t\t! IF THE interference IS TRUE; PUT THAT SURFACE IN A LIST/ARRAY",
            "\t\tIF clear.interference == TRUE OR round(clear.distance,3) < 0.01",
            "\t\t\tADD_ARRAY_ELEM interfering_surfaces a_surface",
            "\t\tEND_IF",
            "\t\t",
            "\tEND_FOR",
            "END_FOR",
            "",
            "PRINT \"INTERFERING SURFS %\" interfering_surfaces",
            "REPAINT",
            "FOR an_entity REF ARRAY interfering_surfaces",
            "\tHIGHLIGHT_REF an_entity",
            "END_FOR",
            "! HIGHLIGHT_REF a_driving_dim",
            "STOP_EX",
            "EXIT "
        ],
        "description": "INTERFERESURFSF "
    },
    "INTERFSURFS": {
        "prefix": "INTERFSURFS ",
        "body": [
            "!for use in an assembly environment",
            "! RANDOMLY  an  EXTERNAL QUILT (CHANGE THESE)",
            "USER_SELECT FACE the_check_surface",
            "",
            "! DECLARING AN ARRAY TO CARRY THE INTERFERENCE SURFACES",
            "DECLARE_ARRAY interfering_surfaces",
            "",
            "! Only for models with interference to this surface",
            "FOR interfering_mdl REF INTERF_SURF the_check_surface",
            "\t",
            "\t! Gather all surfaces to be examined (from that interference model)",
            "\tSEARCH_MDL_REFS interfering_mdl SURFACE \"*\" all_surfaces",
            "\t",
            "\t! For each surface...",
            "\tFOR a_surface REF ARRAY all_surfaces",
            "\t",
            "\t\t! Check clearance / interference",
            "\t\tCALC_CLEARANCE SURFACE_CLEARANCE a_surface the_check_surface clear ",
            "\t\t",
            "\t\t! IF THE CLEARANCE IS TRUE; PUT THAT SURFACE IN A LIST/ARRAY",
            "\t\tIF clear.interference == TRUE",
            "\t\t\tADD_ARRAY_ELEM interfering_surfaces a_surface",
            "\t\tEND_IF",
            "\t\t",
            "\tEND_FOR",
            "END_FOR",
            "",
            "! TO SEE THE INTERFERENCE SURFACES",
            "REPAINT",
            "FOR an_entity REF ARRAY interfering_surfaces",
            "\tHIGHLIGHT_REF an_entity",
            "END_FOR",
            "STOP_EX "
        ],
        "description": "INTERFSURFS "
    },
    "MAPKEYF": {
        "prefix": "MAPKEYF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! MAPKEY BASED METHOD OF PLACING A DIMENSION ATTACHED DFS ",
            "USER_SELECT DIMENSION a_dim",
            "GET_DIM_SYMBOL a_dim dim_symbol",
            "",
            "DECLARE_VARIABLE STRING mapkey_text \"\"",
            "mapkey_text += @\"~ Command `ProCmdCrDatumFeatSym` ;\"",
            "mapkey_text += @\"~ Command `ProCmdMdlTreeSearch` ;\"",
            "mapkey_text += @\"~ Select `selspecdlg0` `SelOptionRadio` 1 `Dimension`;\"",
            "mapkey_text += @\"~ Update `selspecdlg0` `ExtRulesLayout.ExtBasicNameLayout.BasicNameList` `\" + dim_symbol + @\"`;\"",
            "mapkey_text += @\"~ Activate `selspecdlg0` `EvaluateBtn`;\"",
            "mapkey_text += @\"~ Select `selspecdlg0` `ResultList` 1 `549:21:`;\"",
            "mapkey_text += @\"~ Activate `selspecdlg0` `ApplyBtn`;\"",
            "mapkey_text += @\"~ Activate `selspecdlg0` `CancelButton`;\"",
            "mapkey_text += @\"~ Command `ProCmdWinSelLocation`  1;\"",
            "mapkey_text += @\"~ Update `graph_pick` `HSpin` 500;\"",
            "mapkey_text += @\"~ Update `graph_pick` `VSpin` 500;\"",
            "mapkey_text += @\"~ Activate `graph_pick` `MiddleBtn`;\"",
            "mapkey_text += @\"~ Close `graph_pick` `graph_pick`;\"",
            "MAPKEY mapkey_text   "
        ],
        "description": "MAPKEYF "
    },
    "MDLREFFROMNAMEF": {
        "prefix": "MDLREFFROMNAMEF ",
        "body": [
            "! RETRIEVE MODEL REFERENCE BY NAME",
            "CLEAR_CATCH_ERROR",
            "BEGIN_CATCH_ERROR",
            "RETRIEVE_MDL model_search_path+\\+a_changed_mdl_name+\".PRT\" a_changed_mdl ",
            "END_CATCH_ERROR",
            "IF ERROR",
            "\tRETRIEVE_MDL model_search_path+\\+a_changed_mdl_name+\".ASM\" a_changed_mdl ",
            "END_IF "
        ],
        "description": "MDLREFFROMNAMEF "
    },
    "MEASDISTF": {
        "prefix": "MEASDISTF ",
        "body": [
            "! Get the Creo Date Code Version",
            "GET_PROE_DATECODE PROE_DATECODE",
            "",
            "! Select two surfaces as references to measure the distance",
            "USER_SELECT SURFACE SURF1",
            "USER_SELECT SURFACE SURF2",
            "",
            "! Clear the Creo Message Log",
            "CLEAR_MESSAGE_AREA",
            "",
            "PRINT \"\"",
            "PRINT \"PROE_DATECODE = %\" PROE_DATECODE",
            "IF strfind(PROE_DATECODE,\"8.0.\") <> -1",
            "\tPRINT \"Using the MEASURE_DISTANCE command...\"",
            "\t",
            "\t! Measure the distance between the two surfaces",
            "\tMEASURE_DISTANCE SURF1 SURF2 SURF_DIST",
            "ELSE",
            "\tPRINT \"Using an Analysis Feature UDF to measure the distance...\"",
            "\t",
            "\t! Create a UDF of an analysis feature to measure the distance",
            "\tCREATE_UDF lib:\\sigma_commands\\udfs\\measure_dist.gph THIS DIST_ANALYSIS_UDF",
            "\t\tUDF_REF \"Surface 1 Ref\" SURF1",
            "\t\tUDF_REF \"Surface 2 Ref\" SURF2",
            "\t\tUDF_EXP_PARAM \"DISTANCE\" SURF_DIST\t! export out the DISTANCE from the analysis feature",
            "\tEND_CREATE_UDF",
            "\tREMOVE_FEATURE DIST_ANALYSIS_UDF\t\t! Immediately remove the analysis feature",
            "END_IF",
            "",
            "PRINT \"SURF_DIST = %\" SURF_DIST "
        ],
        "description": "MEASDISTF "
    },
    "METRICF": {
        "prefix": "METRICF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CHANGE ALL MODELS (IN ASSYS) TO METRIC LENGTH UNITS",
            "! -----------------------------------------------------------------",
            "! GATHER CURRENT ITEM AND COMPONENTS",
            "SEARCH_MDL_REFS RECURSIVE THIS MODEL \"*\" models",
            "INSERT_ARRAY_ELEM models 0 THIS ",
            "",
            "! -----------------------------------------------------------------",
            "! CHANGE THE UNITS OF EACH",
            "FOR a_mdl REF ARRAY models",
            "\tGET_UNIT_LENGTH a_mdl length_unit",
            "\tIF length_unit <> MM",
            "\t\tSET_UNIT_LENGTH a_mdl MM CONVERT",
            "\tEND_IF",
            "END_FOR",
            "",
            "!option 2",
            "",
            "! -----------------------------------------------------------------",
            "! ENSURE MM UNITS",
            "GET_MDL_TYPE current_mdl type",
            "IF type == ASSEMBLY ",
            "\tSEARCH_MDL_REFS RECURSIVE current_mdl MODEL \"*\" all_models",
            "\t",
            "\t",
            "\tADD_ARRAY_ELEM all_models current_mdl",
            "\tPRINT \"%\" all_models",
            "\t",
            "\tFOR a_model REF ARRAY all_models",
            "\t\tGET_UNIT_LENGTH a_model length_unit",
            "\t\tIF length_unit <> MM",
            "\t\t\tSET_UNIT_LENGTH a_model MM CONVERT",
            "\t\t\t! SET_UNIT_LENGTH a_model MM INTERPRET",
            "\t\tEND_IF",
            "\tEND_FOR",
            "ELSE_IF TYPE == PART ",
            "\t\tGET_UNIT_LENGTH current_mdl length_unit",
            "\t\tIF length_unit <> MM",
            "\t\t\tSET_UNIT_LENGTH current_mdl MM CONVERT",
            "\t\t\t! SET_UNIT_LENGTH THIS MM INTERPRET",
            "\t\tEND_IF",
            "",
            "ELSE ",
            "\tMESSAGE_BOX \"WARNING: OPEN PRT OR ASM\"",
            "\tEXIT",
            "",
            "END_IF",
            "",
            " "
        ],
        "description": "METRICF "
    },
    "MSACCESSF": {
        "prefix": "MSACCESSF ",
        "body": [
            "ODBC_CONNECT \"Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\\SIGMAXIM\\SA_Library\\component_engine\\Demos\\34-Lineup_VMM\\db\\vmm.accdb\" "
        ],
        "description": "MSACCESSF "
    },
    "NEWAPPSTATEF": {
        "prefix": "NEWAPPSTATEF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATE NEW APPEARANCE STATE",
            "MAPKEY @\"mapkey new_appearance ~ Command `ProCmdViewVisTool` ;~ Activate `visual_dlg0` `ZoneNmCreate`;~ Activate `visual_dlg0` `Table_INPUT`;~ Close `visual_dlg0` `visual_dlg0`;\" "
        ],
        "description": "NEWAPPSTATEF "
    },
    "NEWDBF": {
        "prefix": "NEWDBF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! ESTABLISHING LOCAL DATABASE - SQLITE",
            "GET_WORKING_DIRECTORY working_dir",
            "DECLARE_VARIABLE STRING DB_FOLDER \"TEMP_DATABASES\"",
            "DECLARE_VARIABLE STRING database_file \"mdl_dashboard.db\"",
            "DECLARE_VARIABLE STRING db_path_and_name",
            "GET_ENVIRONMENT_VARIABLE \"ComSpec\" ComSpec",
            "RESOLVE_PATH lib:\\sigma_commands\\software sqlite_path",
            "DECLARE_VARIABLE STRING cmd_arg \"\"",
            "",
            "\t! DB_FOLDER STRUCTURE FOR THE DB",
            "\tREAD_SUBDIRECTORIES working_dir sub_directories",
            "\tFIND_ARRAY_ELEM sub_directories DB_FOLDER index ",
            "\tIF index == -1 ",
            "\t\tPLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+working_dir+\"\\\"\"+\" & mkdir \"+DB_FOLDER",
            "\tEND_IF",
            "\tworking_dir = working_dir+DB_FOLDER",
            "",
            "\t! process spaces and make it uri style",
            "\tdb_path_and_name = \"file:///\" + strreplace(working_dir +\\+database_file,\" \",\"%20\",TRUE)",
            "\tdb_path_and_name = strreplace(db_path_and_name,\\,/,TRUE)",
            "",
            "! -----------------------------------------------------------------",
            "! DELETE ANY DB CONTENTS ",
            "! PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+working_dir+\"\\\"\"+\" & del *.db /Q\"   !clear all db",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+working_dir+\"\\\"\"+\" & del \"+database_file+\" /Q\"   !clear just this specific one ",
            "",
            "! -----------------------------------------------------------------",
            "! CREATE THE DESIRED DB ",
            "cmd_arg  = \"/c cd \"+\"\\\"\"+sqlite_path+\"\\\"\"",
            "cmd_arg += \" & sqlite3 \"+db_path_and_name +\" \"",
            "cmd_arg += \"\\\"\"+\".save \"+db_path_and_name+\"\\\"\"",
            "PLUGIN SHOW SYNC ComSpec cmd_arg "
        ],
        "description": "NEWDBF "
    },
    "ODBCW2F": {
        "prefix": "ODBCW2F ",
        "body": [
            "! ! EXECUTE ODBC PUSH",
            "RESOLVE_PATH lib:files\\pmi_database_logic.xlsx database_file",
            "DECLARE_VARIABLE STRING sql_command",
            "sql_command  = \"INSERT INTO [MDL_SURF_GROUPS$] ( GROUP_ID , GROUP_TYPE , SOMETHING ) VALUES( \\'SOMETHING\\' , itos(value) , \\'SOMETHING\\'  )\"",
            "CALL lib:\\sigma_commands\\quick_odbc_execute.tab\t "
        ],
        "description": "ODBCW2F "
    },
    "ODBC_CONNECT_NEW": {
        "prefix": "ODBC_CONNECT_NEW ",
        "body": [
            "CLEAR_CATCH_ERROR",
            "BEGIN_CATCH_ERROR",
            "\tODBC_CONNECT odbc_connect_string",
            "END_CATCH_ERROR",
            "IF ERROR ",
            "\tBEGIN_CATCH_ERROR",
            "\t\tODBC_CONNECT USE_32BIT_DRIVER TRUE odbc_connect_string",
            "\tEND_CATCH_ERROR",
            "END_IF ",
            "",
            "IF NOT ODBC_CONNECTED",
            "\tMESSAGE_BOX \"Cannot connect to Database\\n\"+database_file+\"\\n\\nSTOP\"",
            "\tEXIT RECURSIVE ",
            "END_IF  "
        ],
        "description": "ODBC_CONNECT_NEW "
    },
    "PROCESSINGBOXF": {
        "prefix": "PROCESSINGBOXF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! SETTING UP PROCESSING BOX",
            "GET_ARRAY_SIZE actual_table_names num_tables ",
            "PROCESSING_BOX_START \"PROGRESS:\"",
            "DECLARE_VARIABLE INTEGER table_count 1",
            "\t",
            "FOR a_table_name  REF ARRAY actual_table_names",
            "",
            "\tUPDATING THE PROCESSING BOX STATE",
            "\tPROCESSING_BOX_SET_STATE round(table_count/num_tables*100,0)",
            "\ttable_count++",
            "END_FOR",
            "",
            "!END OF PROCESSING BOX",
            "PROCESSING_BOX_END "
        ],
        "description": "PROCESSINGBOXF "
    },
    "REGREPF": {
        "prefix": "REGREPF ",
        "body": [
            "REG_EXP_REPLACE ref_string \"(.*?)_*(\\d+)(#625#)(.*)\" \"$1#3#$2\" ref_string "
        ],
        "description": "REGREPF "
    },
    "RSURFPOINTF": {
        "prefix": "RSURFPOINTF ",
        "body": [
            "!KEEP RANDOM SAMPLING UNTIL POINT ON SURFACE",
            "SEARCH_MDL_REF THIS CSYS \"*\" first_csys",
            "SEARCH_MDL_REFS THIS SURFACE \"*\" all_surfaces",
            "USER_SELECT SURFACE a_surf",
            "WHILE TRUE == TRUE",
            "\t\t\t\t",
            "\t! KEEP SAMPLING UNTIL ON SURFACE",
            "\tGENERATE_RANDOM_INT 0 10 rand1",
            "\tGENERATE_RANDOM_INT 0 10 rand2",
            "\tint1 = rand1/10",
            "\tint2 = rand2/10",
            "",
            "\tCALC_PARAM_POS first_csys a_surf int1 int2 pos_calc",
            "\t",
            "\tCLEAR_CATCH_ERROR",
            "\tBEGIN_CATCH_ERROR",
            "\tGET_SURFACE_AT_POS first_csys all_surfaces pos_calc surf_at_point",
            "\t",
            "\tIF REF_EQUAL surf_at_point a_surf",
            "\t\t",
            "\t\tparam_pos2.x = pos_calc.x",
            "\t\tparam_pos2.y = pos_calc.y",
            "\t\tparam_pos2.z = pos_calc.z",
            "\t\t",
            "\t\tBREAK",
            "\tEND_IF",
            "\t",
            "\tEND_CATCH_ERROR",
            "END_WHILE "
        ],
        "description": "RSURFPOINTF "
    },
    "SHADEDEDGEF": {
        "prefix": "SHADEDEDGEF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! Change to shaded edges",
            "MAPKEY \"mapkey shaded_edges ~ Command `ProCmdEnvShadedEdges`  0;\" "
        ],
        "description": "SHADEDEDGEF "
    },
    "SNIPF": {
        "prefix": "SNIPF ",
        "body": [
            "SNIPPET - $0",
            "",
            "",
            "END_SNIPPET "
        ],
        "description": "SNIPF "
    },
    "SPHEREDIAF": {
        "prefix": "SPHEREDIAF ",
        "body": [
            "GET_SURFACE_NORM temp_part_csys item pos1 vec1",
            "CALC_PARAM_POS temp_part_csys item 0.7 0.7 pos2 !DO WE NEED TO TEST FOR BEING ON SURF? FAR APART SEEMS IMPORTANT",
            "SET_REF_POS temp_part_csys item pos2",
            "GET_SURFACE_NORM a_csys item pos_unused vec2  ",
            "VECTOR_FROM_POINTS pos1 pos2 vec_dist ",
            "VECTOR_GET_LENGTH vec_dist vec_length  !DIST BETWEEN POINTS",
            "VECTOR_DOT_PRODUCT vec1 vec2 vec_dot",
            "CALC_FORMULA \"vec_length / sqrt(2*(1-(vec_dot)))\" srad",
            "PRINT \"SDIA= %\\t%\" 2*srad dim_value",
            "IF round(srad*2,3) == dim_value",
            "\tADD_ARRAY_ELEM sub_array item",
            "ELSE",
            "\t",
            "END_IF "
        ],
        "description": "SPHEREDIAF "
    },
    "SQLITEDRIVERF": {
        "prefix": "SQLITEDRIVERF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CHECK FOR SQLITE DRIVER  - NECESSARY FOR APP - ELEGANT EXIT",
            "! 64 or 32 bit powershell",
            "PLUGIN CAPTURE_OUTPUT powershell_output1 HIDE SYNC @\"C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \"/c Get-OdbcDriver\"",
            "PLUGIN CAPTURE_OUTPUT powershell_output2 HIDE SYNC @\"C:\\WINDOWS\\SYSWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\" \"/c Get-OdbcDriver\"",
            "DECLARE_ARRAY found_drivers",
            "! FIND THE DRIVERS",
            "IF NOT ARRAY_EMPTY powershell_output1 ",
            "\tfound_drivers = powershell_output1",
            "ELSE_IF NOT ARRAY_EMPTY powershell_output2",
            "\tfound_drivers = powershell_output2",
            "END_IF",
            "! LOOK FOR THE NECESSARY DRIVER",
            "FIND_ARRAY_ELEM found_drivers \"Name      : SQLite3 ODBC Driver\" index",
            "IF index == -1 ",
            "\tDECLARE_ARRAY arrayButtons",
            "\tCLEAR_ARRAY arrayButtons",
            "\tADD_ARRAY_ELEM arrayButtons \"EXIT\"",
            "\tMESSAGE_BOX_EX WARNING \"NECESSARY DRIVER MISSING\" \"Your installation is currently missing a necessary SQLITE3 driver.\\nPlease install from MBD_CHECKER\\\\\\\\SOFTWARE directory.\\nE.g., using sqliteodbc.exe or sqliteodbc_w64.exe\" arrayButtons paramChoice",
            "\tEXIT",
            "ELSE ",
            "\t! CONTINUE - DRIVER FOUND",
            "END_IF",
            " "
        ],
        "description": "SQLITEDRIVERF "
    },
    "SQLITEEF": {
        "prefix": "SQLITEEF ",
        "body": [
            "! SQLITE EXECUTE",
            "DECLARE_VARIABLE STRING sql_command ",
            "RESOLVE_PATH \".\\temp_databases\\mdl_dashboard.db\" database_file",
            "GET_WORKING_DIRECTORY working_dir",
            "DECLARE_VARIABLE STRING DB_FOLDER \"TEMP_DATABASES\"",
            "DECLARE_VARIABLE STRING database_file \"mdl_dashboard.db\"",
            "RESOLVE_PATH working_dir+DB_FOLDER+\\+database_file database_file",
            "sql_command = \" INSERT INTO MBD_TABLE (ONE) VALUES (\\\\'ABC\\\\');\"",
            "sql_command = \" INSERT INTO MBD_TABLE (ONE) VALUES (\\\\'\"+TOL_STANDARD+\"\\\\');\"",
            "sql_command = \" UPDATE MBD_TABLE  SET ONE = \\\\'\\'ABC\\\\' WHERE TWO > 3;\"",
            "sql_command = \" UPDATE MBD_TABLE  SET (ONE,TWO) VALUES (\\\\'\\'ABC\\\\' , 3 ) WHERE THREE > 3;\"",
            "INCLUDE lib:\\sigma_commands\\sqlite_execute.tab "
        ],
        "description": "SQLITEEF "
    },
    "SQLITEQF": {
        "prefix": "SQLITEQF ",
        "body": [
            "! SQLITE QUERY",
            "DECLARE_VARIABLE STRING sql_command ",
            "RESOLVE_PATH \".\\temp_databases\\mdl_dashboard.db\" database_file",
            "GET_WORKING_DIRECTORY working_dir",
            "DECLARE_VARIABLE STRING DB_FOLDER \"TEMP_DATABASES\"",
            "DECLARE_VARIABLE STRING database_file \"mdl_dashboard.db\"",
            "RESOLVE_PATH working_dir+DB_FOLDER+\\+database_file database_file",
            "sql_command = \" SELECT SA_GEO_CHAR_SYMBOL_NAME FROM MBD_TABLES  WHERE STANDARD = \" + \"\\'\" + tol_standard + \"\\'\" + \";\"",
            "INCLUDE lib:\\sigma_commands\\sqlite_query.tab",
            "PRINT \"ODBC RESULT   : %\" odbc_output",
            "DECLARE_ARRAY something",
            "something = odbc_output "
        ],
        "description": "SQLITEQF "
    },
    "SQLITETBLF": {
        "prefix": "SQLITETBLF ",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!  CREATE SQLITE TABLE",
            "! -----------------------------------------------------------------------------------------------------\t",
            "",
            "GET_WORKING_DIRECTORY working_dir",
            "DECLARE_VARIABLE STRING database_file \"mbd_checker_rules.db\"",
            "DECLARE_VARIABLE STRING database_file working_dir+db_folder+\\+database_file",
            "DECLARE_VARIABLE STRING sql_command\t\t",
            "sql_command = \"CREATE TABLE MDL_GTOLS (\"",
            "sql_command +=     \"RULE_ID \tINT\"",
            "sql_command += \",\" + \"RULE_IMAGE \t\tINT\" ",
            "sql_command += \",\" + \"RULE_CHECKED \tTEXT\" ",
            "sql_command += \",\" + \"RULE_WHY \t\tTEXT\" ",
            "sql_command +=  \") ;\"",
            "! PRINT \"%\" sql_command",
            "ODBC_EXECUTE sql_command",
            "ODBC_COMMIT "
        ],
        "description": "SQLITETBLF "
    },
    "SURFSFROMFEATF": {
        "prefix": "SURFSFROMFEATF ",
        "body": [
            "USER_SELECT FEATURE a_feat",
            "GET_GEOMS_FROM_FEATURE a_feat SURFACE surfs ",
            "REPAINT ",
            "FOR item REF ARRAY surfs",
            "\tPRINT \"%\" item",
            "\tHIGHLIGHT_REF item",
            "END_FOR",
            "STOP_EX ",
            " "
        ],
        "description": "SURFSFROMFEATF "
    },
    "TODOHF": {
        "prefix": "TODOHF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! TODO:   $0",
            "! ----------------------------------------------------------------- "
        ],
        "description": "TODOHF "
    },
    "TOF": {
        "prefix": "TOF ",
        "body": [
            "! TODO:    "
        ],
        "description": "TOF "
    },
    "UNCPATHF": {
        "prefix": "UNCPATHF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATE UNC PATH FROM NORMAL PATH",
            "RESOLVE_PATH @\"C:\\Users\\info\\OneDrive\\1.ddc\\3. SIGMAXIM\\Library\\CURRENT\\Component_engine\\MBE\\PMI\\PMI_REPORTING\\RULE_PICTURES\" base_path_pics",
            "",
            "! -----------------------------------------------------------------",
            "! unc path conversion ",
            "base_path_pics = strreplace(base_path_pics,\" \",\"%20\",TRUE)",
            "base_path_pics = strreplace(base_path_pics,\"\\\\\\\\\",\"/\",TRUE)",
            "base_path_pics = \"file:///\"+base_path_pics",
            "PRINT \"%\" base_path_pics",
            "",
            "PLUGIN HIDE SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c start \\\"\\\" \\\"\"+base_path_pics+\"\\\"\" "
        ],
        "description": "UNCPATHF "
    },
    "UNIQUEFILENAME": {
        "prefix": "UNIQUEFILENAME ",
        "body": [
            "!GENERATING A UNIQUE FILE NAME AND WRITING IT",
            "FILE_OPEN end_path+file_name_xgml+\"_\"+itos(count)+\".txt\" \"r\" graph_file_to_write",
            "WHILE FILE_VALID graph_file_to_write",
            "\tFILE_CLOSE graph_file_to_write",
            "\tcount++",
            "\tFILE_OPEN end_path+file_name_xgml+\"_\"+itos(count)+\".txt\" \"r\" graph_file_to_write",
            "END_IF",
            "FILE_OPEN end_path+file_name_xgml+\"_\"+itos(count)+\".txt\" \"w\" graph_file",
            "FILE_WRITE graph_file final_text_xgml",
            "FILE_CLOSE graph_file "
        ],
        "description": "UNIQUEFILENAME "
    },
    "URIF": {
        "prefix": "URIF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATE A URI TYPE FILE PATH TO ALLOW FOR BEST SQLITE DB CREATION",
            "! -----------------------------------------------------------------",
            "db_path_and_name = \"file:///\" + strreplace(the_db_full_path,\" \",\"%20\",TRUE)",
            "db_path_and_name = strreplace(db_path_and_name,\\,/,TRUE) "
        ],
        "description": "URIF "
    },
    "WARNINGF": {
        "prefix": "WARNINGF ",
        "body": [
            "DECLARE_ARRAY arrayButtons",
            "ADD_ARRAY_ELEM arrayButtons \"CONTINUE\"",
            "MESSAGE_BOX_EX WARNING \"READABILITY\" \" NUMBER OF ANNOTATIONS WITH PROBLEMATIC\\nORIENTATION  FOR READABILITY = \"+itos(problems) arrayButtons paramChoice",
            "CLEAR_ARRAY arrayButtons "
        ],
        "description": "WARNINGF "
    },
    "WINDCHILLF": {
        "prefix": "WINDCHILLF ",
        "body": [
            "http://172.28.128.3/Windchill "
        ],
        "description": "WINDCHILLF "
    },
    "adddistf": {
        "prefix": "adddistf ",
        "body": [
            "FOR AE REF ARRAY AES_IN_AF",
            "\tFIND_ARRAY_ELEM AES AE INDEX",
            "\tIF INDEX == -1",
            "\t\tADD_ARRAY_ELEM AES AE",
            "\tEND_IF",
            "END_FOR "
        ],
        "description": "adddistf "
    },
    "addtoAF": {
        "prefix": "addtoAF ",
        "body": [
            "! -----------------------------------------------------------------",
            "! If not in AF , add to AF",
            "DECLARE_ARRAY AES",
            "SEARCH_MDL_REFS THIS FEATURE_TYPE ANNOTATION ALL_AFS",
            "",
            "FOR AF REF ARRAY ALL_AFS",
            "\tGET_ANNOTATION_ELEMENTS AF AES_IN_AF",
            "\tFOR AE REF ARRAY AES_IN_AF",
            "\t\tFIND_ARRAY_ELEM AES AE INDEX",
            "\t\tIF INDEX == -1",
            "\t\t\tADD_ARRAY_ELEM AES AE",
            "\t\tEND_IF",
            "\tEND_FOR",
            "END_FOR "
        ],
        "description": "addtoAF "
    },
    "allaps": {
        "prefix": "allaps ",
        "body": [
            "\t! -----------------------------------------------------------------------------------------------------",
            "\t!  GETTING ALL ANNOTATION PLANES",
            "\t! -----------------------------------------------------------------------------------------------------",
            "\t! COMMON ANNOTATION PLANES",
            "\tDECLARE_ARRAY std_model_ap_names",
            "\tDECLARE_ARRAY ap_refs",
            "\tDECLARE_VARIABLE STRING std_ap_names \"FLAT_TO_SCREEN,FRONT,TOP,RIGHT,BACK,BOTTOM,LEFT\"",
            "\tSPLIT_STRING std_ap_names std_ap_names_array SPLIT_CHAR \",\"",
            "\tFOR ap_name REF ARRAY std_ap_names_array",
            "\t\tGET_MDL_ANNOTATION_PLANE THIS ap_name AP_REF",
            "\t\tADD_ARRAY_ELEM ap_refs ap_ref",
            "\tEND_FOR",
            "\t",
            "\t! Declare an array for all annotation planes",
            "\tDECLARE_ARRAY ap_names",
            "\tap_names = std_ap_names_array",
            "\t",
            "\t! To gather annotation planes, lets work from the comb views",
            "\tGET_COMB_VIEWS THIS comb_views",
            "\tPRINT \"%\" comb_views",
            "\t",
            "\t!for each comb view...",
            "\tFOR a_comb_view REF ARRAY comb_views",
            "\t",
            "\t\t! Lets grab the annotations (they have an annotation plane)",
            "\t\tGET_COMB_VIEW_ANNOTATIONS THIS a_comb_view cv_annotations",
            "\t\tPRINT \"%\" cv_annotations",
            "\t\t",
            "\t\t! For each annotation, lets get its annotation plane",
            "\t\tFOR an_annotation REF ARRAY cv_annotations",
            "\t\t\tCLEAR_CATCH_ERROR",
            "\t\t\tBEGIN_CATCH_ERROR",
            "\t\t\t\tGET_REF_ANNOTATION_PLANE CALC_POS TRUE an_annotation ap_ref",
            "\t\t\t\tPRINT \"%\" ap_ref",
            "\t\t\t\tGET_ANNOTATION_PLANE_NAME ap_ref name ",
            "\t\t\t\t",
            "\t\t\t\t! If we dont find it already in the array, lets add it (producing a distinct list)",
            "\t\t\t\tFIND_ARRAY_ELEM ap_refs ap_ref index",
            "\t\t\t\tIF index == -1    ! AND REF_VALID ap_ref AND name <> \"UNKNOWN\"",
            "\t\t\t\t\tADD_ARRAY_ELEM ap_refs ap_ref",
            "\t\t\t\t\tADD_ARRAY_ELEM ap_names name",
            "\t\t\t\tEND_IF\t\t\t",
            "\t\t\tEND_CATCH_ERROR",
            "\t\tEND_FOR",
            "\tEND_FOR ",
            "\t",
            "\t! Here we can see we have some annotation planes in the default comb view that were gathered in the array",
            "\tPRINT \"%\" ap_refs",
            "\tPRINT \"%\" ap_names",
            "\t",
            "\t! GET_ARRAY_SIZE ap_refs qty ",
            "\t",
            "\t! DECLARE_VARIABLE INTEGER COUNT 0",
            "\t! WHILE count < qty ",
            "\t\t! GET_ARRAY_ELEM AP_REFs COUNT AP_REF ",
            "\t\t! PRINT \"%\" ap_ref",
            "\t\t! count++",
            "\t! END_WHILE",
            "\t "
        ],
        "description": "allaps "
    },
    "allfeattypesf": {
        "prefix": "allfeattypesf ",
        "body": [
            "SmartAssembly\tCreo (ProFeattype)",
            "FIRST_FEAT\t\tPRO_FEAT_FIRST_FEAT",
            "HOLE\t\t\tPRO_FEAT_HOLE",
            "SHAFT\t\t\tPRO_FEAT_SHAFT",
            "ROUND\t\t\tPRO_FEAT_ROUND",
            "CHAMFER\t\tPRO_FEAT_CHAMFER",
            "SLOT\t\t\tPRO_FEAT_SLOT",
            "CUT\t\t\tPRO_FEAT_CUT",
            "PROTRUSION\t\tPRO_FEAT_PROTRUSION",
            "NECK\t\t\tPRO_FEAT_NECK",
            "FLANGE\t\tPRO_FEAT_FLANGE",
            "RIB\t\t\tPRO_FEAT_RIB",
            "EAR\t\t\tPRO_FEAT_EAR",
            "DOME\t\t\tPRO_FEAT_DOME",
            "DATUM\t\t\tPRO_FEAT_DATUM",
            "LOC_PUSH\t\tPRO_FEAT_LOC_PUSH",
            "PATTERN\t\tPRO_FEAT_PATTERN",
            "UDF\t\t\tPRO_FEAT_UDF",
            "DATUM_AXIS\t\tPRO_FEAT_DATUM_AXIS",
            "DRAFT\t\t\tPRO_FEAT_DRAFT",
            "SHELL\t\t\tPRO_FEAT_SHELL",
            "DOME\t\t\tPRO_FEAT_DOME",
            "CORN_CHAMF\t\tPRO_FEAT_CORN_CHAMF",
            "DATUM_POINT\t\tPRO_FEAT_DATUM_POINT",
            "IMPORT\t\tPRO_FEAT_IMPORT",
            "COSMETIC\t\tPRO_FEAT_COSMETIC",
            "ETCH\t\t\tPRO_FEAT_ETCH",
            "MERGE\t\t\tPRO_FEAT_MERGE",
            "MOLD\t\t\tPRO_FEAT_MOLD",
            "SAW\t\t\tPRO_FEAT_SAW",
            "TURN\t\t\tPRO_FEAT_TURN",
            "MILL\t\t\tPRO_FEAT_MILL",
            "DRILL\t\t\tPRO_FEAT_DRILL",
            "OFFSET\t\tPRO_FEAT_OFFSET",
            "DATUM_SURF\t\tPRO_FEAT_DATUM_SURF",
            "REPLACE_SURF\tPRO_FEAT_REPLACE_SURF",
            "GROOVE\t\tPRO_FEAT_GROOVE",
            "PIPE\t\t\tPRO_FEAT_PIPE",
            "DATUM_QUILT\t\tPRO_FEAT_DATUM_QUILT",
            "ASSEM_CUT\t\tPRO_FEAT_ASSEM_CUT",
            "UDF_THREAD\t\tPRO_FEAT_UDF_THREAD",
            "CURVE\t\t\tPRO_FEAT_CURVE",
            "SRF_MDL\t\tPRO_FEAT_SRF_MDL",
            "WALL\t\t\tPRO_FEAT_WALL",
            "BEND\t\t\tPRO_FEAT_BEND",
            "UNBEND\t\tPRO_FEAT_UNBEND",
            "CUT_SMT\t\tPRO_FEAT_CUT_SMT",
            "FORM\t\t\tPRO_FEAT_FORM",
            "THICKEN\t\tPRO_FEAT_THICKEN",
            "BEND_BACK\t\tPRO_FEAT_BEND_BACK",
            "UDF_NOTCH\t\tPRO_FEAT_UDF_NOTCH",
            "UDF_PUNCH\t\tPRO_FEAT_UDF_PUNCH",
            "INT_UDF\t\tPRO_FEAT_INT_UDF",
            "SPLIT_SURF\t\tPRO_FEAT_SPLIT_SURF",
            "GRAPH\t\t\tPRO_FEAT_GRAPH",
            "SMT_MFG_PUNCH\tPRO_FEAT_SMT_MFG_PUNCH",
            "SMT_MFG_CUT\t\tPRO_FEAT_SMT_MFG_CUT",
            "FLATTEN\t\tPRO_FEAT_FLATTEN",
            "SET\t\t\tPRO_FEAT_SET",
            "VDA\t\t\tPRO_FEAT_VDA",
            "SMT_MFG_FORM\tPRO_FEAT_SMT_MFG_FORM",
            "SMT_PUNCH_PNT\tPRO_FEAT_SMT_PUNCH_PNT",
            "LIP\t\t\tPRO_FEAT_LIP",
            "MANUAL\t\tPRO_FEAT_MANUAL",
            "MFG_GATHER\t\tPRO_FEAT_MFG_GATHER",
            "MFG_TRIM\t\tPRO_FEAT_MFG_TRIM",
            "MFG_USEVOL\t\tPRO_FEAT_MFG_USEVOL",
            "LOCATION\t\tPRO_FEAT_LOCATION",
            "CABLE_SEGM\t\tPRO_FEAT_CABLE_SEGM",
            "CABLE\t\t\tPRO_FEAT_CABLE",
            "CSYS\t\t\tPRO_FEAT_CSYS",
            "CHANNEL\t\tPRO_FEAT_CHANNEL",
            "WIRE_EDM\t\tPRO_FEAT_WIRE_EDM",
            "AREA_NIBBLE\t\tPRO_FEAT_AREA_NIBBLE",
            "PATCH\t\t\tPRO_FEAT_PATCH",
            "PLY\t\t\tPRO_FEAT_PLY",
            "CORE\t\t\tPRO_FEAT_CORE",
            "EXTRACT\t\tPRO_FEAT_EXTRACT",
            "MFG_REFINE\t\tPRO_FEAT_MFG_REFINE",
            "SILH_TRIM\t\tPRO_FEAT_SILH_TRIM",
            "SPLIT\t\t\tPRO_FEAT_SPLIT",
            "EXTEND\t\tPRO_FEAT_EXTEND",
            "SOLIDIFY\t\tPRO_FEAT_SOLIDIFY",
            "INTERSECT\t\tPRO_FEAT_INTERSECT",
            "ATTACH\t\tPRO_FEAT_ATTACH",
            "XSEC\t\t\tPRO_FEAT_XSEC",
            "UDF_ZONE\t\tPRO_FEAT_UDF_ZONE",
            "UDF_CLAMP\t\tPRO_FEAT_UDF_CLAMP",
            "DRL_GRP\t\tPRO_FEAT_DRL_GRP",
            "ISEGM\t\t\tPRO_FEAT_ISEGM",
            "CABLE_COSM\t\tPRO_FEAT_CABLE_COSM",
            "SPOOL\t\t\tPRO_FEAT_SPOOL",
            "COMPONENT\t\tPRO_FEAT_COMPONENT",
            "MFG_MERGE \t\tPRO_FEAT_MFG_MERGE ",
            "FIXSETUP\t\tPRO_FEAT_FIXSETUP",
            "FLAT_PAT\t\tPRO_FEAT_FLAT_PAT",
            "CONT_MAP\t\tPRO_FEAT_CONT_MAP",
            "EXP_RATIO\t\tPRO_FEAT_EXP_RATIO",
            "RIP\t\t\tPRO_FEAT_RIP",
            "OPERATION\t\tPRO_FEAT_OPERATION",
            "WORKCELL\t\tPRO_FEAT_WORKCELL",
            "CUT_MOTION\t\tPRO_FEAT_CUT_MOTION",
            "BLD_PATH\t\tPRO_FEAT_BLD_PATH",
            "CUSTOMIZE\t\tPRO_FEAT_CUSTOMIZE",
            "DRV_TOOL_SKETCH\tPRO_FEAT_DRV_TOOL_SKETCH",
            "DRV_TOOL_EDGE\tPRO_FEAT_DRV_TOOL_EDGE",
            "DRV_TOOL_CURVE\tPRO_FEAT_DRV_TOOL_CURVE",
            "DRV_TOOL_SURF\tPRO_FEAT_DRV_TOOL_SURF",
            "MAT_REMOVAL\t\tPRO_FEAT_MAT_REMOVAL",
            "TORUS\t\t\tPRO_FEAT_TORUS",
            "PIPE_SET_START\t\tPRO_FEAT_PIPE_SET_START",
            "PIPE_PNT_PNT\t\tPRO_FEAT_PIPE_PNT_PNT",
            "PIPE_EXT\t\tPRO_FEAT_PIPE_EXT",
            "PIPE_TRIM\t\tPRO_FEAT_PIPE_TRIM",
            "PIPE_FOLL\t\tPRO_FEAT_PIPE_FOLL",
            "PIPE_JOIN\t\tPRO_FEAT_PIPE_JOIN",
            "AUXILIARY\t\tPRO_FEAT_AUXILIARY",
            "PIPE_LINE\t\tPRO_FEAT_PIPE_LINE",
            "LINE_STOCK\t\tPRO_FEAT_LINE_STOCK",
            "SLD_PIPE\t\tPRO_FEAT_SLD_PIPE",
            "BULK_OBJECT\t\tPRO_FEAT_BULK_OBJECT",
            "SHRINKAGE\t\tPRO_FEAT_SHRINKAGE",
            "PIPE_JOINT\t\tPRO_FEAT_PIPE_JOINT",
            "PIPE_BRANCH\t\tPRO_FEAT_PIPE_BRANCH",
            "DRV_TOOL_TWO_CNTR\t\tPRO_FEAT_DRV_TOOL_TWO_CNTR",
            "SUBHARNESS\t\tPRO_FEAT_SUBHARNESS",
            "SMT_OPTIMIZE\t\tPRO_FEAT_SMT_OPTIMIZE",
            "DECLARE\t\tPRO_FEAT_DECLARE",
            "SMT_POPULATE\t\tPRO_FEAT_SMT_POPULATE",
            "OPER_COMP\t\tPRO_FEAT_OPER_COMP",
            "MEASURE\t\tPRO_FEAT_MEASURE",
            "DRAFT_LINE\t\tPRO_FEAT_DRAFT_LINE",
            "REMOVE_SURFS\t\tPRO_FEAT_REMOVE_SURFS",
            "RIBBON_CABLE\t\tPRO_FEAT_RIBBON_CABLE",
            "ATTACH_VOLUME\t\tPRO_FEAT_ATTACH_VOLUME",
            "BLD_OPERATION\t\tPRO_FEAT_BLD_OPERATION",
            "UDF_WRK_REG\t\tPRO_FEAT_UDF_WRK_REG",
            "SPINAL_BEND\t\tPRO_FEAT_SPINAL_BEND",
            "TWIST\t\t\tPRO_FEAT_TWIST",
            "FREE_FORM\t\t\tPRO_FEAT_FREE_FORM",
            "ZONE\t\t\tPRO_FEAT_ZONE",
            "WELDING_ROD\t\t\tPRO_FEAT_WELDING_ROD",
            "WELD_FILLET\t\t\tPRO_FEAT_WELD_FILLET",
            "WELD_GROOVE\t\t\tPRO_FEAT_WELD_GROOVE",
            "WELD_PLUG_SLOT\t\t\tPRO_FEAT_WELD_PLUG_SLOT",
            "WELD_SPOT\t\t\tPRO_FEAT_WELD_SPOT",
            "SMT_SHEAR\t\t\tPRO_FEAT_SMT_SHEAR",
            "PATH_SEGM\t\t\tPRO_FEAT_PATH_SEGM",
            "RIBBON_SEGM\t\t\tPRO_FEAT_RIBBON_SEGM",
            "RIBBON_PATH\t\t\tPRO_FEAT_RIBBON_PATH",
            "RIBBON_EXTEND\t\t\tPRO_FEAT_RIBBON_EXTEND",
            "ASMCUT_COPY\t\t\tPRO_FEAT_ASMCUT_COPY",
            "DEFORM_AREA\t\t\tPRO_FEAT_DEFORM_AREA",
            "RIBBON_SOLID\t\t\tPRO_FEAT_RIBBON_SOLID",
            "FLAT_RIBBON_SEGM\t\t\tPRO_FEAT_FLAT_RIBBON_SEGM",
            "POSITION_FOLD\t\t\tPRO_FEAT_POSITION_FOLD",
            "SPRING_BACK\t\t\tPRO_FEAT_SPRING_BACK",
            "BEAM_SECTION\t\t\tPRO_FEAT_BEAM_SECTION",
            "SHRINK_DIM\t\t\tPRO_FEAT_SHRINK_DIM",
            "THREAD\t\t\tPRO_FEAT_THREAD",
            "SMT_CONVERSION\t\t\tPRO_FEAT_SMT_CONVERSION",
            "CMM_MEASSTEP\t\t\tPRO_FEAT_CMM_MEASSTEP",
            "CMM_CONSTR\t\t\tPRO_FEAT_CMM_CONSTR",
            "CMM_VERIFY\t\t\tPRO_FEAT_CMM_VERIFY",
            "CAV_SCAN_SET\t\t\tPRO_FEAT_CAV_SCAN_SET",
            "CAV_FIT\t\t\tPRO_FEAT_CAV_FIT",
            "CAV_DEVIATION\t\t\tPRO_FEAT_CAV_DEVIATION",
            "SMT_ZONE\t\t\tPRO_FEAT_SMT_ZONE",
            "SMT_CLAMP\t\t\tPRO_FEAT_SMT_CLAMP",
            "PROCESS_STEP\t\t\tPRO_FEAT_PROCESS_STEP",
            "EDGE_BEND\t\t\tPRO_FEAT_EDGE_BEND",
            "DRV_TOOL_PROF\t\t\tPRO_FEAT_DRV_TOOL_PROF",
            "EXPLODE_LINE\t\t\tPRO_FEAT_EXPLODE_LINE",
            "GEOM_COPY\t\t\tPRO_FEAT_GEOM_COPY",
            "ANALYSIS\t\t\tPRO_FEAT_ANALYSIS",
            "WATER_LINE\t\t\tPRO_FEAT_WATER_LINE",
            "UDF_RMDT\t\t\tPRO_FEAT_UDF_RMDT",
            "VOL_SPLIT\t\t\tPRO_FEAT_VOL_SPLIT",
            "WLD_EDG_PREP\t\t\tPRO_FEAT_WLD_EDG_PREP",
            "SMM_OFFSET\t\t\tPRO_FEAT_SMM_OFFSET",
            "SMM_MATREM\t\t\tPRO_FEAT_SMM_MATREM",
            "SMM_COSMETIC\t\t\tPRO_FEAT_SMM_COSMETIC",
            "SMM_APPROACH\t\t\tPRO_FEAT_SMM_APPROACH",
            "SMM_SLOT\t\t\tPRO_FEAT_SMM_SLOT",
            "SMM_SHAPE\t\t\tPRO_FEAT_SMM_SHAPE",
            "IPM_QUILT\t\t\tPRO_FEAT_IPM_QUILT",
            "DRVD\t\t\tPRO_FEAT_DRVD",
            "SMT_CRN_REL\t\t\tPRO_FEAT_SMT_CRN_REL",
            "SLDBEND\t\t\tPRO_FEAT_SLDBEND",
            "FLATQLT\t\t\tPRO_FEAT_FLATQLT",
            "DRV_TOOL_TURN\t\t\tPRO_FEAT_DRV_TOOL_TURN",
            "GROUP_HEAD\t\t\tPRO_FEAT_GROUP_HEAD",
            "FR_SYS\t\t\tPRO_FEAT_FR_SYS",
            "HULL_COMPT\t\t\tPRO_FEAT_HULL_COMPT",
            "REFERENCE\t\t\tPRO_FEAT_REFERENCE",
            "SHELL_EXP\t\t\tPRO_FEAT_SHELL_EXP",
            "FREEFORM\t\t\tPRO_FEAT_FREEFORM",
            "KERNEL\t\t\tPRO_FEAT_KERNEL",
            "WELD_PROCESS\t\t\tPRO_FEAT_WELD_PROCESS",
            "HULL_REP_TMP\t\t\tPRO_FEAT_HULL_REP_TMP",
            "INSULATION\t\t\tPRO_FEAT_INSULATION",
            "SLD_PIP_INSUL\t\t\tPRO_FEAT_SLD_PIP_INSUL",
            "SMT_EXTRACT\t\t\tPRO_FEAT_SMT_EXTRACT",
            "ASSY_MERGE\t\t\tPRO_FEAT_ASSY_MERGE",
            "DS_OPTIMIZE\t\t\tPRO_FEAT_DS_OPTIMIZE",
            "COMP_INTERFACE\t\t\tPRO_FEAT_COMP_INTERFACE",
            "OLE\t\t\tPRO_FEAT_OLE",
            "TERMINATOR\t\t\tPRO_FEAT_TERMINATOR",
            "WLD_NOTCH\t\t\tPRO_FEAT_WLD_NOTCH",
            "ASSY_WLD_NOTCH\t\t\tPRO_FEAT_ASSY_WLD_NOTCH",
            "ROUTE_MANAGER\t\t\tPRO_FEAT_ROUTE_MANAGER",
            "HULL_WLD_NOTCH\t\t\tPRO_FEAT_HULL_WLD_NOTCH",
            "SMM_SLIT\t\t\tPRO_FEAT_SMM_SLIT",
            "SMM_HOLE\t\t\tPRO_FEAT_SMM_HOLE",
            "SMM_NEST\t\t\tPRO_FEAT_SMM_NEST",
            "SMM_GROOVE\t\t\tPRO_FEAT_SMM_GROOVE",
            "SMM_ETCH\t\t\tPRO_FEAT_SMM_ETCH",
            "ROUTE_PATH\t\t\tPRO_FEAT_ROUTE_PATH",
            "HULL_PLATE\t\t\tPRO_FEAT_HULL_PLATE",
            "HULL_HOLE\t\t\tPRO_FEAT_HULL_HOLE",
            "HULL_CUTOUT\t\t\tPRO_FEAT_HULL_CUTOUT",
            "HULL_STIFFENER\t\t\tPRO_FEAT_HULL_STIFFENER",
            "HULL_BEAM\t\t\tPRO_FEAT_HULL_BEAM",
            "HULL_ENDCUT\t\t\tPRO_FEAT_HULL_ENDCUT",
            "HULL_WLD_FLANGE\t\t\tPRO_FEAT_HULL_WLD_FLANGE",
            "HULL_COLLAR\t\t\tPRO_FEAT_HULL_COLLAR",
            "HULL_DRAW\t\t\tPRO_FEAT_HULL_DRAW",
            "HULL_BRACKET\t\t\tPRO_FEAT_HULL_BRACKET",
            "HULL_FOLDED_FLG\t\t\tPRO_FEAT_HULL_FOLDED_FLG",
            "HULL_BLOCK\t\t\tPRO_FEAT_HULL_BLOCK",
            "HULL_BLOCK_DEF\t\t\tPRO_FEAT_HULL_BLOCK_DEF",
            "HULL_SPLIT_BOUND\t\t\tPRO_FEAT_HULL_SPLIT_BOUND",
            "SUPERQUILT\t\t\tPRO_FEAT_SUPERQUILT",
            "MLD_SLIDER\t\t\tPRO_FEAT_MLD_SLIDER",
            "HULL_PAD\t\t\tPRO_FEAT_HULL_PAD",
            "ROUTE_SPOOL\t\t\tPRO_FEAT_ROUTE_SPOOL",
            "GLOBAL_MODEL\t\t\tPRO_FEAT_GLOBAL_MODEL",
            "HULL_MITRE\t\t\tPRO_FEAT_HULL_MITRE",
            "HULL_SLOTCUT\t\t\tPRO_FEAT_HULL_SLOTCUT",
            "PATTERN_HEAD\t\t\tPRO_FEAT_PATTERN_HEAD",
            "FLEX_MUTATOR\t\t\tPRO_FEAT_FLEX_MUTATOR",
            "ANNOTATION\t\t\tPRO_FEAT_ANNOTATION",
            "GR_REMOVE_SURFS\t\t\tPRO_FT_GR_REMOVE_SURFS",
            "GR_TAPER_EXTR\t\t\tPRO_FT_GR_TAPER_EXTR",
            "GR_TOOL_COMP\t\t\tPRO_FT_GR_TOOL_COMP",
            "GEN_MERGE\t\t\tPRO_FEAT_GEN_MERGE",
            "PM_DAMPER\t\t\tPRO_FEAT_PM_DAMPER",
            "PM_SPRING\t\t\tPRO_FEAT_PM_SPRING",
            "AUTO_ROUND\t\t\tPRO_FEAT_AUTO_ROUND",
            "DSGNT_AREA\t\t\tPRO_FEAT_DSGNT_AREA",
            "RM_SURF\t\t\tPRO_FEAT_RM_SURF",
            "ARTWORK\t\t\tPRO_FEAT_ARTWORK",
            "PM_BELT\t\t\tPRO_FEAT_PM_B "
        ],
        "description": "allfeattypesf "
    },
    "apcreatef": {
        "prefix": "apcreatef ",
        "body": [
            "! annotation_plane - matching to that of the existing driving annotation",
            "DECLARE_STRUCT ANNOTATION_PLANE_OPTION annotation_plane_struct",
            "\t\t",
            "\tannotation_plane_struct.type = \"NAMED_VIEW\" \t",
            "\t\tannotation_plane_struct.view_name = \t",
            "\t",
            "\tannotation_plane_struct.type = \"REFERENCE\" \t",
            "\t\tannotation_plane_struct.ref_plane = annotation_plane",
            "\t\t",
            "\tannotation_plane_struct.type = \"FLAT_TO_SCREEN_SCREEN_COORD\" \t",
            "\tannotation_plane_struct.type = \"FLAT_TO_SCREEN_GEOM_COORD\" \t",
            "\t",
            "CREATE_ANNOTATION_PLANE THIS annotation_plane_struct the_new_ap",
            "\t",
            "new_dim_props.annotation_plane = an_ae_plane",
            " "
        ],
        "description": "apcreatef "
    },
    "asmf": {
        "prefix": "asmf ",
        "body": [
            "BEGIN_ASM_DESCR",
            "",
            "\t$0",
            "",
            "END_ASM_DESCR "
        ],
        "description": "asmf "
    },
    "backupf": {
        "prefix": "backupf ",
        "body": [
            "! Clear the backup folder",
            "RESOLVE_PATH lib:work_dir backup_path",
            "RESOLVE_PATH lib:color_baseline.xlsx excel_path",
            "PRINT \"%\" \"/c cd \\\"\"+backup_path+\"\\\"\"+\" & del *.gif\"",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+backup_path+\"\\\"\"+\" & del * /Q\"",
            "PLUGIN SHOW ASYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c copy /Y \\\"\"+excel_path+\"\\\" \"+\"\\\"\"+backup_path+\"\\\"\" "
        ],
        "description": "backupf "
    },
    "callf": {
        "prefix": "callf ",
        "body": [
            "CALL_EX ",
            "\tVAR_IN VAR1 VAR1",
            "\tVAR_OUT VAR1 VAR1",
            "\tVAR_INOUT VAR1 VAR1",
            "END_CALL_EX "
        ],
        "description": "callf "
    },
    "checkeveryf": {
        "prefix": "checkeveryf ",
        "body": [
            "DECLARE_VARIABLE INTEGER COUNT 0",
            "FOR item REF REVERSE_ARRAY all_feats",
            "\tGET_FEATURE_SUBTYPE_NAME item sub_type",
            "\tSET_FEATURE_STATE FREEZE_DEPENDENT INDIV_GP_MEMBERS item SUPPRESSED ",
            "\tIF mod(count,5) == 0 ",
            "\t\tSTOP_EX",
            "\t\tREPAINT",
            "\tEND_IF",
            "\tcount++",
            "END_FOR "
        ],
        "description": "checkeveryf "
    },
    "cmdf": {
        "prefix": "cmdf ",
        "body": [
            "!-----------------------------------------------------",
            "! Call CMD Prompt",
            "GET_ENVIRONMENT_VARIABLE \"ComSpec\" ComSpec",
            "RESOLVE_PATH lib:software path",
            "DECLARE_VARIABLE STRING cmd_arg",
            "cmd_arg = \"/c cd \"+\"\\\"\"+path+\"\\\"\"",
            "cmd_arg += \" & \" + \"sqlite3 anno.db  \"",
            "cmd_arg += \"\\\"\"+\"create table tbl1(one text, two int);\" + \"\\\"\" + \" \"",
            "cmd_arg += \"\\\"\"+\".output test.txt\" + \"\\\"\" + \" \"",
            "cmd_arg += \"\\\"\"+\".tables\" + \"\\\"\" + \" \"",
            "cmd_arg += \"\\\"\"+\".save anno.db\" + \"\\\"\"",
            "PRINT \"%\" cmd_arg",
            "PLUGIN HIDE SYNC ComSpec cmd_arg",
            "",
            "!just deleting contents",
            "cmd_arg  = \"/c del /q  \\\"\"+the_file_spot+\"\\\"\"",
            "",
            "!other commands",
            "!mkdir",
            "!cd",
            "!del",
            "!rmdir",
            "!robocopy",
            "!xcopy",
            "!copy",
            "",
            "",
            "RESOLVE_PATH lib:sigma_commands\\html_config3 html_report_path    !placeholder name",
            "cmd_arg  = \"/c xcopy \\\"\"+html_report_path+\"\\\"\"+\" \"+\"\\\"\"+working_dir+report_folder+\"\\\" /E /Y\"",
            "! PRINT \"%\" cmd_arg",
            "PLUGIN HIDE SYNC comspec cmd_arg"
        ],
        "description": "cmdf "
    },
    "combviewannos": {
        "prefix": "combviewannos ",
        "body": [
            "",
            "! -----------------------------------------------------------------",
            "! Declare an array to carry the annotation plane references",
            "DECLARE_ARRAY comb_view_annotations",
            "",
            "! To gather annotation planes, lets work from the comb views",
            "GET_COMB_VIEWS THIS comb_views",
            "",
            "!for each comb view...",
            "FOR a_comb_view REF ARRAY comb_views",
            "",
            "\t! Lets grab the annotations ",
            "\tGET_COMB_VIEW_ANNOTATIONS THIS a_comb_view cv_annotations",
            "\t",
            "\t! For each annotation, lets get its annotation plane",
            "\tFOR an_annotation REF ARRAY cv_annotations",
            "\t\t",
            "\t\t! If we dont find it already in the array, lets add it (producing a distinct list)",
            "\t\tFIND_ARRAY_ELEM comb_view_annotations an_annotation index",
            "\t\tIF index == -1    ! AND REF_VALID ap_ref AND name <> \"UNKNOWN\"",
            "\t\t\tADD_ARRAY_ELEM comb_view_annotations an_annotation",
            "\t\tEND_IF",
            "\tEND_FOR",
            "END_FOR ",
            "",
            "! Here we can see we have all comb view annotations",
            "PRINT \"%\" comb_view_annotations$0 "
        ],
        "description": "combviewannos "
    },
    "commbf": {
        "prefix": "commbf ",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!  $0",
            "! ----------------------------------------------------------------------------------------------------- "
        ],
        "description": "commbf "
    },
    "commf": {
        "prefix": "commf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! $0 "
        ],
        "description": "commf "
    },
    "concatf": {
        "prefix": "concatf ",
        "body": [
            "!CONCAT FOR SQL SEARCH",
            "DECLARE_VARIABLE STRING in_string",
            "in_string = \"\"",
            "count = 0 ",
            "GET_ARRAY_SIZE dim_semantics num_semantics",
            "FOR item REF ARRAY dim_semantics",
            "\tIF count == num_semantics - 1",
            "\t\tin_string += \"\\'\" + item + \"\\'\"",
            "\tELSE ",
            "\t\tin_string += \"\\'\" + item + \"\\',\"",
            "\tEND_IF ",
            "\tcount++",
            "END_FOR "
        ],
        "description": "concatf "
    },
    "concatsimpf": {
        "prefix": "concatsimpf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! SIMPLE CONCATENATION OF ARRAY TO STRING",
            "DECLARE_VARIABLE STRING concat_string \"\"",
            "FOR item REF ARRAY table_schema",
            "\t\tconcat_string += \" \" + item + \" \"",
            "END_FOR "
        ],
        "description": "concatsimpf "
    },
    "convertreff": {
        "prefix": "convertreff ",
        "body": [
            "! -----------------------------------------------------------------",
            "! FOR PURPOSES OF THIS APP - MAKING IT CLOSER TO XML - CONVERT TO NON-USER SELECTED REF POSITIONS",
            "DECLARE_ARRAY working_surfaces ",
            "working_surfaces = surfaces ",
            "CLEAR_ARRAY surfaces",
            "FOR a_surface REF ARRAY working_surfaces",
            "\tGET_REF_ID a_surface surf_id ",
            "\tSEARCH_MDL_REF THIS SURFACE \"GID:\"+itos(surf_id) the_new_surf_ref ",
            "\tADD_ARRAY_ELEM surfaces the_new_surf_ref",
            "END_FOR "
        ],
        "description": "convertreff "
    },
    "createdefcsysf": {
        "prefix": "createdefcsysf ",
        "body": [
            "",
            "! -----------------------------------------------------------------",
            "! Getting first CSYS",
            "SEARCH_MDL_REF THIS CSYS \"*\" first_csys",
            "",
            "! -----------------------------------------------------------------",
            "! CALC TRANSFORM FROM DEFAULT OR NULL TO THIS FIRST CSYS",
            "CALC_TRANSFORMATION current_mdl first_csys transform",
            "PRINT \"%\" transform ",
            "",
            "",
            "! -----------------------------------------------------------------",
            "! ADD SOME LOGIC TO CHECK THIS PROGRAMMATICALLY AND ASSIGN A BOOL",
            "IF transform.trans_x <> 0 OR transform.trans_y <> 0 OR transform.trans_z <> 0 OR transform.rot_x <> 0 OR transform.rot_y <> 0 OR transform.rot_z <> 0",
            "\tPRINT \"NON DEFAULT FIRST CSYS\"",
            "\t",
            "\t! Select the starting csys. Oriented csys will create oriented bounding box",
            "\t! Generate struct to generate csys",
            "\tDECLARE_STRUCT GENERAL_CSYS_DATA  a_csys_option",
            "\t",
            "\t! Generate starting point for csys",
            "\tADD_ARRAY_ELEM a_csys_option.array_origin_references first_csys",
            "\ta_csys_option.offset_type =  \"CARTESIAN\"",
            "\ta_csys_option.offset.x = transform.trans_x",
            "\ta_csys_option.offset.y = transform.trans_y",
            "\ta_csys_option.offset.z = transform.trans_z",
            "\ta_csys_option.orient.x = transform.rot_x",
            "\ta_csys_option.orient.y = transform.rot_y",
            "\ta_csys_option.orient.z = transform.rot_z",
            "\t",
            "\t! Create a csys and then get its geom",
            "\tCREATE_GENERAL_CSYS THIS a_csys_option new_csys_feat",
            "\tGET_GEOM_FROM_FEATURE new_csys_feat CSYS the_csys",
            "\t",
            "\t",
            "ELSE ",
            "\tCOPY_REF first_csys the_csys",
            "",
            "END_IF  "
        ],
        "description": "createdefcsysf "
    },
    "createpointf": {
        "prefix": "createpointf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATE POINT FOR VISUALIZATION / TESTING ",
            "GET_ANNOTATION_POS a_dim dim_pos ",
            "SEARCH_MDL_REF THIS CSYS \"*\" the_csys",
            "DECLARE_STRUCT DTM_PNT_OFFSET_CSYS point_struct",
            "point_struct.offset_csys = the_csys",
            "CLEAR_ARRAY point_struct.array_points",
            "ADD_ARRAY_ELEM point_struct.array_points dim_pos",
            "CREATE_POINTS_EX THIS point_struct the_point_ref "
        ],
        "description": "createpointf "
    },
    "creatingsymf": {
        "prefix": "creatingsymf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! Declaring information for a symbol in the model",
            "DECLARE_STRUCT SYMBOL_OPTION symbol_option",
            "symbol_option.placement_type = \"FREE\"",
            "symbol_option.placement_pos.x = 100",
            "symbol_option.placement_pos.y = 0",
            "symbol_option.height = 20.0",
            "symbol_option.angle = 10.0",
            "symbol_option.copy_symbol = TRUE",
            "",
            "! Creating the symbol",
            "CREATE_SYMBOL THIS lib:legend.sym symbol_option new_symbol",
            "VAR_TEXT \"LABEL\" \"BIG\"",
            "END_CREATE_SYMBOL "
        ],
        "description": "creatingsymf "
    },
    "csysf": {
        "prefix": "csysf ",
        "body": [
            "! Select the starting csys. Oriented csys will create oriented bounding box",
            "SEARCH_MDL_REF THIS CSYS \"*\" sel_csys",
            "",
            "! Generate struct to generate csys",
            "DECLARE_STRUCT GENERAL_CSYS_DATA  a_csys_option",
            "",
            "! Generate starting point for csys",
            "ADD_ARRAY_ELEM a_csys_option.array_origin_references sel_csys",
            "a_csys_option.offset_type =  \"CARTESIAN\"",
            "a_csys_option.offset.x = 0",
            "a_csys_option.offset.y = 0",
            "a_csys_option.offset.z = 0",
            "a_csys_option.orient.x = 0",
            "a_csys_option.orient.y = 0",
            "a_csys_option.orient.z = 0",
            "",
            "! Create a csys and then get its geom",
            "CREATE_GENERAL_CSYS THIS a_csys_option new_csys_feat",
            "GET_GEOM_FROM_FEATURE new_csys_feat CSYS the_csys "
        ],
        "description": "csysf "
    },
    "date": {
        "prefix": "date ",
        "body": [
            "$CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR "
        ],
        "description": "date "
    },
    "dbviewerf": {
        "prefix": "dbviewerf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CALL THE DATABASE VIEWER",
            "DECLARE_VARIABLE STRING db_path \"\"",
            "DECLARE_VARIABLE STRING db_name \"MDL_DASHBOARD.db\"",
            "GET_WORKING_DIRECTORY work_dir ",
            "BUILD_FILE_NAME work_dir+\"temp_databases\" db_name \"\" db_path",
            "CALL lib:\\general_tools\\sqlite\\open_sqlite_viewer.tab  "
        ],
        "description": "dbviewerf "
    },
    "deleteafs": {
        "prefix": "deleteafs ",
        "body": [
            "SEARCH_MDL_REFS THIS FEATURE_TYPE ANNOTATION all_afs ",
            "FOR af REF ARRAY all_afs",
            "\tBEGIN_CATCH_ERROR",
            "\tDELETE_ANNOTATION_ELEMENTS af",
            "\tEND_CATCH_ERROR",
            "\tBEGIN_CATCH_ERROR",
            "\tREMOVE_FEATURE af",
            "\tEND_CATCH_ERROR",
            "END_FOR "
        ],
        "description": "deleteafs "
    },
    "demosetupf": {
        "prefix": "demosetupf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! � 2008-2021 SIGMAXIM, Inc.  All Rights Reserved.",
            "! -----------------------------------------------------------------",
            "! Creation :",
            "! Purpose : Demo setup",
            "! -----------------------------------------------------------------",
            "BEGIN_GUI_DESCR",
            "\tRADIOBUTTON_PARAM INTEGER demo_type PART ASSEMBLY",
            "END_GUI_DESCR",
            "",
            "BEGIN_ASM_DESCR",
            "",
            "\t!Declaration",
            "\tDECLARE_VARIABLE INTEGER demo_type 0",
            "\t",
            "\tDECLARE_VARIABLE STRING used_language \"\"",
            "\tDECLARE_VARIABLE STRING default_language \"english\"",
            "\t",
            "\t!Show GUI ",
            "\tCONFIG_ELEM",
            "",
            "\t!Configure display",
            "\tDISPLAY_DATUM AXES FALSE",
            "\tDISPLAY_DATUM POINTS FALSE",
            "\tDISPLAY_DATUM PLANES FALSE",
            "\tDISPLAY_DATUM CSYS FALSE",
            "\tDISPLAY_DATUM SPIN_CENTER FALSE",
            "\tDISPLAY_ANNOTATIONS TRUE",
            "",
            "\t",
            "\t!Add a search path",
            "\tADD_SEARCH_PATH \"lib:Models\"",
            "\t",
            "\t!Get the locale",
            "\tCLEAR_CATCH_ERROR",
            "",
            "\tBEGIN_CATCH_ERROR",
            "\t\tGET_ENVIRONMENT_VARIABLE \"LANG\" used_language",
            "\tEND_CATCH_ERROR",
            "",
            "\tIF ERROR",
            "\t\tused_language = mklower(default_language)",
            "\tEND_IF",
            "\t",
            "\t! SET_WORKING_DIRECTORY \"lib:work_dir\\\\\\\\\"",
            "\t! SET_WORKING_DIRECTORY \"C:\\Users\\info\\OneDrive\\1.ddc\\3. SIGMAXIM\\Working_Directory\\Demos\\1-Case_Demo\"",
            "\t",
            "\t!Open a model",
            "\tIF demo_type == 0",
            "\t\tRETRIEVE_MDL \"lib:models/nist_6.prt\" current_mdl",
            "\t\tSWITCH_TO_MDL current_mdl",
            "\tELSE_IF demo_type == 1",
            "\t\tRETRIEVE_MDL \"lib:models/nist_12.asm\" current_mdl",
            "\t\tSWITCH_TO_MDL current_mdl",
            "\tEND_IF",
            "\t",
            "\tRESOLVE_PATH lib:files recipe1_path",
            "\tRESOLVE_PATH \"lib:files\\\\\\\\export_pvs.rcp\" recipe2_path",
            "\t! PRINT \"%\" recipe1_path",
            "\t! PRINT \"%\" recipe2_path",
            "\tSET_CONFIG_OPTION \"intf_profile_dir\" recipe1_path",
            "\tSET_CONFIG_OPTION \"intf_out_pvs_recipe_file\" recipe2_path",
            "\tSET_CONFIG_OPTION \"intf_pv_recipe_dir\" recipe1_path",
            "\t",
            "\t",
            "\t! Clear the backup folder",
            "\tRESOLVE_PATH lib:work_dir backup_path",
            "\tRESOLVE_PATH lib:color_baseline.xlsx excel_path",
            "\tPRINT \"%\" \"/c cd \\\"\"+backup_path+\"\\\"\"+\" & del *.gif\"",
            "\tPLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+backup_path+\"\\\"\"+\" & del * /Q\"",
            "\tPLUGIN SHOW ASYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c copy /Y \\\"\"+excel_path+\"\\\" \"+\"\\\"\"+backup_path+\"\\\"\"",
            "\t",
            "\tPRINT \"Demo setup is completed\"",
            "\t",
            "\t!Activate window",
            "\tWINDOW_ACTIVATE",
            "",
            "END_ASM_DESCR",
            "",
            " "
        ],
        "description": "demosetupf "
    },
    "dimfeat": {
        "prefix": "dimfeat ",
        "body": [
            "! -----------------------------------------------------------------",
            "! FINDING THE FEATURE OWNER OF A DIMENSION",
            "USER_SELECT DIMENSION a_dim",
            "",
            "DECLARE_REFERENCE feature_owner_of_dim",
            "SEARCH_MDL_REFS THIS FEATURE \"*\" all_feats",
            "FOR a_feat REF ARRAY all_feats",
            "\tGET_FEATURE_DIMS a_feat dims",
            "\tFIND_ARRAY_ELEM dims a_dim index",
            "\tIF index <> -1 ",
            "\t\tCOPY_REF a_feat feature_owner_of_dim ",
            "\tEND_IF ",
            "END_FOR",
            "PRINT \"%\" feature_owner_of_dim "
        ],
        "description": "dimfeat "
    },
    "directory": {
        "prefix": "directory ",
        "body": [
            "$[![(key)DIRECTORY]!]  "
        ],
        "description": "directory "
    },
    "distarray": {
        "prefix": "distarray ",
        "body": [
            "DECLARE_ARRAY input_array",
            "DECLARE_ARRAY distinct_array",
            "GET_ARRAY_SIZE input_array item_count",
            "DECLARE_VARIABLE INTEGER count item_count-1",
            "FOR an_item REF REVERSE_ARRAY input_array",
            "\tFIND_ARRAY_ELEM input_array an_item index",
            "\tIF index <> count",
            "\t\tDELETE_ARRAY_ELEM input_array count",
            "\tEND_IF",
            "\tcount--",
            "END_FOR",
            "distinct_array = input_array",
            " "
        ],
        "description": "distarray "
    },
    "drivingdimf": {
        "prefix": "drivingdimf ",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!  IDENTIFY WHETHER DIM IS DRIVING OR DRIVEN ",
            "! -----------------------------------------------------------------------------------------------------",
            "",
            "DECLARE_VARIABLE STRING driving_dim_bool \"\"",
            "",
            "USER_SELECT DIMENSION a_dim",
            "",
            "GET_DIM_SETUP_TYPE a_dim dim_sub_type ",
            "",
            "IF dim_sub_type == \"REFERENCE\"!do sketch reference dimensions even show up at higher level?",
            "\tdriving_dim_bool = \"FALSE\"",
            "ELSE  !see if it is shown by seeing what feature it shows up under ",
            "\tGET_DIM_FEATURE a_dim dim_feature ",
            "\tGET_FEATURE_TYPE dim_feature feat_type",
            "",
            "\tIF REF_VALID dim_feature AND feat_type <> ANNOTATION",
            "\t\tdriving_dim_bool = \"TRUE\"",
            "\tELSE",
            "\t\tdriving_dim_bool = \"FALSE\"",
            "\tEND_IF ",
            "END_IF ",
            "",
            "",
            "",
            "! -----------------------------------------------------------------------------------------------------",
            "!  GET DRIVING DIMENSIONS IN THE MODEL ",
            "! -----------------------------------------------------------------------------------------------------",
            "SEARCH_MDL_REFS THIS DIMENSION \"*\" all_dimensions",
            "DECLARE_ARRAY driving_dimensions",
            "DECLARE_VARIABLE STRING driving_dim_bool",
            "",
            "FOR a_dimension REF ARRAY all_dimensions",
            "",
            "\tGET_DIM_SETUP_TYPE a_dimension dim_sub_type ",
            "\t",
            "\tIF dim_sub_type == \"REFERENCE\"!do sketch reference dimensions even show up at higher level?",
            "\t\tdriving_dim_bool = \"FALSE\"",
            "\tELSE  !see if it is shown by seeing what feature it shows up under ",
            "\t\tCLEAR_CATCH_ERROR",
            "\t\tBEGIN_CATCH_ERROR",
            "\t\tGET_DIM_FEATURE a_dimension dim_feature ",
            "\t\tGET_FEATURE_TYPE dim_feature feat_type",
            "\t",
            "\t\tIF REF_VALID dim_feature AND feat_type <> ANNOTATION",
            "\t\t\tdriving_dim_bool = \"TRUE\"",
            "\t\tELSE",
            "\t\t\tdriving_dim_bool = \"FALSE\"",
            "\t\tEND_IF\t\t\t",
            "\t\tEND_CATCH_ERROR",
            "",
            "\t\t",
            "",
            "\tEND_IF ",
            "\t",
            "\tIF driving_dim_bool == \"TRUE\" ",
            "\t\tFIND_ARRAY_ELEM driving_dimensions a_dimension index ",
            "\t\tIF index == -1",
            "\t\t\tADD_ARRAY_ELEM driving_dimensions a_dimension",
            "\t\tEND_IF",
            "\tEND_IF",
            "",
            "",
            "END_FOR",
            "",
            "REPAINT ",
            "FOR item REF ARRAY driving_dimensions",
            "\tSHOW_DIM item",
            "\tHIGHLIGHT_REF item",
            "END_FOR",
            "STOP_EX ",
            "",
            "",
            "",
            "",
            "",
            " "
        ],
        "description": "drivingdimf "
    },
    "dynamicguilistf": {
        "prefix": "dynamicguilistf ",
        "body": [
            "! CREATING A DYNAMICALLY POPULATED LIST IN A GUI - BASED ON WHAT EXISTS - IN A FOLDER (DRW IN THIS EXAMPLE)",
            "",
            "BEGIN_GUI_DESCR",
            "",
            "\t! -----------------------------------------------------------------",
            "\t! GIVE OPTION OF TEST MODELS",
            "\tUSER_LIST_BOX drw_names_array chosen_models USE_VALUE chosen_mdl USE_INDEX chose_mdl_index VISIBLE_LINES 15",
            "\t",
            "END_GUI_DESCR",
            "",
            "BEGIN_ASM_DESCR",
            "",
            "\t! -----------------------------------------------------------------",
            "\t! BACKUP A FOLDER ",
            "\tRESOLVE_PATH lib:work_dir backup_path",
            "\tPRINT \"%\" backup_path",
            "\tRESOLVE_PATH lib:models the_models_path",
            "\tPLUGIN HIDE SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c cd \\\"\"+backup_path+\"\\\"\"+\" & del * /Q\"",
            "\tPLUGIN HIDE SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c xcopy /Y \\\"\"+the_models_path+\"\\\" \"+\"\\\"\"+backup_path+\"\\\"\"",
            "\t",
            "\t! -----------------------------------------------------------------",
            "\t! READ THE FILES",
            "\tREAD_DIRECTORY backup_path+ \"*.drw\" drw_names_array",
            "\t",
            "\t! -----------------------------------------------------------------",
            "\t! GUI",
            "\tCONFIG_ELEM",
            "",
            "\t! -----------------------------------------------------------------",
            "\t! RETRIEVE THE MDL ONTO THE SCREEN",
            "\tRETRIEVE_MDL backup_path+\"\\\\\\\\\"+chosen_mdl the_new_mdl",
            "\tSWITCH_TO_MDL the_new_mdl  "
        ],
        "description": "dynamicguilistf "
    },
    "errorf": {
        "prefix": "errorf ",
        "body": [
            "CLEAR_CATCH_ERROR",
            "BEGIN_CATCH_ERROR",
            "$0",
            "END_CATCH_ERROR",
            " "
        ],
        "description": "errorf "
    },
    "evaluate": {
        "prefix": "evaluate ",
        "body": [
            "$[![(eva)$[![{type a math expression (e.g. 1+1) and hit TAB}]!]]!] "
        ],
        "description": "evaluate "
    },
    "excel_col": {
        "prefix": "excel_col ",
        "body": [
            "EXCEL_CONNECT",
            "",
            "EXCEL_LOAD_DOCUMENT @\"C:\\Users\\info\\OneDrive\\1.ddc\\3. SIGMAXIM\\Library\\CURRENT\\Component_engine\\CUSTOMER\\FESTO\\Sigmaxim-Liste.xlsx\"",
            "EXCEL_ACTIVATE_SHEET SHEET_BY_NAME \"TABELLE1\"",
            "",
            "EXCEL_GET_ACTIVE_RANGE rmin rmax colmin colmax",
            "EXCEL_GET_STRINGS CELL_BY_INDEX rmin 0 CELL_BY_INDEX rmax 0 part_names_arrays",
            "",
            "EXCEL_DISCONNECT",
            "",
            "PRINT \"%\" part_names_arrays",
            "",
            "GET_COL_ARRAY part_names_arrays 2 part_names  "
        ],
        "description": "excel_col "
    },
    "excelbuffread": {
        "prefix": "excelbuffread ",
        "body": [
            "IF EXCEL_CONNECTED",
            "\tEXCEL_DISCONNECT",
            "END_IF ",
            "",
            "EXCEL_START INVISIBLE",
            "EXCEL_LOAD_DOCUMENT lib:models_database_ceiling.xlsx",
            "EXCEL_ACTIVATE_SHEET SHEET_BY_NAME \"model_information\"",
            "EXCEL_CLEAR_BUFFER",
            "EXCEL_UPDATE_BUFFER EXCEL_TO_BUFFER",
            "EXCEL_GET_ACTIVE_RANGE rf rt cf ct",
            "EXCEL_DISCONNECT",
            "",
            "!Processing the information obtained in excel for each model ",
            "DECLARE_VARIABLE INTEGER cr 1 !row",
            "DECLARE_VARIABLE INTEGER count 0",
            "",
            "WHILE cr <= rt  !while the row variable is less than the max row of the excel database",
            "",
            "\t! Grab the information for the model of this row",
            "\tEXCEL_GET_VALUE_BUFFER CELL_BY_INDEX cr 0 a",
            "\tEXCEL_GET_VALUE_BUFFER CELL_BY_INDEX cr 1 b",
            "\tEXCEL_GET_VALUE_BUFFER CELL_BY_INDEX cr 2 c",
            "\tEXCEL_GET_VALUE_BUFFER CELL_BY_INDEX cr 3 d",
            "\tEXCEL_GET_VALUE_BUFFER CELL_BY_INDEX cr 4 e",
            "\tEXCEL_GET_VALUE_BUFFER CELL_BY_INDEX cr 6 f",
            "\tcr++",
            "END_WHILE "
        ],
        "description": "excelbuffread "
    },
    "exitwarnf": {
        "prefix": "exitwarnf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! EARLY EXIT FOR NON-DRW MDL TYPE",
            "IF mdl_extension <> \"drw\" OR NOT CURRENT_MDL_AVAILABLE",
            "\tDECLARE_ARRAY arrayButtons",
            "\tADD_ARRAY_ELEM arrayButtons \"EXIT\"",
            "\tMESSAGE_BOX_EX ERROR \"DRW BOC ID CLEAN-UP\" \"PLEASE OPEN A DRAWING.\" arrayButtons paramChoice",
            "\t",
            "\t! -----------------------------------------------------------------",
            "\t! Work with message box choices",
            "\tIF paramChoice == 1 OR paramChoice <> 1 ",
            "\t\tEXIT",
            "\tEND_IF",
            "\tCLEAR_ARRAY arrayButtons",
            "END_IF "
        ],
        "description": "exitwarnf "
    },
    "fidf": {
        "prefix": "fidf ",
        "body": [
            "! fidf",
            "GET_REF_ID anno_plane_ref id",
            "PRINT \"%\" anno_plane_ref",
            "PRINT \"%\" id",
            "id--",
            "SEARCH_MDL_REF THIS FEATURE \"FID:\"+itos(id) anno_plane_ref",
            "PRINT \"%\" anno_plane_ref "
        ],
        "description": "fidf "
    },
    "filename": {
        "prefix": "filename ",
        "body": [
            "$[![(key)FILENAME]!]$[![(key)EXTNAME]!] "
        ],
        "description": "filename "
    },
    "findelemf": {
        "prefix": "findelemf ",
        "body": [
            "FIND_ARRAY_ELEM bordering_surfs surface_1 index1 ",
            "IF index1 == -1",
            "\tADD_ARRAY_ELEM bordering_surfs surface_1",
            "END_IF "
        ],
        "description": "findelemf "
    },
    "findmaxminf": {
        "prefix": "findmaxminf ",
        "body": [
            "DECLARE_VARIABLE DOUBLE min_sf_val",
            "DECLARE_VARIABLE DOUBLE max_sf_val",
            "FOR item REF ARRAY array$0",
            "\tIF surffinish_val > max_sf_val",
            "\t\tmax_sf_val = surffinish_val",
            "\tEND_IF ",
            "\tIF surffinish_val < min_sf_val",
            "\t\tmin_sf_val = surffinish_val",
            "\tEND_IF\t",
            "\t",
            "END_FOR",
            " "
        ],
        "description": "findmaxminf "
    },
    "forf": {
        "prefix": "forf ",
        "body": [
            "FOR item REF ARRAY array$0",
            "",
            "",
            "END_FOR "
        ],
        "description": "forf "
    },
    "getcolorf": {
        "prefix": "getcolorf ",
        "body": [
            "USER_SELECT SURFACE | SYMBOL | GTOL | DIMENSION item ",
            "GET_COLOR item r g b ",
            "MESSAGE_BOX \"COLOR REPORT:\\nRED: \"+itos(r)+\"\\nGREEN: \"+itos(g)+\"\\nBLUE: \"+itos(b) "
        ],
        "description": "getcolorf "
    },
    "getmapf": {
        "prefix": "getmapf ",
        "body": [
            "FOR item REF ARRAY matches",
            "\t! PRINT \"%\" ITEM",
            "\tBEGIN_CATCH_ERROR",
            "\tGET_MAP_ELEM sym_to_text item.text the_match",
            "\tPRINT \"%\" the_match",
            "\tEND_CATCH_ERROR",
            "END_FOR",
            " "
        ],
        "description": "getmapf "
    },
    "gidsearch": {
        "prefix": "gidsearch ",
        "body": [
            "! -----------------------------------------------------------------",
            "! GID based search",
            "GET_REF_ID annot_plane annot_plane_id",
            "SEARCH_MDL_REF ASSEMBLY PLANE gid:+itos(annot_plane_id) annot_plane "
        ],
        "description": "gidsearch "
    },
    "graphsort1f": {
        "prefix": "graphsort1f ",
        "body": [
            "! -----------------------------------------------------------------",
            "!graph style sort - recursive, looks for yes somewhere and all upper levels inherit",
            "! from master program ",
            "! -----------------------------------------------------------------",
            "! Get the folders that need a sel_list",
            "INCLUDE lib:folders_that_need_sel_list_hide.tab",
            "",
            "",
            "\t! next level in ",
            "\t",
            "\t\t! DECLARATIONS",
            "\t\tDECLARE_ARRAY SEL_LIST_ARRAY",
            "\t\tDECLARE_ARRAY tab_files",
            "",
            "\t\t! GET A DOUBLES ARRAY OF ALL FOLDER RELATIONS",
            "\t\tINCLUDE lib:sa_file_diagnost_sel_list_HIDE.tab",
            "\t\t\t\t",
            "\t\t\t! next level in ",
            "\t\t\tDECLARE_VARIABLE STRING start_folder",
            "\t\t\tDECLARE_ARRAY folder_paths_array",
            "\t\t\t! DECLARE_VARIABLE STRING folder_name",
            "\t\t\tDECLARE_VARIABLE STRING folder_name_path",
            "\t\t\tDECLARE_ARRAY sub_array",
            "\t\t\tDECLARE_ARRAY doubles_array",
            "\t\t\t! DECLARE_ARRAY sel_list_array",
            "",
            "\t\t\tIF NOT PARAM_VALID start_folder",
            "\t\t\t\tCHOOSE_PATH \"lib:\\\\\\\\\" start_folder",
            "\t\t\t\t! PRINT \"%\" start_folder",
            "\t\t\t\t! ADD_ARRAY_ELEM folder_paths_array start_folder",
            "\t\t\t\tcount = 0\t",
            "\t\t\tEND_IF",
            "",
            "\t\t\tcount++",
            "",
            "\t\t\tREAD_SUBDIRECTORIES start_folder arr_folders",
            "",
            "\t\t\tIF NOT ARRAY_EMPTY arr_folders",
            "\t\t\t\tFOR a_folder REF ARRAY arr_folders",
            "\t\t\t\t\t! folder_name = a_folder",
            "\t\t\t\t\tfolder_name_path = start_folder+\\+a_folder",
            "\t\t\t\t\t! PRINT \"%\" folder_name_path",
            "\t\t\t\t\t! ADD_ARRAY_ELEM folder_names_array folder_name",
            "\t\t\t\t\tADD_ARRAY_ELEM sub_array count",
            "\t\t\t\t\tADD_ARRAY_ELEM sub_array start_folder",
            "\t\t\t\t\tADD_ARRAY_ELEM sub_array folder_name_path",
            "\t\t\t\t\tADD_ARRAY_ELEM doubles_array sub_array",
            "\t\t\t\t\tCLEAR_ARRAY sub_array",
            "\t\t\t\t\tCALL_EX lib:sa_file_diagnost_sel_list_HIDE.tab",
            "\t\t\t\t\t\tVAR_IN folder_name_path start_folder",
            "\t\t\t\t\t\tVAR_INOUT folders_array folders_array",
            "\t\t\t\t\t\tVAR_INOUT doubles_array doubles_array",
            "\t\t\t\t\t\tVAR_IN count count",
            "\t\t\t\t\tEND_CALL_EX",
            "\t\t\t\tEND_FOR",
            "\t\t\tEND_IF",
            "",
            "\t! SORT THE ARRAY TO GO FROM DEEPEST TO SHALLOWEST FOLDER LEVELS",
            "\tSORT_ARRAY DESCENDING doubles_array",
            "",
            "\t! GO THROUGH THE DOUBLES TO INHERIT THE YES",
            "\tFOR a_double REF ARRAY doubles_array",
            "\t\t",
            "\t\t! GET THE TARGET",
            "\t\tGET_ARRAY_ELEM a_double 2 the_target ",
            "\t\t",
            "\t\t! GET THE SOURCE",
            "\t\tGET_ARRAY_ELEM a_double 1 the_source ",
            "\t\t",
            "\t\t! TEST IF IT IS ALREADY A YES",
            "\t\tFIND_ARRAY_ELEM sel_list_array the_target find_index1",
            "\t\t",
            "\t\tCLEAR_ARRAY tab_files",
            "\t\t",
            "\t\t! NOT YET A YES - CHECK IF IT SHOULD BE",
            "\t\tIF find_index1 == -1 ",
            "\t\t\tREAD_DIRECTORY the_target \"*.tab\" tab_files ",
            "\t\t\t",
            "\t\t\tIF NOT ARRAY_EMPTY tab_files",
            "\t\t\t\tADD_ARRAY_ELEM sel_list_array the_target ",
            "\t\t\t\t",
            "\t\t\t\t! TEST IF IT IS ALREADY A YES",
            "\t\t\t\tFIND_ARRAY_ELEM sel_list_array the_source find_index2 ",
            "\t\t\t\t",
            "\t\t\t\t! NOT YET A YES - CHECK IF IT SHOULD BE",
            "\t\t\t\tIF find_index2 == -1 ",
            "\t\t\t\t\tADD_ARRAY_ELEM sel_list_array the_source",
            "\t\t\t\tEND_IF ",
            "\t\t\tEND_IF",
            "\t\t\t",
            "\t\t! IT WAS A YES; SO ADD THE SOURCE IF NOT THERE",
            "\t\tELSE",
            "\t\t\t! TEST IF IT IS ALREADY A YES",
            "\t\t\tFIND_ARRAY_ELEM sel_list_array the_source find_index3",
            "\t\t\t",
            "\t\t\t! NOT YET A YES - CHECK IF IT SHOULD BE",
            "\t\t\tIF find_index3 == -1 ",
            "\t\t\t\tADD_ARRAY_ELEM sel_list_array the_source",
            "\t\t\tEND_IF ",
            "\t\tEND_IF",
            "\t\t",
            "\tEND_FOR "
        ],
        "description": "graphsort1f "
    },
    "gtolrefansysf": {
        "prefix": "gtolrefansysf ",
        "body": [
            "",
            "",
            "\t! READ_GTOL_CREO4 a_gtol gtol2",
            "\t\t! !THIS IS A REPEAT OF ABOVE BUT SAVES REWRITING FOR NOW",
            "\t\t",
            "\t\t",
            "\t! DECLARE_VARIABLE STRING ref_list !IDS?",
            "\t! DECLARE_VARIABLE STRING ref_types !TYPES - DIM, gtol, surf, edges, general",
            "",
            "\t! !first layers of references of the gtol",
            "\t! IF PARAM_VALID gtol2.placement.placement_type AND gtol2.placement.placement_type <> \"\"",
            "\t\t! ! PRINT \"TEST INFO - PLACEMENT_TYPE %\" gtol2.placement.placement_type",
            "\t\t! IF gtol2.placement.placement_type == ANNOTATION !dim or gtol?",
            "\t\t\t! ! PRINT \"%\" gtol2.placement.placement_ref",
            "\t\t\t! GET_REF_TYPE gtol2.placement.placement_ref anno_type",
            "\t\t\t",
            "\t\t\t! IF anno_type == \"GTOL\"",
            "\t\t\t\t! ref_types = ref_types + \"(GTOL:\"",
            "\t\t\t\t! !INSERT WHOLE THING AGAIN - MULTIPLE LAYERS - although - it doesnt flow through more than one other gtol - if directly attached to geo (or several composite)",
            "\t\t\t\t! READ_GTOL_CREO4 gtol2.placement.placement_ref gtol3  \t\t\t",
            "\t\t\t\t! IF PARAM_VALID gtol3.placement.placement_type AND gtol3.placement.placement_type <> \"\"",
            "\t\t\t\t\t! ! PRINT \"TEST INFO - PLACEMENT_TYPE %\" gtol3.placement.placement_type",
            "\t\t\t\t\t! ! IF gtol3.placement.placement_type == ANNOTATION !dim or gtol?",
            "\t\t\t\t\t\t! ! PRINT \"%\" gtol3.placement.placement_ref",
            "\t\t\t\t\t\t! ! GET_REF_TYPE gtol3.placement.placement_ref anno_type",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t! ! IF anno_type == \"GTOL\"",
            "\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(GTOL:\"",
            "\t\t\t\t\t\t\t! ! !INSERT WHOLE THING AGAIN - MULTIPLE LAYERS",
            "\t\t\t\t\t\t\t! ! READ_GTOL_CREO4 gtol3.placement.placement_ref gtol4 \t\t\t",
            "\t\t\t\t\t\t\t! ! IF PARAM_VALID gtol4.placement.placement_type AND gtol4.placement.placement_type <> \"\"",
            "\t\t\t\t\t\t\t\t! ! ! PRINT \"TEST INFO - PLACEMENT_TYPE %\" gtol4.placement.placement_type",
            "\t\t\t\t\t\t\t\t! ! IF gtol4.placement.placement_type == ANNOTATION !dim or gtol?",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" gtol4.placement.placement_ref",
            "\t\t\t\t\t\t\t\t\t! ! GET_REF_TYPE gtol4.placement.placement_ref anno_type",
            "\t\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\t\t! ! IF anno_type == \"GTOL\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(GTOL:\"",
            "\t\t\t\t\t\t\t\t\t\t! ! !INSERT WHOLE THING AGAIN - MULTIPLE LAYERS",
            "",
            "\t\t\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\t\t! ! ELSE_IF anno_type == \"DIMENSION\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(DIM:\"",
            "\t\t\t\t\t\t\t\t\t\t! ! READ_DIM_ANNOTATION gtol4.placement.placement_ref dim_read",
            "\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" dim_read.array_references",
            "\t\t\t\t\t\t\t\t\t\t! ! FOR ref_id_n REF ARRAY dim_read.array_references",
            "\t\t\t\t\t\t\t\t\t\t\t! ! !adding further id to list - is ref_id_n an id? should be",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ref_list = ref_list + \"(\" + ref_id_n + \")\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! !adding the sub type to list",
            "\t\t\t\t\t\t\t\t\t\t\t! ! GET_REF_TYPE ref_id_n ref_type",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" ref_type",
            "\t\t\t\t\t\t\t\t\t\t\t! ! IF ref_type == SURFACE  !\"SOME functs return info directly\"",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! GET_SURFACE_TYPE ref_id_n typ_surf",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" typ_surf",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + typ_surf + \")\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ELSE_IF ref_type == EDGE  ",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ! GET_EDGE_TYPE ref_id_n typ_edge",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" typ_edge",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + ref_type + \")\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ELSE_IF ref_type == CURVE ",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ! GET_CURVE_TYPE ref_id_n typ_curve",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" typ_curve",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + ref_type + \")\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ELSE_IF ref_type == UNKNOWN ",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(SILH_EDGE)\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(UNKNOWN)\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t\t\t\t\t! ! END_FOR",
            "\t\t\t\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(OTHER_ANNO)\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"UNKNOWN ANNOTATION\"",
            "\t\t\t\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == LEADERS !directly attached\t",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(LEAD:\"",
            "\t\t\t\t\t\t\t\t\t! ! PRINT \"LEADER\"",
            "\t\t\t\t\t\t\t\t\t! !for directly attached gtols - gives the leader placement surf(s)",
            "\t\t\t\t\t\t\t\t\t! ! FOR gtol_ref REF ARRAY gtol4.placement.array_leaders",
            "\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"GTOL REF %\" gtol_ref.placement_ref!returns nothing when attached to dim",
            "\t\t\t\t\t\t\t\t\t\t! ! ref_list = ref_list + \"(\" + gtol_ref.placement_ref + \")\"",
            "\t\t\t\t\t\t\t\t\t\t! ! GET_REF_TYPE gtol_ref.placement_ref feat_type",
            "\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"FEAT TYPE %\" feat_type",
            "\t\t\t\t\t\t\t\t\t\t! ! IF feat_type == SURFACE  !\"SOME functs return info directly\"",
            "\t\t\t\t\t\t\t\t\t\t\t! ! GET_SURFACE_TYPE gtol_ref.placement_ref typ_surf",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ! PRINT \"TYP SURF: %\" typ_surf",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + typ_surf + \")\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ELSE_IF feat_type == EDGE  ",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ! GET_EDGE_TYPE gtol_ref.placement_ref typ_edge",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + feat_type + \")\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ELSE_IF feat_type == CURVE ",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ! GET_CURVE_TYPE gtol_ref.placement_ref typ_curve",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + feat_type + \")\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ELSE_IF feat_type == UNKNOWN ",
            "\t\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(SILH_EDGE)\"",
            "\t\t\t\t\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(UNKNOWN)\"",
            "\t\t\t\t\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t\t\t\t! ! END_FOR",
            "\t\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == DATUMS ",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(DATUM:\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"DATUM\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == FREE",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(FREE:\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"FREE\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == ANNOTATION_ELBOW",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(ELBOW:\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"ELBOW\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == OFFSET",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(OFFSET)\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"OFFSET\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == MAKE_DIM",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(MAKE_DIM:\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"MAKE_DIM\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF gtol4.placement.placement_type == DEFAULT",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(DEFAULT:\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"DEFAULT\"",
            "\t\t\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(UNK_REF_TYPE)\"",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"UNKNOWN\"",
            "\t\t\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(NOT_VALID)\"",
            "\t\t\t\t\t\t\t! ! ! PRINT \"PLACEMENT REF NOT VALID?\"",
            "",
            "\t\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t! ! ELSE_IF anno_type == \"DIMENSION\"",
            "\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(DIM:\"",
            "\t\t\t\t\t\t\t! ! READ_DIM_ANNOTATION gtol3.placement.placement_ref dim_read",
            "\t\t\t\t\t\t\t! ! ! PRINT \"%\" dim_read.array_references",
            "\t\t\t\t\t\t\t! ! FOR ref_id_n REF ARRAY dim_read.array_references",
            "\t\t\t\t\t\t\t\t! ! !adding further id to list - is ref_id_n an id? should be",
            "\t\t\t\t\t\t\t\t! ! ref_list = ref_list + \"(\" + ref_id_n + \")\"",
            "\t\t\t\t\t\t\t\t! ! !adding the sub type to list",
            "\t\t\t\t\t\t\t\t! ! GET_REF_TYPE ref_id_n ref_type",
            "\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" ref_type",
            "\t\t\t\t\t\t\t\t! ! IF ref_type == SURFACE  !\"SOME functs return info directly\"",
            "\t\t\t\t\t\t\t\t\t! ! GET_SURFACE_TYPE ref_id_n typ_surf",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" typ_surf",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + typ_surf + \")\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF ref_type == EDGE  ",
            "\t\t\t\t\t\t\t\t\t! ! ! GET_EDGE_TYPE ref_id_n typ_edge",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" typ_edge",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + ref_type + \")\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF ref_type == CURVE ",
            "\t\t\t\t\t\t\t\t\t! ! ! GET_CURVE_TYPE ref_id_n typ_curve",
            "\t\t\t\t\t\t\t\t\t! ! ! PRINT \"%\" typ_curve",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(\" + ref_type + \")\"",
            "\t\t\t\t\t\t\t\t! ! ELSE_IF ref_type == UNKNOWN ",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(SILH_EDGE)\"",
            "\t\t\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(UNKNOWN)\"",
            "\t\t\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t\t! ! END_FOR",
            "\t\t\t\t\t\t! ! ELSE",
            "\t\t\t\t\t\t\t! ! ref_types = ref_types + \"(OTHER_ANNO)\"",
            "\t\t\t\t\t\t\t! ! ! PRINT \"UNKNOWN ANNOTATION\"",
            "\t\t\t\t\t\t! ! END_IF",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t! IF gtol3.placement.placement_type == LEADERS !directly attached",
            "\t\t\t\t\t\t! ref_types = ref_types + \"(LEAD:\"",
            "\t\t\t\t\t\t! ! PRINT \"LEADER\"",
            "\t\t\t\t\t\t! !for directly attached gtols - gives the leader placement surf(s)",
            "\t\t\t\t\t\t! FOR gtol_ref REF ARRAY gtol3.placement.array_leaders",
            "\t\t\t\t\t\t\t! ! PRINT \"GTOL REF %\" gtol_ref.placement_ref!returns nothing when at "
        ],
        "description": "gtolrefansysf "
    },
    "guif": {
        "prefix": "guif ",
        "body": [
            "BEGIN_GUI_DESCR",
            "\t$0",
            "END_GUI_DESCR "
        ],
        "description": "guif "
    },
    "head": {
        "prefix": "head ",
        "body": [
            "! -----------------------------------------------------------------",
            "! © 2008-2021 SIGMAXIM, Inc.  All Rights Reserved.",
            "! -----------------------------------------------------------------",
            "! Creation : $CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR - cstjohn@sigmaxim.com",
            "! Purpose :",
            "! -----------------------------------------------------------------",
            "$0 "
        ],
        "description": "head "
    },
    "headf": {
        "prefix": "headf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! © 2008-2021 SIGMAXIM, Inc.  All Rights Reserved.",
            "! -----------------------------------------------------------------",
            "! Creation : $CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR - cstjohn@sigmaxim.com",
            "! Purpose : $1 ",
            "! -----------------------------------------------------------------",
            "$0 "
        ],
        "description": "headf "
    },
    "highf": {
        "prefix": "highf ",
        "body": [
            "REPAINT ",
            "FOR item REF ARRAY all_dim_refs",
            "\tHIGHLIGHT_REF item",
            "END_FOR",
            "STOP_EX  "
        ],
        "description": "highf "
    },
    "highself": {
        "prefix": "highself ",
        "body": [
            "! -----------------------------------------------------------------",
            "! HIGHLIGHT AND SELECT FOR FEEDBACK",
            "REPAINT ",
            "CLEAR_SELBUFFER",
            "FOR item REF ARRAY TEMP_REF_ARRAY",
            "\tHIGHLIGHT_REF item",
            "END_FOR",
            "ADD_SELBUFFER TEMP_REF_ARRAY",
            "STOP_EX  "
        ],
        "description": "highself "
    },
    "htmlreportf": {
        "prefix": "htmlreportf ",
        "body": [
            "! -----------------------------------------------------------------",
            "!  POSTING TO HTML REPORT",
            "! CREATE HOLDING ARRAY WITH CONTROLLED NAME",
            "DECLARE_ARRAY report_data_array",
            "! CREATE HOLDING MAPS FOR DIFFERENT CHECKS",
            "DECLARE_MAP STRING report_data_map",
            "ADD_MAP_ELEM report_data_map \"GTOL_CHECK1\" \"GP50\"",
            "! ADD THE MAPS TO THE ARRAY",
            "ADD_ARRAY_ELEM report_data_array report_data_map",
            "! RUN THE REPORT",
            "CALL_EX lib:\\sigma_commands\\html_report.tab",
            "\tVAR_IN report_data_array report_data_array",
            "END_CALL_EX",
            " "
        ],
        "description": "htmlreportf "
    },
    "iff": {
        "prefix": "iff ",
        "body": [
            "IF $0",
            "",
            "END_IF "
        ],
        "description": "iff "
    },
    "isoindicf": {
        "prefix": "isoindicf ",
        "body": [
            "USER_SELECT GTOL a_gtol ",
            "",
            "DECLARE_STRUCT GTOL_CREO4_INDICATOR a_indicator",
            "a_indicator.type = DIRECTION_FEATURE ! COLLECTION_PLANE INTERSECTION_PLANE ORIENTATION_PLANE",
            "a_indicator.symbol = ANGULARITY !PERPENDICULARITY PARALLELISM SYMMETRY",
            "a_indicator.datum = \"A\"",
            "",
            "READ_GTOL_CREO4 a_gtol read_gtol",
            " PRINT \"%\" read_gtol",
            " ADD_ARRAY_ELEM read_gtol.array_indicators a_indicator",
            "MODIFY_GTOL_CREO4 a_gtol read_gtol "
        ],
        "description": "isoindicf "
    },
    "joinf": {
        "prefix": "joinf ",
        "body": [
            "!JOINING ALL ITEMS OF AN ARRAY - CONCATENATING WITH A SEPARATOR - IN THIS CASE FOR SQL IN ",
            "DECLARE_VARIABLE STRING in_string \"\"",
            "count = 0 ",
            "GET_ARRAY_SIZE app_allarr_surf_types num_items",
            "FOR item REF ARRAY app_allarr_surf_types",
            "\tIF count == num_items - 1",
            "\t\tin_string += \"\\'\" + item + \"\\'\"",
            "\tELSE ",
            "\t\tin_string += \"\\'\" + item + \"\\',\"",
            "\tEND_IF ",
            "\tcount++",
            "END_FOR",
            "PRINT \"%\" in_string "
        ],
        "description": "joinf "
    },
    "listindex": {
        "prefix": "listindex ",
        "body": [
            "! -----------------------------------------------------------------",
            "! EXAMPLE OF USING COMMA SEPARATED STRING TO CONTAIN AND PROCESS CHOICES - INSTEAD OF ADDING ALL PER ADD_ARRAY_ELEM",
            "LISTDECLARE_VARIABLE STRING REVS \"A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA\"",
            "SPLIT_STRING REVS REV_ARRAY SPLIT_CHAR \",\"",
            "FIND_ARRAY_ELEM REV_ARRAY current_rev index",
            "GET_ARRAY_ELEM REV_ARRAY index+1 NEW_REV "
        ],
        "description": "listindex "
    },
    "logf": {
        "prefix": "logf ",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!  ENABLE LOGGING AND DEBUGGING",
            "! -----------------------------------------------------------------------------------------------------",
            "",
            "ENABLE_LOG_MESSAGE TRUE",
            "DECLARE_VARIABLE STRING log_path_raw \".\"",
            "DECLARE_VARIABLE STRING log_name \"output.log\"",
            "RESOLVE_PATH log_path_raw+\\+log_name log_path",
            "! PRINT \"LOG PATH: %\" log_path\t\t\t   ",
            "GET_ENVIRONMENT_VARIABLE \"ComSpec\" ComSpec",
            "",
            "",
            "! FOR MAPS - PUSH THEM TO STRINGS",
            "FOR item REF MAP config_detail_values",
            "",
            "\tWRITE_LOG_MESSAGE  log_path \"---------\"",
            "\t",
            "\tGET_PARAM_TYPE item.value the_param_type ",
            "\t",
            "\t! CONVERT PARAM VALUE TO STRING ",
            "\tIF the_param_type == INTEGER ",
            "\t\titem.value = itos(item.value)",
            "\tELSE_IF the_param_type == BOOL ",
            "\t\titem.value = btos(item.value)",
            "\tELSE_IF the_param_type == DOUBLE",
            "\t\titem.value = ftos(item.value)",
            "\tELSE_IF the_param_type == STRING   ",
            "\t\t! LEAVE AS IS",
            "\tEND_IF",
            "\t",
            "",
            "\tWRITE_LOG_MESSAGE  log_path item.key+\"-----\"+item.value",
            "",
            "END_FOR",
            "",
            "",
            "",
            "! FOR ARRAYS - PUSH TO STRINGS",
            "FOR item REF ARRAY array",
            "",
            "\tCLEAR_CATCH_ERROR",
            "\tBEGIN_CATCH_ERROR",
            "\t",
            "\t\tIF NOT ARRAY_EMPTY item ",
            "\t\t\t! RECURSIVE FOR ARRAYS ",
            "\t\t",
            "\t\tEND_IF\t",
            "\t\t",
            "\tEND_CATCH_ERROR",
            "\t",
            "END_FOR",
            "",
            "",
            "",
            "! WRITE_LOG_MESSAGE WITH_TIMESTAMP TRUE log_path variable1",
            "! WRITE_LOG_MESSAGE WITH_TIMESTAMP TRUE log_path ftos(variable)",
            "",
            "",
            "! OPEN WITH NOTEPAD++",
            "DECLARE_VARIABLE STRING cmd_arg ",
            "cmd_arg = \"/c start \\\"notepad++.exe\\\" \\\"\"+log_path+\"\\\"\"",
            "! PRINT \"%\" cmd_arg",
            "PLUGIN SHOW ASYNC ComSpec cmd_arg ",
            "",
            "! -----------------------------------------------------------------------------------------------------",
            "!  END LOGGING AND DEBUGGING",
            "! ----------------------------------------------------------------------------------------------------- "
        ],
        "description": "logf "
    },
    "mapf": {
        "prefix": "mapf ",
        "body": [
            "DECLARE_MAP STRING sym_to_text",
            "ADD_MAP_ELEM sym_to_text \"S⌀\" \"S_DIA\" ",
            "FOR item REF MAP sym_to_text",
            "\tPRINT \"%   ---    %\"   item.value   item.key",
            "END_FOR "
        ],
        "description": "mapf "
    },
    "masspropsf": {
        "prefix": "masspropsf ",
        "body": [
            "SEARCH_MDL_REF THIS CSYS \"*\" first_csys",
            "GET_MASS_PROPERTIES THIS first_csys mass_props",
            "PRINT \"mass_props %\" mass_props",
            "! mass_props.volume",
            "! mass_props.surface_area",
            "! mass_props.density",
            "! mass_props.mass",
            "! mass_props.center_of_gravity",
            "! mass_props.coor_sys_inertia",
            "! mass_props.cg_inertia_tensor",
            "! mass_props.principal_moments",
            "! mass_props.principal_axes "
        ],
        "description": "masspropsf "
    },
    "matrixf": {
        "prefix": "matrixf ",
        "body": [
            "DECLARE_STRUCT MATRIX matrix",
            "matrix.m11",
            "matrix.m12",
            "matrix.m13",
            "matrix.m14",
            "matrix.m21",
            "matrix.m22",
            "matrix.m23",
            "matrix.m24",
            "matrix.m31",
            "matrix.m32",
            "matrix.m33",
            "matrix.m34 "
        ],
        "description": "matrixf "
    },
    "mdlscalarf": {
        "prefix": "mdlscalarf ",
        "body": [
            "! CREATE A SCALAR BASED ON THE MODEL",
            "DECLARE_VARIABLE DOUBLE mdl_scalar ",
            "GET_UNIT_LENGTH THIS length_unit",
            "IF length_unit <> MM",
            "\tSET_UNIT_LENGTH THIS MM CONVERT",
            "END_IF",
            "CALC_OUTLINE NULL THIS outline ",
            "CALC_FORMULA \"sqrt(pow(outline.x2-outline.x1,2) + pow(outline.y2-outline.y1,2) + pow(outline.z2-outline.z1,2))/100\" mdl_scalar "
        ],
        "description": "mdlscalarf "
    },
    "msgareaf": {
        "prefix": "msgareaf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! REDUCE VISIBLE MESSAGE AREA and SIDE BAR",
            "MAPKEY @\"mapkey reduce_visible_msg_area ~ Move `main_dlg_cur` `sash_swap` 100;~ Move `main_dlg_cur` `sash_swap` 100;\"",
            "MAPKEY @\"mapkey reduce_side_bar ~ Move `main_dlg_cur` `drawinarea_resizer` 3 -222 250 0; ~ LButtonDisarm `main_dlg_cur` `drawinarea_resizer` 3 -222 250 0;\"MAPKEY @\"mapkey reduce_visible_msg_area ~ Move `main_dlg_cur` `sash_swap` 100;~ Move `main_dlg_cur` `sash_swap` 100;\" "
        ],
        "description": "msgareaf "
    },
    "msgf": {
        "prefix": "msgf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! Message Box Buttons",
            "DECLARE_ARRAY arrayButtons",
            "ADD_ARRAY_ELEM arrayButtons \"CONTINUE\"",
            "ADD_ARRAY_ELEM arrayButtons \"EXIT\"",
            "",
            "! -----------------------------------------------------------------",
            "! Display message box",
            "MESSAGE_BOX_EX QUESTION \"USER INPUT\" \"What should we do?\" arrayButtons paramChoice",
            "",
            "! -----------------------------------------------------------------",
            "! Work with message box choices",
            "IF paramChoice == 1",
            "",
            "ELSE_IF paramChoice <> 1",
            "\tEXIT",
            "END_IF "
        ],
        "description": "msgf "
    },
    "newcsys": {
        "prefix": "newcsys ",
        "body": [
            "USER_SELECT CSYS sel_csys",
            "",
            "DECLARE_STRUCT GENERAL_CSYS_DATA  a_csys_option",
            "",
            "ADD_ARRAY_ELEM a_csys_option.array_origin_references sel_csys",
            "a_csys_option.offset_type =  \"CARTESIAN\"",
            "a_csys_option.offset.x = 0",
            "a_csys_option.offset.y = 0",
            "a_csys_option.offset.z = 0",
            "a_csys_option.orient.x = 0",
            "a_csys_option.orient.y = 0",
            "a_csys_option.orient.z = 0",
            "",
            "CREATE_GENERAL_CSYS THIS a_csys_option new_csys "
        ],
        "description": "newcsys "
    },
    "newf": {
        "prefix": "newf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! © 2008-2021 SIGMAXIM, Inc.  All Rights Reserved.",
            "! -----------------------------------------------------------------",
            "! Creation : $CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR - cstjohn@sigmaxim.com",
            "! Purpose : $1",
            "! -----------------------------------------------------------------",
            "",
            "",
            "BEGIN_GUI_DESCR",
            "\t",
            "END_GUI_DESCR",
            "",
            "",
            "BEGIN_ASM_DESCR",
            "\t$2$0",
            "END_ASM_DESCR "
        ],
        "description": "Template for new automation from scratch"
    },
    "notedebugf": {
        "prefix": "notedebugf ",
        "body": [
            "",
            "GET_ANNOTATION_POS an_annotation anno_pos",
            "",
            "DECLARE_STRUCT NOTE_OPTION note_opt",
            "note_opt.placement_pos = first_row_pos",
            "note_opt.text = \"o\"\t",
            "CREATE_NOTE_EX THIS note_opt the_note",
            "ADD_COMB_VIEW_ANNOTATIONS THIS active_comb_view the_note "
        ],
        "description": "notedebugf "
    },
    "noterefsf": {
        "prefix": "noterefsf ",
        "body": [
            "READ_NOTE_EX an_annotation note_option",
            "\t\t\t",
            "PRINT \"%\" note_option.placement_ref",
            "PRINT \"%\" note_option.array_leaders",
            "",
            "IF REF_VALID note_option.placement_ref",
            "\t\tw_refs = TRUE",
            "END_IF",
            "",
            "",
            "! PRINT \"%\" gtol_props.placement.array_leaders",
            "FOR leader REF ARRAY note_option.array_leaders",
            "\tIF REF_VALID leader.placement_ref",
            "\t\tw_refs = TRUE",
            "\tEND_IF",
            "END_FOR "
        ],
        "description": "noterefsf "
    },
    "odbc_connect_legacy": {
        "prefix": "odbc_connect_legacy ",
        "body": [
            "",
            "    ! 64 Bits/32 Bits connection tests",
            "    DECLARE_VARIABLE INTEGER EXCELBIT -1",
            "",
            "    CLEAR_CATCH_ERROR",
            "    BEGIN_CATCH_ERROR",
            "        ! If this value exists, the 32 bits driver is installed",
            "        GET_REGISTRY_STRING DEFAULT_VALUE TRUE @\"HKEY_CLASSES_ROOT\\WOW6432Node\\CLSID\\{00024500-0000-0000-C000-000000000046}\" EXCEL_BIT_TEST",
            "    END_CATCH_ERROR",
            "    IF NOT ERROR",
            "        EXCELBIT = 32",
            "    END_IF",
            "",
            "    CLEAR_CATCH_ERROR",
            "    BEGIN_CATCH_ERROR",
            "        ! If this value exists, the 32 bits driver is installed",
            "        GET_REGISTRY_STRING DEFAULT_VALUE TRUE @\"HKEY_CLASSES_ROOT\\CLSID\\{00024500-0000-0000-C000-000000000046}\" EXCEL_BIT_TEST",
            "    END_CATCH_ERROR",
            "    IF NOT ERROR",
            "        EXCELBIT = 64",
            "    END_IF",
            "",
            "    IF EXCELBIT == 64",
            "        PRINT \"Excel for 64 bit installed\"",
            "        ODBC_CONNECT odbc_connect_string",
            "    ELSE_IF EXCELBIT == 32",
            "        PRINT \"Excel for 32 bit installed\"",
            "        ODBC_CONNECT USE_32BIT_DRIVER TRUE odbc_connect_string",
            "    ELSE",
            "        MESSAGE_BOX SCREEN_LOCATION CENTER_RIGHT \"This application requires the use of an Excel / Access Driver.\\nThe system can not find that driver on your computer.\\n\\nPlease update accordingly.\"",
            "        EXIT RECURSIVE",
            "    END_IF",
            "",
            "    ! ODBC_CONNECT odbc_connect_string",
            "    IF NOT ODBC_CONNECTED",
            "        MESSAGE_BOX \"Can not connect to Database\\n\"+database_file+\"\\n\\nSTOP\"",
            "        EXIT RECURSIVE",
            "    END_IF "
        ],
        "description": "odbc_connect_legacy "
    },
    "odbccompqf": {
        "prefix": "odbccompqf ",
        "body": [
            "! COMPLEX ODBC",
            "RESOLVE_PATH lib:files\\pmi_database_logic.xlsx database_file",
            "DECLARE_VARIABLE STRING sql_command\t",
            "RESOLVE_PATH lib:\\MBE\\PMI\\work_dir\\annotation_dashboard.xlsx database_file",
            "sql_command = \" SELECT [MDL_TRIPLES$].SEMANTIC_ELEM FROM \" + @\"((\"+ \"[MDL_TRIPLES$]\" ",
            "sql_command += \" INNER JOIN [MDL_PMI$] ON [MDL_TRIPLES$].ITEM_REF = [MDL_PMI$].REF_STRING\"+\")\" ",
            "sql_command += \" INNER JOIN [MDL_SURFS$] ON [MDL_TRIPLES$].SEMANTIC_ELEM = [MDL_SURFS$].REF_STRING)\"",
            "sql_command += \" WHERE [MDL_PMI$].REF_STRING = \" + \"\\'\" + gtol + \"\\'\" + \";\"\t\t\t",
            "INCLUDE lib:\\sigma_commands\\odbc_connect.tab\t",
            "PRINT \"ODBC RESULT   : %\" odbc_output",
            "DECLARE_ARRAY gtol_refs",
            "gtol_refs = odbc_output",
            "CLEAR_ARRAY odbc_output",
            " "
        ],
        "description": "odbccompqf "
    },
    "odbccustomer": {
        "prefix": "odbccustomer ",
        "body": [
            "",
            "! Need the name of an excel file",
            "DECLARE_VARIABLE STRING database_file lib:hoist_cage_init.xlsx",
            "",
            "! Break apart the file name to work with a bit easier",
            "PARSE_FILE_NAME database_file ppath pfile pext",
            "database_file = ppath +  + pfile + \".\" + pext",
            "",
            "! the sheet name in the excel file ",
            "DECLARE_VARIABLE STRING dimensions_sql_table \"[standard_configurations$]\"",
            "",
            "! Setup up the odbc information to run the command",
            "DECLARE_VARIABLE STRING odbc_connect_string",
            "odbc_connect_string  = \"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};\" \t! Driver name",
            "odbc_connect_string += \"DBQ=\"+database_file+\";\" \t\t! full path to excel file",
            "odbc_connect_string += \"ReadOnly=0;\" \t\t\t\t! read and write",
            "odbc_connect_string += \"Empty Text Mode=NullAsEmpty;\" \t! Empty cells always empty string",
            "",
            "",
            "",
            "!If connected already, disconnect",
            "IF ODBC_CONNECTED",
            "\tODBC_DISCONNECT",
            "END_IF",
            "",
            "",
            "",
            "! -----------------------------------------------------------------",
            "! 64 Bits/32 Bits connection tests",
            "DECLARE_VARIABLE INTEGER EXCELBIT -1",
            "",
            "CLEAR_CATCH_ERROR",
            "BEGIN_CATCH_ERROR",
            "  ! If this value exists, the 32 bits driver is installed",
            "  GET_REGISTRY_STRING DEFAULT_VALUE TRUE @\"HKEY_CLASSES_ROOT\\WOW6432Node\\CLSID\\{00024500-0000-0000-C000-000000000046}\" EXCEL_BIT_TEST",
            "END_CATCH_ERROR",
            "IF NOT ERROR",
            "  EXCELBIT = 32",
            "END_IF",
            "",
            "CLEAR_CATCH_ERROR",
            "BEGIN_CATCH_ERROR",
            "  ! If this value exists, the 32 bits driver is installed",
            "  GET_REGISTRY_STRING DEFAULT_VALUE TRUE @\"HKEY_CLASSES_ROOT\\CLSID\\{00024500-0000-0000-C000-000000000046}\" EXCEL_BIT_TEST",
            "END_CATCH_ERROR",
            "IF NOT ERROR",
            "  EXCELBIT = 64",
            "END_IF",
            "",
            "IF EXCELBIT == 64",
            "  PRINT \"Excel for 64 bit installed\"",
            "  ODBC_CONNECT odbc_connect_string",
            "ELSE_IF EXCELBIT == 32",
            "  PRINT \"Excel for 32 bit installed\"",
            "  ODBC_CONNECT USE_32BIT_DRIVER TRUE odbc_connect_string",
            "ELSE",
            "  MESSAGE_BOX SCREEN_LOCATION CENTER_RIGHT \"This application requires the use of an Excel / Access Driver.\\nThe system can not find that driver on your computer.\\n\\nPlease update accordingly.\"+@\"https://www.microsoft.com/en-US/download/details.aspx?id=13255\"",
            "  EXIT RECURSIVE",
            "END_IF",
            "",
            "! ODBC_CONNECT odbc_connect_string",
            "IF NOT ODBC_CONNECTED",
            "  MESSAGE_BOX \"Can not connect to Database\\n\"+database_file+\"\\n\\nSTOP\"",
            "  EXIT RECURSIVE",
            "END_IF",
            "",
            "",
            "",
            "!Connect to odbc (to this excel file)",
            "ODBC_CONNECT odbc_connect_string",
            "",
            "! Declare a variable for the command you want to send ",
            "DECLARE_VARIABLE STRING sql_command",
            "",
            "!One example of sending a SQL query to this excel sheet \"as a database\"",
            "sql_command  = \"SELECT DISTINCT cage_length\"",
            "sql_command += \" FROM \" + dimensions_sql_table",
            "sql_command += \" WHERE cage_length > 0\"",
            "sql_command += \" ORDER BY cage_length \"",
            "sql_command += \" ; \"",
            "ODBC_QUERY sql_command std_lengths",
            "",
            "! Closing the database connection",
            "ODBC_DISCONNECT",
            "",
            "!print the array of values obtained by the odbc query",
            "PRINT \"%\" std_lengths "
        ],
        "description": "odbccustomer "
    },
    "odbcdbqueryf": {
        "prefix": "odbcdbqueryf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! PURPOSE : CONNECTING PER ODBC TO DATABASE",
            "RESOLVE_PATH \"C:\\Users\\info\\Documents\\Database2.accdb\" database_file",
            "PARSE_FILE_NAME database_file ppath pfile pext",
            "database_file = ppath +  + pfile + \".\" + pext",
            "DECLARE_VARIABLE STRING sql_table \"PMI\"",
            "IF ODBC_CONNECTED",
            "\tODBC_DISCONNECT",
            "END_IF",
            "ODBC_CONNECT \"Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\"+database_file+\";\"",
            "DECLARE_VARIABLE STRING sql_command",
            "sql_command = \" SELECT SYMBOL \"",
            "sql_command += \" FROM \" + sql_table",
            "sql_command += \" WHERE SYMBOL IS NOT NULL ;\"",
            "! PRINT \"%\" sql_command",
            "",
            "ODBC_QUERY sql_command results",
            "ODBC_DISCONNECT",
            "PRINT \"%\" results "
        ],
        "description": "odbcdbqueryf "
    },
    "odbcf": {
        "prefix": "odbcf ",
        "body": [
            "",
            "! PURPOSE : connecting per odbc to excel  (need a microsoft driver from sigmaxim.net) ",
            "",
            "! Need the name of an excel file",
            "DECLARE_VARIABLE STRING database_file lib:hoist_cage_init.xlsx",
            "",
            "! Break apart the file name to work with a bit easier",
            "PARSE_FILE_NAME database_file ppath pfile pext",
            "database_file = ppath +  + pfile + \".\" + pext",
            "",
            "! the sheet name in the excel file ",
            "DECLARE_VARIABLE STRING dimensions_sql_table \"[standard_configurations$]\"",
            "",
            "! Setup up the odbc information to run the command",
            "DECLARE_VARIABLE STRING odbc_connect_string",
            "odbc_connect_string  = \"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};\" \t! Driver name",
            "odbc_connect_string += \"DBQ=\"+database_file+\";\" \t\t! full path to excel file",
            "odbc_connect_string += \"ReadOnly=0;\" \t\t\t\t! read and write",
            "odbc_connect_string += \"Empty Text Mode=NullAsEmpty;\" \t! Empty cells always empty string",
            "",
            "!If connected already, disconnect",
            "IF ODBC_CONNECTED",
            "\tODBC_DISCONNECT",
            "END_IF",
            "",
            "!Connect to odbc (to this excel file)",
            "ODBC_CONNECT odbc_connect_string",
            "",
            "! Declare a variable for the command you want to send ",
            "DECLARE_VARIABLE STRING sql_command",
            "",
            "!One example of sending a SQL query to this excel sheet \"as a database\"",
            "sql_command  = \"SELECT DISTINCT cage_length\"",
            "sql_command += \" FROM \" + dimensions_sql_table",
            "sql_command += \" WHERE cage_length > 0\"",
            "sql_command += \" ORDER BY cage_length \"",
            "sql_command += \" ; \"",
            "ODBC_QUERY sql_command std_lengths",
            "",
            "! Closing the database connection",
            "ODBC_DISCONNECT",
            "",
            "!print the array of values obtained by the odbc query",
            "PRINT \"%\" std_lengths "
        ],
        "description": "odbcf "
    },
    "odbcjoinf": {
        "prefix": "odbcjoinf ",
        "body": [
            "",
            "! PURPOSE : connecting per odbc to excel  (need a microsoft driver from sigmaxim.net) ",
            "",
            "! Need the name of an excel file",
            "DECLARE_VARIABLE STRING database_file lib:files\\annotation_dashboard.xlsx",
            "",
            "! Break apart the file name to work with a bit easier",
            "PARSE_FILE_NAME database_file ppath pfile pext",
            "database_file = ppath +  + pfile + \".\" + pext",
            "",
            "! the sheet name in the excel file ",
            "DECLARE_VARIABLE STRING sql_table1_name \"MDL_PMI\"",
            "DECLARE_VARIABLE STRING sql_table1 \"[\"+sql_table1_name+\"$]\"",
            "",
            "DECLARE_VARIABLE STRING sql_table2_name \"MDL_TRIPLES\"",
            "DECLARE_VARIABLE STRING sql_table2 \"[\"+sql_table2_name+\"$]\"",
            "",
            "! Setup up the odbc information to run the command",
            "DECLARE_VARIABLE STRING odbc_connect_string",
            "odbc_connect_string  = \"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};\" ",
            "odbc_connect_string += \"DBQ=\"+database_file+\";\" \t\t",
            "odbc_connect_string += \"ReadOnly=0;\" \t\t\t\t",
            "odbc_connect_string += \"Empty Text Mode=NullAsEmpty;\" \t",
            "",
            "!If connected already, disconnect",
            "IF ODBC_CONNECTED",
            "\tODBC_DISCONNECT",
            "END_IF",
            "",
            "!Connect to odbc (to this excel file)",
            "ODBC_CONNECT odbc_connect_string",
            "",
            "! Declare a variable for the command you want to send ",
            "DECLARE_VARIABLE STRING sql_command",
            "",
            "!One example of sending a SQL query to this excel sheet \"as a database\"",
            "sql_command  = \"SELECT \"",
            "sql_command += sql_table2 + \".\" + \"SEMANTIC_ELEM\" ",
            "sql_command += \",\" + sql_table1 + \".\" + \"SHORT_ID\" ",
            "",
            "",
            "sql_command += \" FROM \" + sql_table2",
            "",
            "sql_command += \" INNER JOIN \"",
            "sql_command += sql_table1 + \" ON \" + sql_table2 + \".\" + \"ITEM_REF\" ",
            "sql_command += \"=\" + sql_table1 + \".\" + \"REF_STRING\" ",
            "",
            "! sql_command += \" WHERE cage_length > 0\"",
            "! sql_command += \" ORDER BY cage_length \"",
            "",
            "sql_command += \" ; \"",
            "",
            "PRINT \"%\" sql_command",
            "ODBC_QUERY sql_command results",
            "",
            "! Closing the database connection",
            "ODBC_DISCONNECT",
            "",
            "!print the array of values obtained by the odbc query",
            "PRINT \"%\" results$0 "
        ],
        "description": "odbcjoinf "
    },
    "odbcqqf": {
        "prefix": "odbcqqf ",
        "body": [
            "! ! PURPOSE : USING ODBC SUB-MODULE (need a microsoft driver from sigmaxim.net) ",
            "DECLARE_VARIABLE STRING database_file ",
            "DECLARE_VARIABLE STRING sql_table ",
            "DECLARE_VARIABLE STRING select_statement",
            "DECLARE_VARIABLE STRING sql_command",
            "",
            "RESOLVE_PATH lib:files\\pmi_database_logic.xlsx database_file",
            "sql_table = \"STD-GEO_CHAR\"",
            "select_statement = \" SELECT SA_GEO_CHAR_SYMBOL_NAME\"",
            "sql_command = \"WHERE STANDARD = \" + \"\\'\" + tol_standard + \"\\'\"",
            "",
            "CALL_EX lib:\\sigma_commands\\quick_odbc_query.tab",
            "\tVAR_IN database_file database_file",
            "\tVAR_IN select_statement select_statement",
            "\tVAR_IN sql_command sql_command   !DELETE THIS IF YOU DONT NEED THE COMMAND ",
            "\tVAR_IN sql_table sql_table",
            "\tVAR_OUT applicable_geo_char odbc_output",
            "END_CALL_EX",
            "PRINT \"ODBC RESULT   : %\" applicable_geo_char "
        ],
        "description": "odbcqqf "
    },
    "odbcwf": {
        "prefix": "odbcwf ",
        "body": [
            "",
            "! Need the name of an excel file",
            "DECLARE_VARIABLE STRING database_file lib:hoist_cage_init.xlsx",
            "",
            "! Break apart the file name to work with a bit easier",
            "PARSE_FILE_NAME database_file ppath pfile pext",
            "database_file = ppath +  + pfile + \".\" + pext",
            "",
            "! Setup up the odbc information to run the command",
            "DECLARE_VARIABLE STRING odbc_connect_string",
            "odbc_connect_string  = \"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};\" \t! Driver name",
            "odbc_connect_string += \"DBQ=\"+database_file+\";\" \t\t! full path to excel file",
            "odbc_connect_string += \"ReadOnly=0;\" \t\t\t\t! read and write",
            "odbc_connect_string += \"Empty Text Mode=NullAsEmpty;\" \t! Empty cells always empty string",
            "",
            "",
            "!If connected already, disconnect",
            "IF ODBC_CONNECTED",
            "\tODBC_DISCONNECT",
            "END_IF",
            "",
            "!Connect to odbc (to this excel file)",
            "ODBC_CONNECT odbc_connect_string",
            "",
            "! Declare a variable for the command you want to send ",
            "DECLARE_VARIABLE STRING sql_command",
            "",
            "! the sheet name in the excel file ",
            "DECLARE_VARIABLE STRING sql_table \"[\" + \"standard_configurations\" + \"$]\"",
            "",
            "",
            "sql_command  = \"INSERT INTO \" + sql_table",
            "sql_command += \" (\"",
            "",
            "! INSERT ALL HEADERS HERE",
            "sql_command += \"NAME_VERSION\"",
            "sql_command += \",\" + \"MDL_REF\" ",
            "sql_command +=  \") \"",
            "",
            "! -----------------------------------------------------------------",
            "! INSERT ALL VALUES HERE ",
            "sql_command +=  \" VALUES (\"",
            "sql_command +=  \"\\'\" + cur_model_name + \":\" + cur_version + \"\\'\"",
            "sql_command +=  \", \\'\" + gtol_mdl + \"\\'\"",
            "sql_command +=  \") \"",
            "",
            "ODBC_EXECUTE sql_command",
            "",
            "",
            "ODBC_COMMIT",
            "",
            "! Closing the database connection",
            "ODBC_DISCONNECT",
            " "
        ],
        "description": "odbcwf "
    },
    "opendocf": {
        "prefix": "opendocf ",
        "body": [
            "PLUGIN HIDE ASYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c start \\\"\\\" \\\"\"+a_path+\"\\\"\"",
            " "
        ],
        "description": "opendocf "
    },
    "openf": {
        "prefix": "openf ",
        "body": [
            "DECLARE_VARIABLE STRING path \"C:\\Users\\info\"",
            "PLUGIN HIDE ASYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c start explorer.exe \\\"\"+path+\"\\\"\" "
        ],
        "description": "openf "
    },
    "pathf": {
        "prefix": "pathf ",
        "body": [
            "RESOLVE_PATH lib:  path",
            "PRINT \"%\" path "
        ],
        "description": "pathf "
    },
    "pf": {
        "prefix": "pf ",
        "body": [
            "PRINT \"$[![]!]:  %\" $[![]!]",
            " "
        ],
        "description": "pf "
    },
    "planarsurfsf": {
        "prefix": "planarsurfsf ",
        "body": [
            "!CAPTURE ALL PLANAR SURFACES (NOT INTUITIVE CURRENTLY)",
            "DECLARE_ARRAY planar_surfaces",
            "SEARCH_MDL_REFS THIS SURFACE \"*\" array_all_surfs",
            "FOR item REF ARRAY array_all_surfs",
            "\tIF SURF_TYPE item PLANE ",
            "\t\tADD_ARRAY_ELEM planar_surfaces item",
            "\tEND_IF ",
            "END_FOR",
            "PRINT \"%\" planar_surfaces "
        ],
        "description": "planarsurfsf "
    },
    "proemodef": {
        "prefix": "proemodef ",
        "body": [
            "GET_PROE_MODE proe_mode",
            "PRINT \"%\" proe_mode",
            "IF proe_mode == \"MODE_PART\" OR proe_mode == \"MODE_ASSEMBLY\" OR proe_mode == \"MODE_SHEET_METAL\"",
            "\tGET_CURRENT_MDL current_mdl",
            "\t",
            "\tGET_MDL_NAME current_mdl current_mdl_name",
            "\tRETRIEVE_MDL current_mdl_name+\".drw\" current_drw",
            "ELSE",
            "\tMESSAGE_BOX \"Open a prt or an asm model\"",
            "\tEXIT",
            "END_IF "
        ],
        "description": "proemodef "
    },
    "progc": {
        "prefix": "progc ",
        "body": [
            "! -----------------------------------------------------------------",
            "! ANNOUNCE END OF PROGRAM",
            "ENABLE_PRINT_MESSAGE TRUE",
            "GET_TAB_NAME tab_name",
            "SPLIT_STRING tab_name tab_name SPLIT_CHAR \".\"",
            "PRINT \"% PROGRAM COMPLETE-----------------------------------\" mkupper(tab_name) "
        ],
        "description": "progc "
    },
    "proge": {
        "prefix": "proge ",
        "body": [
            "PRINT \"PROGRAM COMPLETE-------------------------------------------\" "
        ],
        "description": "proge "
    },
    "progs": {
        "prefix": "progs ",
        "body": [
            "! -----------------------------------------------------------------",
            "! ANNOUNCE START OF PROGRAM",
            "CLEAR_MESSAGE_AREA",
            "ENABLE_PRINT_MESSAGE TRUE",
            "GET_TAB_NAME tab_name",
            "SPLIT_STRING tab_name tab_name SPLIT_CHAR \".\"",
            "PRINT \"% PROGRAM STARTING-----------------------------------\" mkupper(tab_name) "
        ],
        "description": "progs "
    },
    "pulltestmdlf": {
        "prefix": "pulltestmdlf ",
        "body": [
            "! PULL IN TEST ITEM AND THEN RESTART",
            "IF CURRENT_MDL_AVAILABLE",
            "\tGET_MDL_NAME THIS name ",
            "\tIF name <> \"cover_iso\"",
            "\t\tRETRIEVE_MDL lib:cover_iso.drw ref_drawing",
            "\t\tSWITCH_TO_MDL ref_drawing",
            "\t\tMESSAGE_BOX \"MDL RETRIEVED - REACTIVATE MODULE TO CONTINUE\"",
            "\t\tEXIT ",
            "\tELSE ",
            "\t\tCOPY_REF THIS ref_drawing",
            "\tEND_IF",
            "ELSE ",
            "\tRETRIEVE_MDL lib:cover_iso.drw ref_drawing",
            "\tSWITCH_TO_MDL ref_drawing",
            "\tMESSAGE_BOX \"MDL RETRIEVED - REACTIVATE MODULE TO CONTINUE\"",
            "\tEXIT ",
            "",
            "END_IF "
        ],
        "description": "pulltestmdlf "
    },
    "pythonf": {
        "prefix": "pythonf ",
        "body": [
            "RESOLVE_PATH lib:hello.py python_file",
            "IF strfind(python_file,\" \") ",
            "\tpython_file = \"\\\"\"+python_file+\"\\\"\"",
            "END_IF",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c \" + python_file + \" & PAUSE\"",
            " "
        ],
        "description": "pythonf "
    },
    "readdimf": {
        "prefix": "readdimf ",
        "body": [
            "USER_SELECT DIMENSION a_dim",
            "READ_DIM_ANNOTATION a_dim dim_props",
            "PRINT \"%\" dim_props "
        ],
        "description": "readdimf "
    },
    "readdirsf": {
        "prefix": "readdirsf ",
        "body": [
            "! READ_DIRECTORY",
            "DECLARE_ARRAY all_sub_dir",
            "DECLARE_ARRAY total_subs",
            "READ_SUBDIRECTORIES . all_sub",
            "RESOLVE_PATH . current_path",
            "",
            "FOR item REF ARRAY all_sub",
            "\tADD_ARRAY_ELEM all_sub_dir current_path+\\+item",
            "END_FOR",
            "",
            "WHILE NOT ARRAY_EMPTY all_sub_dir",
            "\t! PARSE_FILE_NAME a_dir",
            "\tGET_ARRAY_ELEM all_sub_dir 0 a_dir",
            "\tPRINT \"%\" a_dir",
            "\tADD_ARRAY_ELEM total_subs a_dir",
            "\tREAD_SUBDIRECTORIES a_dir sub_items",
            "\t! PRINT \"%\" sub_items",
            "\tFOR item REF ARRAY sub_items",
            "\t\tPRINT \"%\" a_dir+\\+item",
            "\t\tADD_ARRAY_ELEM all_sub_dir a_dir+\\+item",
            "\tEND_FOR",
            "\tDELETE_ARRAY_ELEM all_sub_dir 0",
            "END_WHILE "
        ],
        "description": "readdirsf "
    },
    "regexmatchf": {
        "prefix": "regexmatchf ",
        "body": [
            "!FINDING A SIMPLE TOLERANCE MIXED WITH MODIFIERS",
            "DECLARE_VARIABLE STRING pattern",
            "pattern = @\".*?([\\d\\.]+).*\"",
            "REG_EXP_MATCH read_a_gtol.value  pattern matches_bool arraySubMatches",
            "",
            "GET_ARRAY_ELEM arraySubMatches 0 the_match",
            "PRINT \"%\" the_match",
            "DECLARE_VARIABLE STRING parsed_gtol_tol the_match",
            "$0 "
        ],
        "description": "regexmatchf "
    },
    "removeafs": {
        "prefix": "removeafs ",
        "body": [
            "COPY_REF THIS current_mdl",
            "SEARCH_MDL_REFS current_mdl FEATURE_TYPE ANNOTATION all_annotations",
            "PRINT \"%\" all_annotations",
            "FOR an_annotation REF ARRAY all_annotations",
            "\tDELETE_ANNOTATION_ELEMENTS an_annotation",
            "END_FOR",
            "",
            "REMOVE_FEATURES all_annotations "
        ],
        "description": "removeafs "
    },
    "rulef": {
        "prefix": "rulef ",
        "body": [
            "rule function_search_mdl_refs1:",
            "\twhen { ",
            "\t(  ) isa    ;",
            "\t} then {",
            "\t(   ) isa   ;",
            "\t}; "
        ],
        "description": "rulef "
    },
    "sendemailf": {
        "prefix": "sendemailf ",
        "body": [
            "-----------------------------------------------------------------------",
            "! Declare all variables / references / arrays",
            "!-----------------------------------------------------------------------",
            "! Integers",
            "DECLARE_VARIABLE INTEGER ROW_COUNT",
            "",
            "! Email Options",
            "DECLARE_VARIABLE STRING MAIL_SERVER \"smtp.xylem.com\"",
            "DECLARE_VARIABLE STRING MAIL_SENDER \"Your Fire Pumps Configurator\"",
            "DECLARE_VARIABLE STRING MAIL_SENDER_ADDRESS \"FirePumps@xyleminc.com\"",
            "DECLARE_VARIABLE INTEGER MAIL_PORT 25",
            "",
            "! Arrays",
            "DECLARE_ARRAY ARRAY_FIRST_NAMES",
            "DECLARE_ARRAY ARRAY_EMAILS",
            "!-----------------------------------------------------------------------",
            "",
            "! Include the application for the Variable Declarations",
            "!-----------------------------------------------------------------------",
            "INCLUDE lib:Variable_Declarations.tab",
            "!-----------------------------------------------------------------------",
            "",
            "!-------------------------------------------------------------------------------",
            "! Change these values to control the sending of an email",
            "!-------------------------------------------------------------------------------",
            "DECLARE_STRUCT MAIL_OPTION MY_MAIL",
            "MY_MAIL.server = MAIL_SERVER",
            "MY_MAIL.port = MAIL_PORT",
            "MY_MAIL.sender = MAIL_SENDER",
            "MY_MAIL.sender_mail_addr = MAIL_SENDER_ADDRESS",
            "MY_MAIL.subject = \"Fire Pumps Configurator Error/Issue!\"",
            "",
            "! Add the Log File to the ARRAY_ATTACHMENTS to attach to the email",
            "ADD_ARRAY_ELEM MY_MAIL.attachments LOG_FILE",
            "",
            "!-------------------------------------------------------------------------------",
            "",
            "!-------------------------------------------------------------------------------",
            "! Change these values to control the recipients of the email",
            "!-------------------------------------------------------------------------------",
            "DECLARE_STRUCT MAIL_ADDR mail_addresses",
            "!-------------------------------------------------------------------------------",
            "",
            "!-----------------------------------------------------------------------",
            "! Retreive an array of all the email addresses that should receive the email",
            "!-----------------------------------------------------------------------",
            "\t! Disconnect and Connect to Excel",
            "\tEXCEL_DISCONNECT",
            "\tEXCEL_START INVISIBLE",
            "",
            "\t! Load the Admin_Accounts.xls",
            "\tEXCEL_LOAD_DOCUMENT lib:documents\\Emails.xlsx",
            "",
            "\t! Get the Active Range of the Document",
            "\tEXCEL_GET_ACTIVE_RANGE ROW_MIN ROW_MAX COL_MIN COL_MAX",
            "",
            "\t! Loop through the arrays and check the Username and Password the user has entered",
            "\tROW_COUNT = 1",
            "\tWHILE ROW_COUNT <= ROW_MAX",
            "\t\t! Get the Admin Username and Password from the Excel Sheet",
            "\t\tEXCEL_GET_VALUE CELL_BY_INDEX ROW_COUNT 0 mail_addresses.name",
            "\t\tEXCEL_GET_VALUE CELL_BY_INDEX ROW_COUNT 1 mail_addresses.mail_addr",
            "\t\t",
            "\t\t! Add the email address to an array",
            "\t\tADD_ARRAY_ELEM MY_MAIL.bcc_recipients mail_addresses",
            "\t\t",
            "\t\tROW_COUNT++",
            "\tEND_WHILE",
            "!-----------------------------------------------------------------------",
            "",
            "! Close the document and disconnect from Excel",
            "EXCEL_CLOSE_DOCUMENT",
            "EXCEL_DISCONNECT",
            "",
            "PRINT \"-------------------------------------------\"",
            "PRINT \"Generating Email\"",
            "",
            "!-------------------------------------------------------------------------------",
            "! Send an email to the customer with information to download their file",
            "!-------------------------------------------------------------------------------",
            "MY_MAIL.message = \"Dear Engineer/Admin,\\r\\n ",
            "\\r\\n ",
            "There is an issue with the Fire Pumps Configurator, order #\"+PROJECT_NUM+\" that needs your attention.\\r\\n ",
            "\\r\\n ",
            "Please refer to the Log File (\"+PROJECT_NUM+\"_Build.log) located in the \\'results\\' folder, and attached to this email for further information.\\r\\n ",
            "\\r\\n ",
            "Best regards,\\r\\n ",
            "\\r\\n ",
            "\"+MAIL_SENDER+\"\\r\\n \"",
            "!-------------------------------------------------------------------------------",
            "",
            "!-------------------------------------------------------------------------------",
            "! Send the email to the users",
            "!-------------------------------------------------------------------------------",
            "BEGIN_CATCH_ERROR",
            "\tSEND_MAIL MY_MAIL",
            "END_CATCH_ERROR",
            "\t",
            "PRINT \"Emails have been sent!\"",
            "PRINT \"-------------------------------------------\" "
        ],
        "description": "sendemailf "
    },
    "shrinkwrapsurfsf": {
        "prefix": "shrinkwrapsurfsf ",
        "body": [
            "! -----------------------------------------------------------------",
            "! CREATE THE SHRINKWRAP AND GET ALL THE SURFACES FROM THE SUB FEATURES",
            "CREATE_SHRINKWRAP empty_asm shrinkwrap_option shrinkWrapFeature",
            "PRINT \"%\" shrinkWrapFeature",
            "GET_REF_ID shrinkWrapFeature ref_id ",
            "ref_id++",
            "DECLARE_ARRAY surfs_from_shrink",
            "WHILE 1==1",
            "\tCLEAR_CATCH_ERROR",
            "\tBEGIN_CATCH_ERROR",
            "\t\tSEARCH_MDL_REF empty_asm FEATURE \"FID:\"+itos(ref_id) feat",
            "\t\tGET_FEATURE_TYPE feat feat_type",
            "\t\tPRINT \"%\" feat_type",
            "\t\tIF feat_type == \"GEOM_COPY\"",
            "\t\t\tGET_GEOMS_FROM_FEATURE feat SURFACE surfs_from_shrink",
            "\t\t\t! PRINT \"%\" surfs_from_shrink\t",
            "\t\t\tSET_COLOR feat 0 0 255",
            "\t\tEND_IF",
            "\t\t! PRINT \"%\" feat",
            "\t\tref_id++\t\t",
            "\tEND_CATCH_ERROR",
            "\tIF ERROR ",
            "\t\tBREAK",
            "\tEND_IF",
            "END_WHILE "
        ],
        "description": "shrinkwrapsurfsf "
    },
    "strf": {
        "prefix": "strf ",
        "body": [
            "DECLARE_VARIABLE STRING $0 "
        ],
        "description": "strf "
    },
    "symparsef": {
        "prefix": "symparsef ",
        "body": [
            "! -----------------------------------------------------------------",
            "! SYMBOL PARSING CALL",
            "DECLARE_VARIABLE STRING symbolic_string ",
            "DECLARE_VARIABLE STRING parsed_symbolic_string ",
            "symbolic_string = aaaa",
            "parsed_symbolic_string = aaaa",
            "INVALIDATE_PARAM symbolic_string ",
            "INVALIDATE_PARAM parsed_symbolic_string ",
            "\t\t",
            "CALL_EX lib:\\sigma_commands\\symbol_parsing.tab",
            "\tVAR_INOUT symbolic_string symbolic_string",
            "\tVAR_INOUT parsed_symbolic_string parsed_symbolic_string",
            "END_CALL_EX",
            "aaa = parsed_symbolic_string",
            "aaaa = symbolic_string",
            "",
            " "
        ],
        "description": "symparsef "
    },
    "tabbf": {
        "prefix": "tabbf ",
        "body": [
            "BEGIN_TAB_DESCR",
            "$0",
            "",
            "END_TAB_DESCR "
        ],
        "description": "tabbf "
    },
    "tablef": {
        "prefix": "tablef ",
        "body": [
            "BEGIN_TABLE table_name",
            "TABLE_OPTION ARRAY SHOW_AUTOSEL TABLE_HEIGHT 8\tINVALIDATE_ON_UNSELECT",
            "SEL_STRING\tcage_length\tsubt1",
            "STRING\tINTEGER\tSUBTABLE",
            "len_length_sel_string\tlen_length\tlen_next_width",
            "END_TABLE "
        ],
        "description": "tablef "
    },
    "testprogstart": {
        "prefix": "testprogstart ",
        "body": [
            "! -----------------------------------------------------------------",
            "! TEST TYPE START",
            "! -----------------------------------------------------------------",
            "IF CURRENT_MDL_AVAILABLE",
            "\tGET_CURRENT_MDL the_cur_mdl",
            "\tERASE_MDL the_cur_mdl",
            "END_IF",
            "ERASE_NOT_DISPLAYED",
            "CLEAR_MESSAGE_AREA",
            "",
            "USE_LIBRARY_MDL lib:models\\creo4_simple_dia_w_hole.prt part_copy current_mdl ",
            "SWITCH_TO_MDL current_mdl "
        ],
        "description": "testprogstart "
    },
    "timef": {
        "prefix": "timef ",
        "body": [
            "! DECLARING AND STARTING TIMING",
            "\tDECLARE_STOPWATCH stopwatch",
            "\tSTART_STOPWATCH stopwatch",
            "",
            "! GETTING TIME - REPORTING / DEBUGGING",
            "\tGET_STOPWATCH_TIME stopwatch stopwatch_time",
            "\tPRINT \"TIME FOR ____ -----------------\" ",
            "\tPRINT \"\\tLINE: %  STOPWATCH TIME: %\" __LINE__ stopwatch_time ",
            "",
            "! TIME RELATED CONDITIONALS",
            "",
            "\tIF stopwatch_time > \"00:00:00.030\"",
            "\t\tPRINT \"ERROR - THIS CODE TAKING SIGNIFICANT TIME\"",
            "\tEND_IF \t",
            "",
            "\tWHILE stopwatch_time < \"00:00:05.000\"",
            "\t\tPRINT \"\\tONGOING TIME: %\" stopwatch_time",
            "\t\t! DO SOMETHING HERE",
            "\t\tGET_STOPWATCH_TIME stopwatch_time",
            "\tEND_IF \t",
            "",
            "! GETTING AND RESETTING TIME",
            "\tGET_STOPWATCH_TIME stopwatch stopwatch_time",
            "\tSTOP_STOPWATCH stopwatch",
            "\tRESET_STOPWATCH  stopwatch",
            "\tSTART_STOPWATCH stopwatch  !have to add this because the stop was added",
            "",
            "! WAITING",
            "\tSLEEP 2 !WAIT 2 SECONDS"
        ],
        "description": "timef "
    },
    "triggertext": {
        "prefix": "triggertext ",
        "body": [
            "! SETTING DIMENSION TEXT (ACCOUNTING FOR PREFIX AND SUFFIX AND OVERLAP WITH TEXT FUNCT)",
            "GET_DIM_PREFIX a_dim dim_prefix ",
            "GET_DIM_SUFFIX a_dim dim_suffix ",
            "GET_DIM_TEXT a_dim dim_text ",
            "SET_DIM_PREFIX a_dim \"\"",
            "SET_DIM_SUFFIX a_dim \"\"",
            "SET_DIM_TEXT a_dim dim_text "
        ],
        "description": "triggertext "
    },
    "truncwhitef": {
        "prefix": "truncwhitef ",
        "body": [
            "! TRUNCATE WHITE SPACE",
            "REG_EXP_REPLACE REPLACE_ALL TRUE symbolic_string \" \" \"\" symbolic_string "
        ],
        "description": "truncwhitef "
    },
    "typstartf": {
        "prefix": "typstartf ",
        "body": [
            "DECLARE_STOPWATCH stopwatch",
            "START_STOPWATCH stopwatch",
            "",
            "PRINT \"PROGRAM START--------------------------------------------------\"",
            "",
            "! -----------------------------------------------------------------",
            "! SET TO METRIC",
            "CALL lib:\\sigma_commands\\metric_units.tab",
            "",
            "! -----------------------------------------------------------------",
            "! SET MDL ACCURACY",
            "SET_ACCURACY THIS ABSOLUTE 0.00001",
            "",
            "! -----------------------------------------------------------------",
            "! SPLIT all multiple outline surfaces",
            "CALL lib:\\sigma_commands\\cad_surface_splitting_module.tab "
        ],
        "description": "typstartf "
    },
    "udff": {
        "prefix": "udff ",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!  INSERT UDF (WITHOUT ADDING UDF RELATIONS)",
            "! -----------------------------------------------------------------------------------------------------",
            "CREATE_UDF lib:udfs\\prim_cyl.gph THIS REMOVE_UDF_RELATIONS a_cyl_udf",
            "\tUDF_REF \"CSYS\" csys",
            "\tUDF_DIM \"X\" x",
            "\tUDF_DIM \"Y\" y",
            "\tUDF_DIM \"Z\" z",
            "\tUDF_DIM \"U\" u",
            "\tUDF_DIM \"V\" v",
            "\tUDF_DIM \"W\" w",
            "\tUDF_DIM \"L\" L",
            "\tUDF_DIM \"DIA\" dia",
            "\tUDF_EXP_REF a_cyl_quilt QUILT 4 ",
            "END_CREATE_UDF "
        ],
        "description": "udff "
    },
    "versionf": {
        "prefix": "versionf ",
        "body": [
            "\t! Give a warning if PROE VERSION not compatible",
            "\tGET_PROE_VERSION proenum proename",
            "\tIF proenum < 40 ",
            "\t\tMESSAGE_BOX \"THIS DEMO RUNS IN CREO 8\" ",
            "\t\tEXIT ",
            "\tEND_IF\t",
            "\t",
            "\t! Give a warning if Smartassembly version older than SA8",
            "\tGET_SA_VERSION sa_version sa_release sa_datecode",
            "",
            "\tIF  sa_version < 8",
            "\t\tMESSAGE_BOX \"THIS DEMO RUNS ON SA DATECODE FROM 2021-09-27-01\"",
            "\t\tEXIT ",
            "\tEND_IF "
        ],
        "description": "versionf "
    },
    "whilef": {
        "prefix": "whilef ",
        "body": [
            "WHILE",
            "\t!count++",
            "END_WHILE "
        ],
        "description": "whilef "
    },
    "whileindexf": {
        "prefix": "whileindexf ",
        "body": [
            "DECLARE_VARIABLE INTEGER count 0 ",
            "GET_ARRAY_SIZE some_array1 size",
            "WHILE count < size",
            "\tGET_ARRAY_ELEM some_array1 count item1",
            "\tGET_ARRAY_ELEM some_array2 count item2",
            "\tcount++",
            "END_WHILE "
        ],
        "description": "whileindexf "
    },
    "writefilef": {
        "prefix": "writefilef ",
        "body": [
            "DECLARE_VARIABLE STRING the_full_string \"\"",
            "",
            "FOR item REF ARRAY types",
            "\tthe_full_string += item + \"\\n\"",
            "END_FOR",
            "",
            "RESOLVE_PATH @\"C:\\Users\\info\\Desktop\\the_text.txt\" PATH",
            "FILE_OPEN PATH \"w\" the_text",
            "FILE_WRITE  the_text the_full_string",
            "FILE_CLOSE the_text",
            "PLUGIN HIDE ASYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c start \\\"\\\" \\\"\"+PATH+\"\\\"\" "
        ],
        "description": "writefilef "
    },
    "writetab": {
        "prefix": "writetab ",
        "body": [
            "! ------------------------------------------------------------",
            "! Write File",
            "FILE_OPEN tab_file_name \"w\" tbf",
            "",
            "FILE_WRITE_LINE tbf \"BEGIN_GUI_DESCR\"",
            "FILE_WRITE_LINE tbf \"END_GUI_DESCR\"",
            "FILE_WRITE_LINE tbf \"\\nBEGIN_ASM_DESCR\"",
            "FILE_WRITE_LINE tbf \"\\tCONFIG_ELEM\"",
            "FILE_WRITE_LINE tbf \"END_ASM_DESCR\"",
            "FILE_WRITE_LINE tbf \"\\nBEGIN_TAB_DESCR\"",
            "",
            "FOR a_table REF ARRAY chaines_tables",
            "\tFOR a_line REF ARRAY a_table",
            "\t\tFILE_WRITE_LINE tbf a_line",
            "\tEND_FOR",
            "\tFILE_WRITE_LINE tbf \"END_TABLE\"",
            "END_FOR",
            "",
            "FILE_WRITE_LINE tbf \"END_TAB_DESCR\\n\"",
            "",
            "FILE_CLOSE tbf",
            "",
            "INCLUDE tab_file_name "
        ],
        "description": "writetab "
    },
    "xgmlf": {
        "prefix": "xgmlf ",
        "body": [
            "",
            "! -----------------------------------------------------------------",
            "! Declare variable to hold the text string as you go through the program - there are definitely better ways then this for big scale",
            "DECLARE_VARIABLE STRING final_text_xgml",
            "",
            "! -----------------------------------------------------------------",
            "! Write header",
            "final_text_xgml = final_text_xgml + \"<?xml version=\\\"1.0\\\" encoding=\\\"Cp1252\\\"?><section name=\\\"xgml\\\"><attribute key=\\\"Creator\\\" type=\\\"String\\\">yFiles</attribute><attribute key=\\\"Version\\\" type=\\\"String\\\">2.18</attribute><section name=\\\"graph\\\"><attribute key=\\\"hierarchic\\\" type=\\\"int\\\">1</attribute><attribute key=\\\"label\\\" type=\\\"String\\\"></attribute><attribute key=\\\"directed\\\" type=\\\"int\\\">1</attribute>\"",
            "",
            "! -----------------------------------------------------------------",
            "! Write Space ",
            "final_text_xgml = final_text_xgml + \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\"",
            "",
            "! -----------------------------------------------------------------",
            "! Writing id and title - nodes",
            "final_text_xgml = final_text_xgml + \"<section name=\\\"node\\\"><attribute key=\\\"id\\\" type=\\\"int\\\">\"+the_id+\"</attribute><attribute key=\\\"label\\\" type=\\\"String\\\">\"+the_title",
            "! Writing rest of the node",
            "final_text_xgml = final_text_xgml + \"</attribute><section name=\\\"graphics\\\"><attribute key=\\\"fill\\\" type=\\\"String\\\">#00FFFF</attribute></section></section>\"\t\t\t",
            "",
            "! -----------------------------------------------------------------",
            "! Add some space",
            "final_text_xgml = final_text_xgml + \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\"",
            "",
            "! -----------------------------------------------------------------",
            "! Edges - adding source and root",
            "final_text_xgml = final_text_xgml + \"<section name=\\\"edge\\\"><attribute key=\\\"source\\\" type=\\\"int\\\">\"+sub_match+\"</attribute><attribute key=\\\"target\\\" type=\\\"int\\\">\"+the_root+\"</attribute><section name=\\\"graphics\\\"><attribute key=\\\"fill\\\" type=\\\"String\\\">#000000</attribute><attribute key=\\\"targetArrow\\\" type=\\\"String\\\">standard</attribute></section></section>\"",
            "",
            "! -----------------------------------------------------------------",
            "! Ending the edge\t\t",
            "final_text_xgml = final_text_xgml + \"</section></section>\"",
            "",
            "! -----------------------------------------------------------------",
            "! Choose a file or file path ",
            "CHOOSE_FILE \"C:\\\\\\\\Users\\\\\\\\info\\\\\\\\Desktop\\\\\\\\\" step_path",
            "CHOOSE_PATH \"C:\\\\\\\\Users\\\\\\\\info\\\\\\\\Desktop\\\\\\\\\" step_path",
            "PARSE_FILE_NAME step_path PATH FILE EXT",
            "DECLARE_VARIABLE STRING step_text_path PATH+\"\\\\\\\\\"+FILE+\".TXT\"",
            "DECLARE_VARIABLE STRING file_name_xgml \"the_graph\"",
            "DECLARE_VARIABLE STRING end_path \"C:\\\\\\\\Users\\\\\\\\info\\\\\\\\Desktop\\\\\\\\\"",
            "",
            "! -----------------------------------------------------------------",
            "! Write the whole string to the file",
            "FILE_OPEN end_path+file_name_xgml+\".txt\" \"w\" graph_file",
            "FILE_WRITE graph_file final_text_xgml",
            "FILE_CLOSE graph_file",
            "",
            "! -----------------------------------------------------------------",
            "! Convert the file to a xgml file and open the graph software",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c RENAME \"+end_path+file_name_xgml+\".txt\"+\" \"+file_name_xgml+\".xgml\"",
            "PLUGIN SHOW SYNC \"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\cmd.exe\" \"/c start \"+end_path+file_name_xgml+\".xgml\"",
            " "
        ],
        "description": "xgmlf "
    },
    "xmlreadf": {
        "prefix": "xmlreadf ",
        "body": [
            "",
            "",
            "DECLARE_REFERENCE new_product",
            "DECLARE_VARIABLE INTEGER count",
            "",
            "DECLARE_VARIABLE STRING XML_FILE \"lib:test_file.xml\"",
            "XML_LOAD_DOCUMENT XML_FILE xmlDoc",
            "",
            "",
            "XML_GET_NODE xmlDoc \"QUOTE/ORDER_NUMBER\" \"\" order_num_node",
            "XML_GET_NODE_VALUE order_num_node order_num",
            "PRINT \"ORDER NUMBER: %\" order_num",
            "",
            "",
            "XML_GET_NODES xmlDoc \"QUOTE/PRODUCT/\" \"\" product_nodes",
            "",
            "! Alternative way to search for nodes",
            "",
            "! PRINT \"prod_nodes: %\" product_nodes",
            "",
            "",
            "FOR each_product_node REF ARRAY product_nodes",
            "\t",
            "\tPRINT \"NEW PRODUCT-------\"",
            "\tXML_GET_NODES each_product_node \"COMPONENT\" \"\" comp_nodes",
            "\t",
            "\tFOR each_comp_node REF ARRAY comp_nodes",
            "\t\tXML_GET_NODE each_comp_node \"COMP_NAME\" \"\" comp_node",
            "\t\tXML_GET_NODE_VALUE comp_node comp_name",
            "\t\tXML_GET_NODES each_comp_node \"CONSTRAINT_SET\" \"\" constraint_set_nodes",
            "\t\tFOR constraint_set_node REF ARRAY constraint_set_nodes",
            "\t\t\tXML_GET_NODE constraint_set_node \"COMP_CONSTRAINT_TYPE\" \"\" comp_constr_type_node",
            "\t\t\tXML_GET_NODE_VALUE comp_constr_type_node constr_type",
            "\t\t\tBEGIN_CATCH_ERROR",
            "\t\t\tXML_GET_NODE constraint_set_node \"COMP_CONSTRAINT_UPPER\" \"\" comp_constr_upper_node",
            "\t\t\tXML_GET_NODE_VALUE comp_constr_upper_node constr_upper",
            "\t\t\tXML_GET_NODE constraint_set_node \"COMP_CONSTRAINT_LOWER\" \"\" comp_constr_lower_node",
            "\t\t\tXML_GET_NODE_VALUE comp_constr_lower_node constr_lower",
            "\t\t\tEND_CATCH_ERROR",
            "\t\t\tPRINT \"COMP NAME: %----%---%---%--%\" comp_name  constr_type constr_upper constr_lower",
            "\t\tEND_FOR",
            "\tEND_FOR",
            "END_FOR ",
            " "
        ],
        "description": "xmlreadf "
    },
    "END_CATCH_ERROR": {
        "description": "This command terminates an mode and switches back to normal runtime error handling."
    },
    "END_DEBUG": {
        "description": "Terminates the debug mode started with ."
    },
    "FILE_HANDLE_VALID_SNIPPET": {
        "prefix": "FILEVALIDF",
        "body": [
            "! -----------------------------------------------------------------------------------------------------",
            "!   TEST WHETHER SOMETHING IS A FILE HANDLE AND WHETHER STILL OPEN",
            "! -----------------------------------------------------------------------------------------------------",
            "DECLARE_VARIABLE BOOL file_handle_check FALSE",
            "DECLARE_VARIABLE BOOL open_file_handle_check FALSE",
            "GET_VARIABLE_TYPE  input_variable var_type",
            "IF var_type == \"FILE\"",
            "\tfile_handle_check = TRUE",
            "\tIF FILE_VALID input_variable",
            "\t\topen_file_handle_check = TRUE",
            "\tEND_IF \t\t",
            "END_IF"
        ],
        "description": "Checks whether a variable is a file handle and whether it is open/valid and can be written to."
    }
}